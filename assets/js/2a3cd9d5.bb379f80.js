"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1458],{4963:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var n=t(4848),o=t(8453),a=t(1470),i=t(9365);const s={},l="Items and Containers",d={id:"datagrid/items-containers",title:"Items and Containers",description:"Every item that is contained in a grid or detail has a container that provides it with a visual representation. Although normally a container's item is dealt with directly, sometimes it is necessary to access the container instead.",source:"@site/docs/datagrid/items-containers.md",sourceDirName:"datagrid",slug:"/datagrid/items-containers",permalink:"/xceed-doc-ui/docs/datagrid/items-containers",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Foreign Key Detection",permalink:"/xceed-doc-ui/docs/datagrid/foreign-key-detection"},next:{title:"UI Automation and Testing",permalink:"/xceed-doc-ui/docs/datagrid/ui-automation-testing"}},c={},u=[{value:"Group Items",id:"group-items",level:2},{value:"Examples",id:"examples",level:2}];function h(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"items-and-containers",children:"Items and Containers"})}),"\n",(0,n.jsx)(r.p,{children:"Every item that is contained in a grid or detail has a container that provides it with a visual representation. Although normally a container's item is dealt with directly, sometimes it is necessary to access the container instead."}),"\n",(0,n.jsxs)(r.p,{children:["Through the ",(0,n.jsx)(r.code,{children:"GetContainerFromItem"})," method, which is defined on both the ",(0,n.jsx)(r.code,{children:"DataGridControl"})," and ",(0,n.jsx)(r.code,{children:"DataGridContext"})," classes, the containers of data items (",(0,n.jsx)(r.strong,{children:"DataRow"}),") and of any item located in the headers or footers of a grid or group, such as ",(0,n.jsx)(r.code,{children:"ColumnManagerRows"}),", can be retrieved (see Examples 1 and 3).\r\nConversely, an item can be retrieved from its container using the ",(0,n.jsx)(r.code,{children:"GetItemFromContainer"})," method, which is also defined on the ",(0,n.jsx)(r.code,{children:"DataGridControl"})," and ",(0,n.jsx)(r.code,{children:"DataGridContext"})," classes."]}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Only items that are visible in the viewport have containers. If ",(0,n.jsx)(r.strong,{children:"GetContainerFromItem"})," is called for an item that exists in the context but is not visible in the viewport, ",(0,n.jsx)(r.strong,{children:"null"})," (",(0,n.jsx)(r.strong,{children:"Nothing"})," in Visual Basic) will be returned."]})}),"\n",(0,n.jsx)(r.h2,{id:"group-items",children:"Group Items"}),"\n",(0,n.jsxs)(r.p,{children:["A container that is located in the headers or footers of a group can be identified through the use of a ",(0,n.jsx)(r.code,{children:"GroupHeaderFooterItem"}),", which is created from the ",(0,n.jsx)(r.code,{children:"CollectionViewGroup"})," in which the container is located and the template that was used to create it. The ",(0,n.jsx)(r.code,{children:"GroupHeaderFooterItem"})," structure can then be passed to the GetContainerFromItem method to retrieve the desired container. Through the ",(0,n.jsx)(r.code,{children:"GetParentGroupFromItem"})," method, which is defined on both the ",(0,n.jsx)(r.code,{children:"DataGridControl"})," and ",(0,n.jsx)(r.code,{children:"DataGridContext"})," classes,  the parent group of a data item or any ",(0,n.jsx)(r.code,{children:"GroupHeaderFooterItem"})," structure, which also exposes its parent group through its Group property, can be retrieved. The newly retrieved group can then, for example, be expanded or collapsed using the ",(0,n.jsx)(r.code,{children:"ExpandGroup"}),",  ",(0,n.jsx)(r.code,{children:"CollapseGroup"}),", or ",(0,n.jsx)(r.code,{children:"ToggleGroupExpansion"})," methods (see Example 2)."]}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Example 1: Selecting all data items in a group"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to select all the data items contained in a group by adding them to a grid's selected-items collection when a group-header control is pressed. In the case where a group contains child groups, all the data items in the child groups will also be selected."}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    <Style TargetType="{x:Type xcdg:GroupHeaderControl}">\r\n      <EventSetter Event="PreviewMouseLeftButtonDown"\r\n                  Handler="SelectRows"/>\r\n    </Style>\r\n  </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})}),(0,n.jsx)(i.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"private void SelectRows( object sender, MouseEventArgs e )\r\n{\r\n  GroupHeaderControl groupHeaderControl = sender as GroupHeaderControl;\r\n  if( groupHeaderControl == null )\r\n    return;\r\n  DataGridContext context = DataGridControl.GetDataGridContext( groupHeaderControl );\r\n  GroupHeaderFooterItem header = ( GroupHeaderFooterItem )context.GetItemFromContainer( groupHeaderControl );\r\n  if( !header.Equals( GroupHeaderFooterItem.Empty ) )\r\n  {\r\n    CollectionViewGroup group = context.GetParentGroupFromItem( header );\r\n    if( group != null )\r\n    {\r\n      foreach( object item in group.Items )\r\n      {\r\n        if( item is CollectionViewGroup )\r\n        {\r\n          this.SelectRecurse( context, ( CollectionViewGroup )item );\r\n        }\r\n        else\r\n        {\r\n          context.SelectedItems.Add( item );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nprivate void SelectRecurse( DataGridContext context, CollectionViewGroup group )\r\n{\r\n  foreach( object item in group.Items )\r\n  {\r\n    if( item is CollectionViewGroup )\r\n    {\r\n      this.SelectRecurse( context, ( CollectionViewGroup )item );\r\n    }\r\n    else\r\n    {\r\n      context.SelectedItems.Add( item );\r\n    }\r\n  }\r\n}\n"})})}),(0,n.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"Private Sub SelectRows( ByVal sender As Object, ByVal e As MouseButtonEventArgs )\r\n    Dim groupHeaderControl As GroupHeaderControl = TryCast( sender, GroupHeaderControl );\r\n    If groupHeaderControl Is Nothing Then\r\n      Return;\r\n    End If\r\n    Dim context As DataGridContext = DataGridControl.GetDataGridContext( groupHeaderControl )\r\n    Dim header As GroupHeaderFooterItem = TryCast( context.GetItemFromContainer( grouHeaderControl, GroupHeaderFooterItem )\r\n    If Not header.Equals( GroupHeaderFooterItem.Empty ) Then\r\n      Dim group As CollectionViewGroup = context.GetParentGroupFromItem( header )\r\n      If Not group Is Nothing Then\r\n        For Each item As Object In group.Items\r\n          If TypeOf item Is CollectionViewGroup Then\r\n            Me.SelectRecurse( context, CType( item, CollectionViewGroup ) )\r\n          Else\r\n            context.SelectedItems.Add( item )\r\n          End If\r\n        Next item\r\n      End If\r\n    End If\r\n  End Sub\r\n  Private Sub SelectRecurse( ByVal context As DataGridContext, ByVal group As CollectionViewGroup )\r\n    For Each item As Object In group.Items\r\n      If TypeOf item Is CollectionViewGroup Then\r\n        Me.SelectRecurse( context, CType( item, CollectionViewGroup ) )\r\n      Else\r\n        context.SelectedItems.Add( item )\r\n      End If\r\n    Next item\r\n  End Sub\n"})})})]})]}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Example 2: Retrieving a parent group"}),(0,n.jsxs)(r.p,{children:["The following example demonstrates how to retrieve the parent group of the current item using the GetParentGroupFromItem method so that it can be collapsed. The implementation for the ",(0,n.jsx)(r.code,{children:"CollapseCurrentGroup"})," method is provided below."]}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <DockPanel>\r\n      <Button Content="Collapse Group"\r\n              Click="CollapseCurrentGroup"\r\n              DockPanel.Dock="Top"/>\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                            DockPanel.Dock="Bottom"/>\r\n    </DockPanel>\r\n  </Grid>\n'})})}),(0,n.jsx)(i.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"  private void CollapseCurrentGroup( object sender, RoutedEventArgs e )\r\n  {\r\n    DataGridContext context = this.OrdersGrid.CurrentContext;\r\n    CollectionViewGroup group = context.GetParentGroupFromItem( context.CurrentItem );\r\n    context.CollapseGroup( group );\r\n  }\n"})})}),(0,n.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"Private Sub CollapseCurrentGroup( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  Dim context As DataGridContext = Me.OrdersGrid.CurrentContext\r\n  Dim group As CollectionViewGroup = context.GetParentGroupFromItem( context.CurrentItem )\r\n  context.CollapseGroup( group )\r\nEnd Sub\n"})})})]})]}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"Example 3: Retrieving a data row from a data item"}),(0,n.jsxs)(r.p,{children:["The following example demonstrates how to retrieve a ",(0,n.jsx)(r.code,{children:"DataRow"})," (container) for a data item using the ",(0,n.jsx)(r.code,{children:"GetContainerFromItem"})," method. It is important to remember that data rows are virtualized; therefore, references to them or their cells should never be kept."]}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'    public Window1()\r\n    {\r\n      InitializeComponent();\r\n      DataGridControl grid = new DataGridControl();   \r\n        \r\n      DataGridCollectionView view = new DataGridCollectionView( App.Orders.DefaultView );\r\n      grid.ItemsSource = view;\r\n      // Subscribe to the PropertyChanged event to know when the CurrentItem property changes.\r\n      grid.PropertyChanged +=\r\n            new System.ComponentModel.PropertyChangedEventHandler( grid_PropertyChanged );    \r\n        \r\n      this.Content = grid;\r\n    }\r\n    void grid_PropertyChanged( object sender, System.ComponentModel.PropertyChangedEventArgs e )\r\n    {\r\n      if( e.PropertyName == "CurrentItem" )\r\n      {\r\n        // Retrieve the data-row container for the current item. Can be null if the data item\r\n        // is not in the viewport.\r\n        DataGridControl grid = sender as DataGridControl;\r\n        Xceed.Wpf.DataGrid.DataRow row = grid.GetContainerFromItem( grid.CurrentItem ) as Xceed.Wpf.DataGrid.DataRow;\r\n        // Change the background of the data row to pink. Data rows are recycled once they\r\n        // exit the viewport; therefore, any modifications made to a data row will\r\n        // be discarded once it is no longer in the viewport.\r\n        row.Background = Brushes.Pink;\r\n      }\r\n    }\n'})})}),(0,n.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Public Sub New()\r\n    InitializeComponent()\r\n    Dim grid As New DataGridControl()\r\n    Dim view As New DataGridCollectionView( App.Orders.DefaultView )\r\n    grid.ItemsSource = view\r\n    ' Subscribe to the PropertyChanged event to know when the CurrentItem property changes.\r\n    AddHandler grid.PropertyChanged, AddressOf grid_PropertyChanged\r\n    Me.Content = grid\r\n  End Sub\r\n  Private Sub grid_PropertyChanged( ByVal sender As Object, _\r\n                                  ByVal e As System.ComponentModel.PropertyChangedEventArgs )\r\n    If e.PropertyName = \"CurrentItem\" Then\r\n      ' Retrieve the data-row container for the current item. Can be Nothing if the data item\r\n      ' is not in the viewport.\r\n      Dim grid As DataGridControl = CType( sender, DataGridControl )\r\n      Dim row As Xceed.Wpf.DataGrid.DataRow = TryCast( grid.GetContainerFromItem( grid.CurrentItem ), Xceed.Wpf.DataGrid.DataRow )\r\n      ' Change the background of the data row to pink. Data rows are recycled once they\r\n      ' exit the viewport; therefore, any modifications made to a data row will\r\n      ' be discarded once it is no longer in the viewport.\r\n      row.Background = Brushes.Pink\r\n    End If\r\n  End Sub\n"})})})]})]})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},9365:(e,r,t)=>{t.d(r,{A:()=>i});t(6540);var n=t(4164);const o={tabItem:"tabItem_Ymn6"};var a=t(4848);function i(e){let{children:r,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,n.A)(o.tabItem,i),hidden:t,children:r})}},1470:(e,r,t)=>{t.d(r,{A:()=>G});var n=t(6540),o=t(4164),a=t(3104),i=t(6347),s=t(205),l=t(7485),d=t(1682),c=t(679);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:o}}=e;return{value:r,label:t,attributes:n,default:o}}))}(t);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function p(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:t}=e;const o=(0,i.W6)(),a=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(a),(0,n.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(o.location.search);r.set(a,e),o.replace({...o.location,search:r.toString()})}),[a,o])]}function g(e){const{defaultValue:r,queryString:t=!1,groupId:o}=e,a=h(e),[i,l]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:a}))),[d,u]=m({queryString:t,groupId:o}),[g,x]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,a]=(0,c.Dv)(t);return[o,(0,n.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),C=(()=>{const e=d??g;return p({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{C&&l(C)}),[C]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=t(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function b(e){let{className:r,block:t,selectedValue:n,selectValue:i,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const r=e.currentTarget,t=l.indexOf(r),o=s[t].value;o!==n&&(d(r),i(o))},u=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},r),children:s.map((e=>{let{value:r,label:t,attributes:a}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>l.push(e),onKeyDown:u,onClick:c,...a,className:(0,o.A)("tabs__item",C.tabItem,a?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function w(e){let{lazy:r,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function v(e){const r=g(e);return(0,f.jsxs)("div",{className:(0,o.A)("tabs-container",C.tabList),children:[(0,f.jsx)(b,{...r,...e}),(0,f.jsx)(w,{...r,...e})]})}function G(e){const r=(0,x.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(r))}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>s});var n=t(6540);const o={},a=n.createContext(o);function i(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);