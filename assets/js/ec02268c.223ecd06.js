"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[3454],{1684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var r=n(4848),o=n(8453),i=n(1470),a=n(9365);const c={},s="Using Statistical Functions",l={id:"code-snippets/36",title:"Using Statistical Functions",description:"The following page provides a list of examples that demonstrate how to validate data.",source:"@site/datagrid/code-snippets/36.md",sourceDirName:"code-snippets",slug:"/code-snippets/36",permalink:"/xceed-doc-ui/datagrid/code-snippets/36",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Using Routed View Properties",permalink:"/xceed-doc-ui/datagrid/code-snippets/35"},next:{title:"Validating Data",permalink:"/xceed-doc-ui/datagrid/code-snippets/37"}},u={},d=[];function p(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"using-statistical-functions",children:"Using Statistical Functions"})}),"\n",(0,r.jsx)(t.p,{children:"The following page provides a list of examples that demonstrate how to validate data."}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the OrderDetails table of the Northwind database, unless stated otherwise."})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Displaying statistical functions"}),(0,r.jsx)(t.p,{children:"The following example demonstrates how to display the results of various statistical functions in and outside of a grid."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orderdetails"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=OrderDetails}">\r\n      <xcdg:DataGridCollectionViewSource.StatFunctions>\r\n        <xcdg:CountFunction ResultPropertyName="orderid_count"\r\n                            SourcePropertyName="OrderID"/>\r\n        <xcdg:SumFunction ResultPropertyName="unitprice_sum"\r\n                          SourcePropertyName="UnitPrice"/>\r\n        <xcdg:SumFunction ResultPropertyName="quantity_sum" SourcePropertyName="Quantity"/>\r\n      </xcdg:DataGridCollectionViewSource.StatFunctions>\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ProductID"/>      \r\n  </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    <xcdg:StatResultConverter x:Key="valueConverter"/>\r\n    </Grid.Resources>\r\n    <DockPanel>\r\n      <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n        <TextBlock Text="Total Orders: "/>\r\n        <TextBlock Text="{Binding ElementName=OrderDetailsGrid,\r\n                  Path=StatContext.orderid_count}"/>\r\n      </StackPanel>\r\n      <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n        <TextBlock Text="Average Unit Price: "/>\r\n      <TextBlock Text="{Binding ElementName=OrderDetailsGrid,\r\n                          Path=StatContext.unitprice_average,\r\n                          Converter={StaticResource valueConverter},\r\n                          ConverterParameter=f2}"/>\r\n      </StackPanel>\r\n      <xcdg:DataGridControl x:Name="OrderDetailsGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orderdetails}}"\r\n                            DockPanel.Dock="Bottom">\r\n        <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n          <xcdg:GroupConfiguration> \r\n          <xcdg:GroupConfiguration.Footers>\r\n            <DataTemplate>\r\n                <xcdg:StatRow>\r\n                <xcdg:StatCell FieldName="UnitPrice"\r\n                                ResultPropertyName="unitprice_sum"/>\r\n                <xcdg:StatCell FieldName="Quantity"\r\n                                ResultPropertyName="quantity_sum"/>\r\n                <xcdg:StatCell FieldName="OrderID"\r\n                                ResultPropertyName="orderid_count"/>\r\n              </xcdg:StatRow>\r\n            </DataTemplate>\r\n          </xcdg:GroupConfiguration.Footers>\r\n          </xcdg:GroupConfiguration>\r\n        </xcdg:DataGridControl.DefaultGroupConfiguration>    \r\n      </xcdg:DataGridControl>\r\n    </DockPanel>\r\n  </Grid>\n'})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Changing statistical contexts"}),(0,r.jsxs)(t.p,{children:["The following example demonstrates how to change the statistical context of a ",(0,r.jsx)(t.strong,{children:"TextBlock"})," that displays the results of a statistical function when the current item is changed. The statistical context of the ",(0,r.jsx)(t.strong,{children:"TextBlock"})," will be changed in the grid's ",(0,r.jsx)(t.code,{children:"PropertyChanged"})," event handler by using the GetParentGroupFromItem method to retrieve the current group and set it as the new statistical context."]}),(0,r.jsxs)(t.p,{children:["To simplify the code below, the ",(0,r.jsx)(t.code,{children:"DataContext"})," of the StackPanel could have been modified rather than the ",(0,r.jsx)(t.code,{children:"DataContext"})," of each ",(0,r.jsx)(t.strong,{children:"TextBlock"}),"."]}),(0,r.jsxs)(t.p,{children:["The implementation of the ",(0,r.jsx)(t.code,{children:"PropertyChanged"})," event handler is located below."]}),(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orderdetails"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=OrderDetails}">\r\n    <xcdg:DataGridCollectionViewSource.StatFunctions>\r\n      <xcdg:CountFunction ResultPropertyName="orderid_count"\r\n                          SourcePropertyName="OrderID"/>\r\n      <xcdg:SumFunction ResultPropertyName="unitprice_sum"\r\n                        SourcePropertyName="UnitPrice"/>\r\n      <xcdg:SumFunction ResultPropertyName="quantity_sum" SourcePropertyName="Quantity"/>\r\n    </xcdg:DataGridCollectionViewSource.StatFunctions>\r\n    <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      <xcdg:DataGridGroupDescription PropertyName="ProductID"/>      \r\n</xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  <xcdg:StatResultConverter x:Key="valueConverter"/>\r\n  </Grid.Resources>\r\n  <DockPanel>\r\n    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n      <TextBlock Text="Total Orders: "/>\r\n      <TextBlock Text="{Binding ElementName=OrderDetailsGrid,\r\n                Path=StatContext.orderid_count}"/>\r\n    </StackPanel>\r\n    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n      <TextBlock Text="Average Unit Price: "/>\r\n    <TextBlock Text="{Binding ElementName=OrderDetailsGrid,\r\n                        Path=StatContext.unitprice_average,\r\n                        Converter={StaticResource valueConverter},\r\n                        ConverterParameter=f2}"/>\r\n    </StackPanel>\r\n    <xcdg:DataGridControl x:Name="OrderDetailsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orderdetails}}"\r\n                          DockPanel.Dock="Bottom">\r\n      <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n        <xcdg:GroupConfiguration> \r\n        <xcdg:GroupConfiguration.Footers>\r\n          <DataTemplate>\r\n              <xcdg:StatRow>\r\n              <xcdg:StatCell FieldName="UnitPrice"\r\n                              ResultPropertyName="unitprice_sum"/>\r\n              <xcdg:StatCell FieldName="Quantity"\r\n                              ResultPropertyName="quantity_sum"/>\r\n              <xcdg:StatCell FieldName="OrderID"\r\n                              ResultPropertyName="orderid_count"/>\r\n            </xcdg:StatRow>\r\n          </DataTemplate>\r\n        </xcdg:GroupConfiguration.Footers>\r\n        </xcdg:GroupConfiguration>\r\n      </xcdg:DataGridControl.DefaultGroupConfiguration>    \r\n    </xcdg:DataGridControl>\r\n  </DockPanel>\r\n</Grid>\n'})})}),(0,r.jsx)(a.A,{value:"csharp",label:"C#",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'private void CurrentItemChanged( object sender, PropertyChangedEventArgs e )\r\n{\r\n  if( e.PropertyName == "CurrentItem" )\r\n  {\r\n    if( this.OrderDetailsGrid.CurrentItem == null )\r\n      return;\r\n    CollectionViewGroup group =\r\n              this.OrderDetailsGrid.GetParentGroupFromItem( this.OrderDetailsGrid.CurrentItem );\r\n    this.CurrentGroupTitle.DataContext = group;\r\n    this.TotalOrders.DataContext = group;\r\n    this.AveragePrice.DataContext = group;\r\n  }\r\n}\n'})})}),(0,r.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vbnet",children:'Private Sub CurrentItemChanged( ByVal sender As Object, _\r\n                                ByVal e AsPropertyChangedEventArgs  )\r\n  If e.PropertyName = "CurrentItem" Then\r\n    If Me.OrderDetailsGrid.CurrentItem Is Nothing Then\r\n      Return\r\n    End If\r\n    Dim group As CollectionViewGroup =\r\n              Me.OrderDetailsGrid.GetParentGroupFromItem( Me.OrderDetailsGrid.CurrentItem )\r\n    Me.CurrentGroupTitle.DataContext = group\r\n    Me.TotalOrders.DataContext = group\r\n    Me.AveragePrice.DataContext = group\r\n  End If\r\nEnd Sub\n'})})})]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Custom statistical-result layout"}),(0,r.jsx)(t.p,{children:"The following example demonstrates how to create a custom data template that will be used in the footers of the first-level groups to display the results of various statistical functions."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orderdetails"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=OrderDetails}"> \r\n      <xcdg:DataGridCollectionViewSource.StatFunctions>\r\n        <xcdg:CountFunction ResultPropertyName="orderid_count"\r\n                            SourcePropertyName="OrderID"/>\r\n        <xcdg:SumFunction ResultPropertyName="unitprice_sum"\r\n                          SourcePropertyName="UnitPrice"/>\r\n        <xcdg:AverageFunction ResultPropertyName="unitprice_average"\r\n                              SourcePropertyName="UnitPrice"/>\r\n        <xcdg:SumFunction ResultPropertyName="quantity_sum"\r\n                          SourcePropertyName="Quantity"/>\r\n      </xcdg:DataGridCollectionViewSource.StatFunctions>       \r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ProductID"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    <xcdg:StatResultConverter x:Key="valueConverter"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrderDetailsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orderdetails}}">\r\n      <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n        <xcdg:GroupConfiguration>\r\n          <xcdg:GroupConfiguration.Footers>\r\n            <xcdg:GroupHeaderFooterItemTemplate VisibleWhenCollapsed="True">\r\n              <DataTemplate>\r\n                <Border Background="#999999"\r\n                        BorderBrush="LightBlue"\r\n                        BorderThickness="3"\r\n                        Margin="5" >\r\n                  <Grid>\r\n                    <Grid.ColumnDefinitions>\r\n                      <ColumnDefinition/>\r\n                      <ColumnDefinition/>\r\n                    </Grid.ColumnDefinitions>\r\n                    <Grid.RowDefinitions>\r\n                      <RowDefinition/>\r\n                      <RowDefinition/>\r\n                      <RowDefinition/>\r\n                      <RowDefinition/>\r\n                    </Grid.RowDefinitions>\r\n                    <TextBlock Text="Total Orders: " Grid.Row="0" Grid.Column="0"/>\r\n                    <TextBlock Text="{Binding RelativeSource={RelativeSource Self},\r\n                                              Path=(xcdg:DataGridControl.StatContext).orderid_count}"\r\n                                Grid.Row="0" Grid.Column="1"/>                    \r\n                      <TextBlock Text="Total Quantity Sold: " Grid.Row="1" Grid.Column="0"/>\r\n                    <TextBlock Text="{Binding RelativeSource={RelativeSource Self},\r\n                                    Path=(xcdg:DataGridControl.StatContext).quantity_sum}"\r\n                                    Grid.Row="1" Grid.Column="1"/>  \r\n                      <TextBlock Text="Total Sales: " Grid.Row="2" Grid.Column="0"/>\r\n                    <TextBlock Text="{Binding RelativeSource={RelativeSource Self},\r\n                                              Path=(xcdg:DataGridControl.StatContext).unitprice_sum}"\r\n                                Grid.Row="2" Grid.Column="1"/>  \r\n                      <TextBlock Text="Average Unit Price: " Grid.Row="3" Grid.Column="0"/>\r\n                    <TextBlock Text="{Binding RelativeSource={RelativeSource Self},\r\n                                              Path=(xcdg:DataGridControl.StatContext).unitprice_average,\r\n                                              Converter={StaticResource valueConverter},\r\n                                              ConverterParameter=f2}"\r\n                                Grid.Row="3" Grid.Column="1"/>         \r\n                    </Grid>\r\n                  </Border> \r\n                </DataTemplate>  \r\n              </xcdg:GroupHeaderFooterItemTemplate>\r\n            </xcdg:GroupConfiguration.Footers>\r\n          </xcdg:GroupConfiguration>\r\n        </xcdg:DataGridControl.DefaultGroupConfiguration>\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:CardView AllowCardResize="True"/>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n    </Grid>\n'})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Displaying statistical functions in details"}),(0,r.jsx)(t.p,{children:"The following example demonstrates how to explicitly define detail descriptions for the DataRelations found in the DataTable to which the grid is bound and how to calculate statistical functions for a detail description whose results will be displayed in the StatRows contained in the footer sections of the details to which the description's corresponding detail configuration will be applied."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'  <Grid>\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Employees}">\r\n        <xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n            <xcdg:DataRelationDetailDescription RelationName="Employee_Orders"\r\n                                                Title="Employee Orders">\r\n              <xcdg:DataRelationDetailDescription.DetailDescriptions>\r\n                  <xcdg:DataRelationDetailDescription RelationName="Order_OrderDetails"\r\n                                                      Title="Order Details">\r\n                    <xcdg:DataRelationDetailDescription.ItemProperties>\r\n                        <xcdg:DataGridItemProperty Name="UnitPrice" />\r\n                        <xcdg:DataGridItemProperty Name="Quantity" />\r\n                        <xcdg:DataGridItemProperty Name="Discount" />\r\n                    </xcdg:DataRelationDetailDescription.ItemProperties>\r\n                    <xcdg:DataRelationDetailDescription.StatFunctions>                         \r\n                        <xcdg:SumFunction ResultPropertyName="sum_quantity"\r\n                                          SourcePropertyName="Quantity" />\r\n                        <xcdg:AverageFunction ResultPropertyName="average_unitprice"\r\n                                              SourcePropertyName="UnitPrice" />\r\n                    </xcdg:DataRelationDetailDescription.StatFunctions>\r\n                  </xcdg:DataRelationDetailDescription>\r\n              </xcdg:DataRelationDetailDescription.DetailDescriptions>\r\n            </xcdg:DataRelationDetailDescription>\r\n        </xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        ItemsSourceName="Employee Information"\r\n                        AutoCreateDetailConfigurations="True">\r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n        <xcdg:DetailConfiguration RelationName="Employee_Orders">\r\n            <xcdg:DetailConfiguration.DetailConfigurations>\r\n              <xcdg:DetailConfiguration RelationName="Order_OrderDetails">\r\n                  <xcdg:DetailConfiguration.Footers>\r\n                    <DataTemplate>\r\n                        <xcdg:StatRow Background="AliceBlue">\r\n                          <xcdg:StatCell FieldName="UnitPrice"\r\n                                          ResultPropertyName="average_unitprice"\r\n                                          ResultConverterParameter="f2" />\r\n                          <xcdg:StatCell FieldName="Quantity"\r\n                                          ResultPropertyName="sum_quantity" />                            \r\n                        </xcdg:StatRow>\r\n                    </DataTemplate>\r\n                  </xcdg:DetailConfiguration.Footers>\r\n              </xcdg:DetailConfiguration>\r\n            </xcdg:DetailConfiguration.DetailConfigurations>\r\n        </xcdg:DetailConfiguration>\r\n      </xcdg:DataGridControl.DetailConfigurations> \r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Custom statistical function"}),(0,r.jsxs)(t.p,{children:["The following example demonstrates how to create a custom statistical function based on the ",(0,r.jsx)(t.em,{children:"CountFunction"}),", which will only count the items if they match the specified conditions."]}),(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation"\r\n        xmlns:s="clr-namespace:System;assembly=mscorlib">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                          Source="{Binding Source={x:Static Application.Current}, Path=Products}">\r\n          <xcdg:DataGridCollectionViewSource.StatFunctions>\r\n            <local:CountIfFunction ResultPropertyName="CountProductsToOrder"\r\n                                  SourcePropertyName="ReorderLevel,UnitsOnOrder">\r\n              \x3c!-- Only count products which have a ReorderLevel of 5, 10, 15, or 20, and\r\n                    a UnitsOnOrder value of 0. --\x3e\r\n              <local:CountIfFunction.Conditions>\r\n                  <s:String>^5$|^10$|^15$|^20$</s:String>\r\n                  <s:String>^0$</s:String>\r\n              </local:CountIfFunction.Conditions>\r\n            </local:CountIfFunction>\r\n          </xcdg:DataGridCollectionViewSource.StatFunctions>\r\n          <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n            <xcdg:DataGridGroupDescription PropertyName="CategoryID" />\r\n          </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}">\r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ReorderLevel"/>\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n          <xcdg:GroupConfiguration>\r\n            <xcdg:GroupConfiguration.Footers>\r\n                <DataTemplate>\r\n                  <xcdg:StatRow Background="Pink">\r\n                    <xcdg:StatCell FieldName="ReorderLevel"\r\n                                    ResultPropertyName="CountProductsToOrder" />                      \r\n                  </xcdg:StatRow>  \r\n              </DataTemplate>\r\n            </xcdg:GroupConfiguration.Footers>\r\n          </xcdg:GroupConfiguration>\r\n      </xcdg:DataGridControl.DefaultGroupConfiguration>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,r.jsx)(a.A,{value:"csharp",label:"C#",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"  using System;\r\n  using Xceed.Wpf.DataGrid.Stats;\r\n  using System.Text.RegularExpressions;\r\n  using System.Collections.ObjectModel;\r\n  using System.Collections.Specialized;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    // This statistical function derives from CumulativeStatFunction because it can\r\n    // accumulate \"partial\" results. For instance, results of sub-group. This allows\r\n    // for better performance.\r\n    public class CountIfFunction : CumulativeStatFunction\r\n    {\r\n      // A parameterless constructor is necessary to use the class in XAML.\r\n      public CountIfFunction()\r\n        : base()\r\n      {\r\n        m_conditions = new ObservableCollection<string>();\r\n        m_conditions.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler( m_conditions_CollectionChanged );\r\n      }\r\n      // Initialize a new instance of the CountIfFunction specifying the ResultPropertyName\r\n      // and the SourcePropertyName.\r\n      public CountIfFunction( string resultPropertyName, string sourcePropertyNames )\r\n        : base( resultPropertyName, sourcePropertyNames )\r\n      {\r\n        m_conditions = new ObservableCollection<string>();\r\n        m_conditions.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler( m_conditions_CollectionChanged );\r\n      }\r\n      // Each condition applies to the values of the corresponding source property name\r\n      // (e.g., the first condition applies to the values of the first source property name).\r\n      // Gets the conditions that will be applied to the various values.\r\n      public ObservableCollection<string> Conditions\r\n      {\r\n        get\r\n        {\r\n          return m_conditions;\r\n        }\r\n      }\r\n      // When the grid needs to create temporary CountIfFunction instances for its\r\n      // calculation, this method will be called. Be sure to initialize everything\r\n      // having an impact on the result here.\r\n      protected override void InitializeFromInstance( StatFunction source )\r\n      {\r\n        base.InitializeFromInstance( source );\r\n        foreach( string condition in ( ( CountIfFunction )source ).Conditions )\r\n          this.Conditions.Add( condition );\r\n      }\r\n      // Validate the CountIf statistical function to make sure that it is capable\r\n      // to calculate its result. In our case, we need to make sure that a ResultPropertyName\r\n      // has been specified and that we have the same number of source property names\r\n      // as conditions.\r\n      protected override void Validate()\r\n      {\r\n        if( ( string.IsNullOrEmpty( ResultPropertyName ) ) ||\r\n            ( m_conditions.Count != this.SourcePropertyName.Split( ',' ).Length ) )\r\n        {\r\n          throw new InvalidOperationException();\r\n        }\r\n      }\r\n      // This method will be called when a new calculation is about to begin.\r\n      protected override void Reset()\r\n      {\r\n        m_count = 0;\r\n      }\r\n      // This method will be called for each data item that is part of the set (a group or\r\n      // the grid).\r\n      protected override void Accumulate( object[] values )\r\n      {\r\n        for( int i = 0; i < m_conditions.Count; i++ )\r\n        {\r\n          // As soon as one condition does not match is associated value, we simply\r\n          // return without having done the accumulation (the count increment).\r\n          if( !Regex.IsMatch( values[ i ].ToString(), m_conditions[ i ] ) )\r\n            return;\r\n        }\r\n        // In case of an overflow, we want to stop the calculation and report the error.\r\n        checked\r\n        {\r\n          m_count++;\r\n        }\r\n      }\r\n      // This method will be called when calculating the result of a group having\r\n      // sub-groups. Obviously, it will be called once for each sub-group.\r\n      protected override void AccumulateChildResult( StatResult childResult )\r\n      {\r\n        checked\r\n        {\r\n          m_count += Convert.ToInt64( childResult.Value );\r\n        }\r\n      }\r\n      // This method should return the result calculated so far.\r\n      protected override StatResult GetResult()\r\n      {\r\n        return new StatResult( m_count );\r\n      }\r\n      // The addition of the Conditions property, which influences the result of the\r\n      // statistical function, the CountIf function requires us to override IsEquivalent\r\n      // and GetEquivalenceKey to return a new key when 2 instances are compared.\r\n      protected override bool IsEquivalent( StatFunction statFunction )\r\n      {\r\n        CountIfFunction countIfFunction = statFunction as CountIfFunction;\r\n        if( countIfFunction == null )\r\n          return false;\r\n        if( m_conditions.Count != countIfFunction.Conditions.Count )\r\n          return false;\r\n        for( int i = 0; i < m_conditions.Count; i++ )\r\n        {\r\n          if( m_conditions[ i ] != countIfFunction.Conditions[ i ] )\r\n            return false;\r\n        }\r\n        return base.IsEquivalent( statFunction );\r\n      }\r\n      protected override int GetEquivalenceKey()\r\n      {\r\n        int hashCode = base.GetEquivalenceKey();\r\n        for( int i = 0; i < m_conditions.Count; i++ )\r\n          hashCode ^= m_conditions[ i ].GetHashCode();\r\n        return hashCode;\r\n      }\r\n      // Do not allow the Conditions property to be changed if the statistical function has\r\n      // been sealed (i.e., assigned to the DataGridCollectionView.StatFunctions property).\r\n      private void m_conditions_CollectionChanged( object sender, NotifyCollectionChangedEventArgs e )\r\n      {\r\n        this.CheckSealed();\r\n      }\r\n      private ObservableCollection<string> m_conditions;\r\n      private long m_count;\r\n    }\r\n  }\n"})})}),(0,r.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vbnet",children:"  Imports System\r\n  Imports System.Collections.ObjectModel\r\n  Imports System.Collections.Specialized\r\n  Imports System.Text.RegularExpressions\r\n  Imports Xceed.Wpf.DataGrid.Stats\r\n  Namespace Xceed.Wpf.Documentation\r\n    ' This statistical function derives from CumulativeStatFunction because it can\r\n    ' accumulate \"partial\" results. For instance, results of sub-group. This allows\r\n    ' for better performance.\r\n    Public Class CountIfFunction\r\n      Inherits CumulativeStatFunction\r\n      ' A parameterless constructor is necessary to use the class in XAML.\r\n      Public Sub New()\r\n        MyBase.New()\r\n        m_conditions = New ObservableCollection(Of String)()\r\n        AddHandler m_conditions.CollectionChanged, AddressOf m_conditions_CollectionChanged\r\n      End Sub\r\n      ' Initialize a new instance of the CountIfFunction specifying the ResultPropertyName\r\n      ' and the SourcePropertyName.\r\n      Public Sub New(ByVal resultPropertyName As String, ByVal sourcePropertyNames As String)\r\n        MyBase.New(resultPropertyName, sourcePropertyNames)\r\n        m_conditions = New ObservableCollection(Of String)()\r\n        AddHandler m_conditions.CollectionChanged, AddressOf m_conditions_CollectionChanged\r\n      End Sub\r\n      ' Each condition applies to the values of the corresponding source property name\r\n      ' (e.g., the first condition applies to the values of the first source property name).\r\n      ' Gets the conditions that will be applied to the various values.\r\n      Public ReadOnly Property Conditions() As ObservableCollection(Of String)\r\n        Get\r\n          Return m_conditions\r\n        End Get\r\n      End Property\r\n      ' When the grid needs to create temporary CountIfFunction instances for its\r\n      ' calculation, this method will be called. Be sure to initialize everything\r\n      ' having an impact on the result here.\r\n      Protected Overrides Sub InitializeFromInstance(ByVal source As StatFunction)\r\n        MyBase.InitializeFromInstance(source)\r\n        For Each condition As String In (CType(source, CountIfFunction)).Conditions\r\n          Me.Conditions.Add(condition)\r\n        Next condition\r\n      End Sub\r\n      ' Validate the CountIf statistical function to make sure that it is capable\r\n      ' to calculate its result. In our case, we need to make sure that a ResultPropertyName\r\n      ' has been specified and that we have the same number of source property names\r\n      ' as conditions.\r\n      Protected Overrides Sub Validate()\r\n        If (Me.ResultPropertyName Is Nothing) OrElse\r\n          (Me.ResultPropertyName = String.Empty) OrElse\r\n          (m_conditions.Count <> Me.SourcePropertyName.Split(\",\"c).Length) Then\r\n          Throw New InvalidOperationException()\r\n        End If\r\n      End Sub\r\n      ' This method will be called when a new calculation is about to begin.\r\n      Protected Overrides Sub Reset()\r\n        m_count = 0\r\n      End Sub\r\n      ' This method will be called for each data item that is part of the set (a group or\r\n      ' the grid).\r\n      Protected Overrides Sub Accumulate(ByVal values As Object())\r\n        Dim i As Integer = 0\r\n        Do While i < m_conditions.Count\r\n          ' As soon as one condition does not match is associated value, we simply\r\n          ' return without having done the accumulation (the count increment).\r\n          If (Not Regex.IsMatch(values(i).ToString(), m_conditions(i))) Then\r\n            Return\r\n          End If\r\n          i += 1\r\n        Loop\r\n        ' The compilation configuration will cause this line to throw\r\n        ' if an OverflowException occurs.\r\n        m_count += 1\r\n      End Sub\r\n      ' This method will be called when calculating the result of a group having\r\n      ' sub-groups. Obviously, it will be called once for each sub-group.\r\n      Protected Overrides Sub AccumulateChildResult(ByVal childResult As StatResult)\r\n        m_count += Convert.ToInt64(childResult.Value)\r\n      End Sub\r\n      ' This method should return the result calculated so far.\r\n      Protected Overrides Function GetResult() As StatResult\r\n        Return New StatResult(m_count)\r\n      End Function\r\n      ' The addition of the Conditions property, which influences the result of the\r\n      ' statistical function, the CountIf function requires us to override IsEquivalent\r\n      ' and GetEquivalenceKey to return a new key when 2 instances are compared.\r\n      Protected Overrides Function IsEquivalent(ByVal statFunction As StatFunction) As Boolean\r\n        Dim countIfFunction As CountIfFunction = TryCast(statFunction, CountIfFunction)\r\n        If countIfFunction Is Nothing Then\r\n          Return False\r\n        End If\r\n        If m_conditions.Count <> countIfFunction.Conditions.Count Then\r\n          Return False\r\n        End If\r\n        Dim i As Integer = 0\r\n        Do While i < m_conditions.Count\r\n          If m_conditions(i) <> countIfFunction.Conditions(i) Then\r\n            Return False\r\n          End If\r\n          i += 1\r\n        Loop\r\n        Return MyBase.IsEquivalent(statFunction)\r\n      End Function\r\n      Protected Overrides Function GetEquivalenceKey() As Integer\r\n        Dim hashCode As Integer = MyBase.GetEquivalenceKey()\r\n        Dim i As Integer = 0\r\n        Do While i < m_conditions.Count\r\n          hashCode = hashCode Xor m_conditions(i).GetHashCode()\r\n          i += 1\r\n        Loop\r\n        Return hashCode\r\n      End Function\r\n      ' Do not allow the Conditions property to be changed if the statistical function has\r\n      ' been sealed (i.e, assigned to the DataGridCollectionView.StatFunctions property).\r\n      Private Sub m_conditions_CollectionChanged(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)\r\n        Me.CheckSealed()\r\n      End Sub\r\n      Private m_conditions As ObservableCollection(Of String)\r\n      Private m_count As Long\r\n    End Class\r\n  End Namespace\n"})})})]})]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var r=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>y});var r=n(6540),o=n(4164),i=n(3104),a=n(6347),c=n(205),s=n(7485),l=n(1682),u=n(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=p(e),[a,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[l,d]=h({queryString:n,groupId:o}),[g,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,u.Dv)(n);return[o,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),f=(()=>{const e=l??g;return m({value:e,tabValues:i})?e:null})();(0,c.A)((()=>{f&&s(f)}),[f]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),x(e)}),[d,x,i]),tabValues:i}}var x=n(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=n(4848);function D(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:c}=e;const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=e=>{const t=e.currentTarget,n=s.indexOf(t),o=c[n].value;o!==r&&(l(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:c.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,C.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>s.push(e),onKeyDown:d,onClick:u,...i,className:(0,o.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function S(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=g(e);return(0,C.jsxs)("div",{className:(0,o.A)("tabs-container",f.tabList),children:[(0,C.jsx)(D,{...t,...e}),(0,C.jsx)(S,{...t,...e})]})}function y(e){const t=(0,x.A)();return(0,C.jsx)(v,{...e,children:d(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);