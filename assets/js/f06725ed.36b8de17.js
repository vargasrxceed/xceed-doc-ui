"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[4704],{7651:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>d,metadata:()=>c,toc:()=>u});var a=n(4848),t=n(8453),i=n(1470),o=n(9365);const d={},l="Customizing Cardflow 3D Views",c={id:"code-snippets/06",title:"Customizing Cardflow 3D Views",description:"The following page provides a list of examples that demonstrate how to customize the appearance of Cardflow 3D views. For more Cardflow 3D view-related information.",source:"@site/datagrid/code-snippets/06.md",sourceDirName:"code-snippets",slug:"/code-snippets/06",permalink:"/xceed-doc-ui/datagrid/code-snippets/06",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Customizing Views and Themes",permalink:"/xceed-doc-ui/datagrid/code-snippets/05"},next:{title:"Customizing Card Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/07"}},s={},u=[{value:"Providing surface configurations",id:"providing-surface-configurations",level:3},{value:"Providing an empty-surface brush",id:"providing-an-empty-surface-brush",level:3},{value:"Applying a grid background brush",id:"applying-a-grid-background-brush",level:3},{value:"Applying a card background brush",id:"applying-a-card-background-brush",level:3},{value:"Coercing a surface configuration",id:"coercing-a-surface-configuration",level:3}];function f(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"customizing-cardflow-3d-views",children:"Customizing Cardflow 3D Views"})}),"\n",(0,a.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to customize the appearance of Cardflow 3D views. For more Cardflow 3D view-related information."}),"\n",(0,a.jsx)(r.admonition,{type:"tip",children:(0,a.jsxs)(r.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,a.jsx)(r.em,{children:"Employees"})," or Products table of the Northwind database, unless stated otherwise."]})}),"\n",(0,a.jsx)(r.h3,{id:"providing-surface-configurations",children:"Providing surface configurations"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to provide an image and title surface configuration that will be applied to the center surface and a title surface configuration that will be applied to the left and right side cards."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                              Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n    <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="LastName"\r\n                    IsMainColumn="True"/>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:CardflowView3D>\r\n          <xcdg:CardflowView3D.Theme>\r\n            <xcdg:ElementalBlackTheme>\r\n                <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                  \x3c!-- Because an attempt is made to automatically detect an image in the data\r\n                        item, there is no need to specify the name of the field that contains\r\n                        the image in the surface configuration\'s ImageRegionConfiguration.\r\n                      \r\n                        If a data item contains more than one image you can set the FieldNames\r\n                        property of the ImageRegionConfiguration to the name of the field that\r\n                        contains the desired image. --\x3e\r\n                  <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>\r\n                \r\n                  \x3c!-- By default, the value of the main column will be displayed in the title regions. --\x3e\r\n                  <xcdg:TitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right"/>\r\n                </xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n            </xcdg:ElementalBlackTheme>\r\n          </xcdg:CardflowView3D.Theme>\r\n      </xcdg:CardflowView3D>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'  dataGridControl.Columns[ "LastName" ].IsMainColumn = true;\r\n  CardflowView3D view = new CardflowView3D();\r\n  ElementalBlackTheme theme = new ElementalBlackTheme();\r\n  // Because an attempt is made to automatically detect an image in the data\r\n  // item, there is no need to specify the name of the field that contains\r\n  // the image in the surface configuration\'s ImageRegionConfiguration.\r\n                        \r\n  // If a data item contains more than one image you can set the FieldNames\r\n  // property of the ImageRegionConfiguration to the name of the field that\r\n  // contains the desired image.\r\n  ImageAndTitleSurfaceConfiguration imageAndTitleSurfaceConfiguration = new ImageAndTitleSurfaceConfiguration();\r\n  imageAndTitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Center );\r\n  // By default, the value of the main column will be displayed in the title regions.\r\n  TitleSurfaceConfiguration titleSurfaceConfiguration = new TitleSurfaceConfiguration();\r\n  titleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Left | CardflowView3DSurfaces.Right );\r\n  theme.SurfaceConfigurations.Add( imageAndTitleSurfaceConfiguration );\r\n  theme.SurfaceConfigurations.Add( titleSurfaceConfiguration );\r\n  view.Theme = theme;\r\n  dataGridControl.View = view;\n'})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  dataGridControl.Columns( \"LastName\" ).IsMainColumn = True\r\n  Dim view As New CardflowView3D()\r\n  Dim theme As New ElementalBlackTheme()\r\n  ' Because an attempt is made to automatically detect an image in the data\r\n  ' item, there is no need to specify the name of the field that contains\r\n  ' the image in the surface configuration's ImageRegionConfiguration.\r\n\r\n  ' If a data item contains more than one image you can set the FieldNames\r\n  ' property of the ImageRegionConfiguration to the name of the field that\r\n  ' contains the desired image.\r\n  Dim imageAndTitleSurfaceConfiguration As new ImageAndTitleSurfaceConfiguration()\r\n  imageAndTitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Center )\r\n  ' By default, the value of the main column will be displayed in the title regions.\r\n  Dim titleSurfaceConfiguration As New TitleSurfaceConfiguration()\r\n  titleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Left And CardflowView3DSurfaces.Right )\r\n  theme.SurfaceConfigurations.Add( imageAndTitleSurfaceConfiguration )\r\n  theme.SurfaceConfigurations.Add( titleSurfaceConfiguration )\r\n  view.Theme = theme\r\n  dataGridControl.View = view\n"})})})]}),"\n",(0,a.jsx)(r.h3,{id:"providing-an-empty-surface-brush",children:"Providing an empty-surface brush"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to provide an empty-surface brush, which will be applied to all cards that do not display a surface."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n  \r\n      <LinearGradientBrush x:Key="emptySurfaceBrush"\r\n                            StartPoint="0.5,1"\r\n                            EndPoint="0.5,0">\r\n          <GradientStop Offset="0" Color="#FF0E0E0E"/>\r\n          <GradientStop Offset="0.33" Color="#FF323232"/>\r\n          <GradientStop Offset="0.63" Color="#FF4C4C4C"/>\r\n          <GradientStop Offset="1" Color="#FF949494"/>\r\n      </LinearGradientBrush>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n    <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="LastName"\r\n                    IsMainColumn="True"/>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>      \r\n      <xcdg:CardflowView3D SideCardsCount="1"\r\n                            EmptySurfaceBrush="{StaticResource emptySurfaceBrush}">\r\n          <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ElementalBlackTheme/>\r\n          </xcdg:CardflowView3D.Theme>\r\n        </xcdg:CardflowView3D>\r\n    </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'  LinearGradientBrush brush = new LinearGradientBrush();\r\n  brush.GradientStops.Add( new GradientStop( Color.FromArgb( 255, 14, 14, 14 ), 0 ) );\r\n  brush.GradientStops.Add( new GradientStop( Color.FromArgb( 255, 50, 50, 50 ), 0.33 ) );\r\n  brush.GradientStops.Add( new GradientStop( Color.FromArgb( 255, 76, 76, 76 ), 0.63 ) );\r\n  brush.GradientStops.Add( new GradientStop( Color.FromArgb( 255, 148, 148, 148 ), 1 ) );\r\n  dataGridControl.Columns[ "LastName" ].IsMainColumn = true;\r\n  CardflowView3D view = new CardflowView3D();\r\n  view.SideCardsCount = 1;\r\n  view.EmptySurfaceBrush = brush;\r\n  view.Theme = new ElementalBlackTheme();\r\n  dataGridControl.View = view;\n'})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:'  Dim brush As New LinearGradientBrush()\r\n  brush.GradientStops.Add( New GradientStop( Color.FromArgb( 255, 14, 14, 14 ), 0 ) )\r\n  brush.GradientStops.Add( New GradientStop( Color.FromArgb( 255, 50, 50, 50 ), 0.33 ) )\r\n  brush.GradientStops.Add( New GradientStop( Color.FromArgb( 255, 76, 76, 76 ), 0.63 ) )\r\n  brush.GradientStops.Add( New GradientStop( Color.FromArgb( 255, 148, 148, 148 ), 1 ) )\r\n  dataGridControl.Columns( "LastName" ).IsMainColumn = True\r\n  Dim view As New CardflowView3D()\r\n  view.SideCardsCount = 1\r\n  view.EmptySurfaceBrush = brush\r\n  view.Theme = New ElementalBlackTheme()\r\n  dataGridControl.View = view\n'})})})]}),"\n",(0,a.jsx)(r.h3,{id:"applying-a-grid-background-brush",children:"Applying a grid background brush"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to apply a one of the custom background brushes (provided by Xceed) to a grid's background."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n        \r\n      </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}"\r\n                          Background="{x:Static xcdg:DataGridControlBackgroundBrushes.AuroraRed}">     \r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="ProductName"\r\n                        IsMainColumn="True"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n            \x3c!-- In Cardflow 3D view, if a theme is not explicitly specified,\r\n                the Elemental Black theme will be used. --\x3e\r\n            <xcdg:CardflowView3D CardHeightToViewportRatio="0.5"/>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"  dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed;\n"})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed\n"})})})]}),"\n",(0,a.jsx)(r.h3,{id:"applying-a-card-background-brush",children:"Applying a card background brush"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to apply one of the custom background brushes (provided by Xceed) cards (i.e., data rows) by creating an implicit style that targets DataRow and that sets the background property."}),"\n",(0,a.jsx)(i.A,{children:(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                      Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n        <Style TargetType="{x:Type xcdg:DataRow}">\r\n          <Setter Property="Background"\r\n                  Value="{x:Static xcdg:CardBackgroundBrushes.Retro}"/>\r\n        </Style>  \r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_products}}">\r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="ProductName"\r\n                        IsMainColumn="True"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n            <xcdg:CardflowView3D CardHeightToViewportRatio="0.5">\r\n              <xcdg:CardflowView3D.Theme>\r\n                  <xcdg:ChameleonTheme/>\r\n              </xcdg:CardflowView3D.Theme>\r\n            </xcdg:CardflowView3D>           \r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n  </Grid>\n'})})})}),"\n",(0,a.jsx)(r.h3,{id:"coercing-a-surface-configuration",children:"Coercing a surface configuration"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to apply a different surface configuration on the back surface of the center card using the CoercedSurfaceConfiguration attached property."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">     \r\n    <Grid.RowDefinitions>\r\n      <RowDefinition Height="Auto"/>\r\n      <RowDefinition/>\r\n    </Grid.RowDefinitions>\r\n    <Grid.Resources>\r\n      \r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                      Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n    </Grid.Resources>\r\n  <Button Content="Coerce Surface Configuration"\r\n          Click="ApplyCoercedSurfaceConfiguration"\r\n          Grid.Row="0"/>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}"\r\n                          Grid.Row="1">\r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ProductName"\r\n                      IsMainColumn="True"/>\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:CardflowView3D CardHeightToViewportRatio="0.5">\r\n            <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ElementalBlackTheme>\r\n                  <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                    <xcdg:ImageSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right"/>\r\n                    <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>\r\n                    <xcdg:CompleteSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Back"\r\n                                                        AutoFillDefaultRegion="False">\r\n                        <xcdg:CompleteSurfaceConfiguration.DataRegionConfiguration>\r\n                          <xcdg:RegionConfiguration FieldNames="ProductID, UnitPrice, UnitsInStock"/>\r\n                        </xcdg:CompleteSurfaceConfiguration.DataRegionConfiguration>                      \r\n                    </xcdg:CompleteSurfaceConfiguration>\r\n                  </xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n              </xcdg:ElementalBlackTheme>\r\n            </xcdg:CardflowView3D.Theme>\r\n        </xcdg:CardflowView3D>           \r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"private ImageAndDataSurfaceConfiguration m_fullSurfaceConfiguration = new ImageAndDataSurfaceConfiguration();\r\nprivate void ApplyCoercedSurfaceConfiguration( object sender, RoutedEventArgs e )\r\n{\r\n  if( this.ProductsGrid.CurrentItem != null )\r\n  {\r\n    Xceed.Wpf.DataGrid.DataRow card = this.ProductsGrid.GetContainerFromItem(\r\n                                          this.ProductsGrid.CurrentItem ) as Xceed.Wpf.DataGrid.DataRow;\r\n    if( card != null )\r\n    {\r\n      card.SetValue( MultiSurfaceViewBase.CoercedSurfaceConfigurationProperty, m_fullSurfaceConfiguration );\r\n    }\r\n  }\r\n}\n"})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  Private m_fullSurfaceConfiguration As New ImageAndDataSurfaceConfiguration()\r\n  Private Sub ApplyCoercedSurfaceConfiguration( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n    If Not Me.ProductsGrid.CurrentItem Is Nothing Then\r\n      Dim card As Xceed.Wpf.DataGrid.DataRow = CType( Me.ProductsGrid.GetContainerFromItem( _\r\n                                          Me.ProductsGrid.CurrentItem ), Xceed.Wpf.DataGrid.DataRow )\r\n      If Not card Is Nothing Then\r\n        card.SetValue( MultiSurfaceViewBase.CoercedSurfaceConfigurationProperty, m_fullSurfaceConfiguration )\r\n      End If\r\n    End If\r\n  End Sub\n"})})})]})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(f,{...e})}):f(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var a=n(4164);const t={tabItem:"tabItem_Ymn6"};var i=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>v});var a=n(6540),t=n(4164),i=n(3104),o=n(6347),d=n(205),l=n(7485),c=n(1682),s=n(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function f(e){const{values:r,children:n}=e;return(0,a.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:a,default:t}}=e;return{value:r,label:n,attributes:a,default:t}}))}(n);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:n}=e;const t=(0,o.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(t.location.search);r.set(i,e),t.replace({...t.location,search:r.toString()})}),[i,t])]}function h(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,i=f(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:r,tabValues:i}))),[c,u]=m({queryString:n,groupId:t}),[h,p]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,i]=(0,s.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:t}),C=(()=>{const e=c??h;return g({value:e,tabValues:i})?e:null})();(0,d.A)((()=>{C&&l(C)}),[C]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),p(e)}),[u,p,i]),tabValues:i}}var p=n(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(4848);function w(e){let{className:r,block:n,selectedValue:a,selectValue:o,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),s=e=>{const r=e.currentTarget,n=l.indexOf(r),t=d[n].value;t!==a&&(c(r),o(t))},u=e=>{let r=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:d.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===r?0:-1,"aria-selected":a===r,ref:e=>l.push(e),onKeyDown:u,onClick:s,...i,className:(0,t.A)("tabs__item",C.tabItem,i?.className,{"tabs__item--active":a===r}),children:n??r},r)}))})}function b(e){let{lazy:r,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function S(e){const r=h(e);return(0,x.jsxs)("div",{className:(0,t.A)("tabs-container",C.tabList),children:[(0,x.jsx)(w,{...r,...e}),(0,x.jsx)(b,{...r,...e})]})}function v(e){const r=(0,p.A)();return(0,x.jsx)(S,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var a=n(6540);const t={},i=a.createContext(t);function o(e){const r=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);