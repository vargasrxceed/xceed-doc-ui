"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7772],{145:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var n=r(4848),i=r(8453);r(1470),r(9365);const l={},o="Cell Editors",a={id:"fundamentals/editing-validating/cell-editors",title:"Cell Editors",description:"The content of the cells contained in a grid are edited with CellEditors, whose type, by default, is determined by the data type of a cell's content (see Table 1).  Custom cell editors can also be provided per column by setting a column's CellEditor property, or per data type through the DataGridControl's DefaultCellEditors property.",source:"@site/datagrid/fundamentals/editing-validating/cell-editors.md",sourceDirName:"fundamentals/editing-validating",slug:"/fundamentals/editing-validating/cell-editors",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/cell-editors",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Routed Edit Events",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/routed-edit-event"},next:{title:"Date and Time Editors",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/date-time-editor"}},d={},s=[{value:"Edit Templates",id:"edit-templates",level:2},{value:"CellEditorBinding",id:"celleditorbinding",level:2},{value:"Cell Editor Display Conditions",id:"cell-editor-display-conditions",level:2},{value:"Additional Editor Controls",id:"additional-editor-controls",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"cell-editors",children:"Cell Editors"})}),"\n",(0,n.jsxs)(t.p,{children:["The content of the cells contained in a grid are edited with ",(0,n.jsx)(t.code,{children:"CellEditors"}),", whose type, by default, is determined by the data type of a cell's content (see Table 1).  Custom cell editors can also be provided per column by setting a column's ",(0,n.jsx)(t.code,{children:"CellEditor"})," property, or per data type through the DataGridControl's ",(0,n.jsx)(t.code,{children:"DefaultCellEditors"})," property."]}),"\n",(0,n.jsx)(t.p,{children:"Table 1: Default cell editors"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Data type"}),(0,n.jsx)(t.th,{children:"Cell editor"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Int16, Int32, Int64, Single, Double, Decimal"}),(0,n.jsx)(t.td,{children:"NumericTextBox"}),(0,n.jsx)(t.td,{children:"Represents a control that limits the value extracted from the inputted text to be a numeric value."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Boolean"}),(0,n.jsx)(t.td,{children:"CheckBox"}),(0,n.jsx)(t.td,{children:"Represents a control used to edit and display boolean values."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"String, XmlElement"}),(0,n.jsx)(t.td,{children:"AutoSelectTextBox"}),(0,n.jsx)(t.td,{children:"Represents a text box whose content is selected when it receives the focus as well as performs automatic focus navigation when the caret reaches the extremities of the text range."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DateTime"}),(0,n.jsx)(t.td,{children:"DatePicker"}),(0,n.jsx)(t.td,{children:"Represents a control used to edit and display dates."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"edit-templates",children:"Edit Templates"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"DataTemplates"})," are the most commonly used form of template and define the appearance of the data items displayed in an ItemsControl or the content of a ",(0,n.jsx)(t.strong,{children:"ContentControl"}),". Cell editors expose, through the ",(0,n.jsx)(t.code,{children:"EditTemplate"})," property, a ",(0,n.jsx)(t.strong,{children:"DataTemplate"})," which is used to edit the content of a cell (",(0,n.jsx)(t.strong,{children:"ContentControl"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"DataTemplate"})," provided though the ",(0,n.jsx)(t.code,{children:"EditTemplate"})," property can contain a single control (see Example 1) or it can be composed of various controls to form a more complex cell editor (see Example 2). Regardless of how an editor is composed, one element must be bound to the cell content using the ",(0,n.jsx)(t.code,{children:"CellEditorBinding"})," markup extension, which interprets and creates the binding required between a cell and its editor to allow an editor to modify the content of its associated cell."]}),"\n",(0,n.jsx)(t.p,{children:"Activation gestures are key and/or text input, which cause an element to enter edit mode and are defined through a cell editor's ActivationGestures property (see Examples 1 and 2)."}),"\n",(0,n.jsx)(t.p,{children:"In addition to providing custom cell editors on a per-column basis, they can also be provided per data type through a grid's DefaultCellEditors property (see Example 3)."}),"\n",(0,n.jsxs)(t.p,{children:["The cell editors provided through the ",(0,n.jsx)(t.code,{children:"DefaultCellEditors"})," property will only be used when a grid's AutoCreateColumns property is set to true.\r\nThe ",(0,n.jsx)(t.code,{children:"CellEditor"})," class also exposes static editors that can be assigned to a column's ",(0,n.jsx)(t.code,{children:"CellEditor"})," property if the built-in editors provided by Xceed DataGrid for WPF are to be used."]}),"\n",(0,n.jsx)(t.h2,{id:"celleditorbinding",children:"CellEditorBinding"}),"\n",(0,n.jsxs)(t.p,{children:["Rather than being better or different, the ",(0,n.jsx)(t.code,{children:"CellEditorBinding"})," is actually an internal mechanism that is needed to make the binding work between Cell.Content and any property used on the editor's template to edit a value."]}),"\n",(0,n.jsx)(t.p,{children:"Although we call it a binding, we are not creating a new type of binding. Essentially, we are simply using a middle object (a proxy) which binds on both the cell content and the editor, and updates one binding when the other one changes."}),"\n",(0,n.jsx)(t.p,{children:"The reason why this is required is due to the way a cell is constructed. When you provide a template to edit a cell, it is not the cell that is actually templated, it is a CellEditor. This CellEditor is not provided to the cell itself, it is a 'presenter' that manages both the editor and the viewer, and decides which is shown and which is hidden."}),"\n",(0,n.jsxs)(t.p,{children:["There starts to be quite a lot of indirection between the Cell.Content and, for instance, the TextBox.Text used within the editor control template to edit the value. Therefore the ",(0,n.jsx)(t.code,{children:"CellEditorBinding"})," is provided to simplify things."]}),"\n",(0,n.jsx)(t.h2,{id:"cell-editor-display-conditions",children:"Cell Editor Display Conditions"}),"\n",(0,n.jsxs)(t.p,{children:["The conditions under which cell editors are displayed are determined by the value of the ",(0,n.jsx)(t.code,{children:"CellEditorDisplayConditions"})," property, which can be defined for the entire grid, pre column, or per row. The ",(0,n.jsx)(t.code,{children:"EditTriggers"})," and ",(0,n.jsx)(t.code,{children:"CellEditorDisplayConditions"})," properties work independently of each other. For example, if the ",(0,n.jsx)(t.code,{children:"EditTriggers"})," property is set to None and the ",(0,n.jsx)(t.code,{children:"CellEditorDisplayConditions"})," property is set to CellIsCurrent, when a cell becomes current, its editor will be displayed and the content of the cell can be edited when focus is given to the cell editor (see Example 1)."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"A cell editor can be displayed without it being in edit mode."})}),"\n",(0,n.jsx)(t.h2,{id:"additional-editor-controls",children:"Additional Editor Controls"}),"\n",(0,n.jsx)(t.p,{children:"In addition to the default cell editors that are used to edit the content of cells that have a specific data type, other editor controls, which can be used both inside and outside of a grid, are also available:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"date-time-editor",children:"Date and Time Editors"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"masked-editor",children:"Masked Editors"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"numeric-editors",children:"Numeric Editors"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"text-value-editors",children:"Text and Value Editors"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 1: Providing a simple cell editor"}),(0,n.jsxs)(t.p,{children:["The following examples demonstrates how to change the edit template of the cell editor for the ",(0,n.jsx)(t.em,{children:"ShipVia"})," column to a ",(0,n.jsx)(t.code,{children:"Slider"})," control."]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.Columns>\r\n    <xcdg:Column FieldName="ShipVia">\r\n      <xcdg:Column.CellEditor>\r\n        <xcdg:CellEditor>\r\n          <xcdg:CellEditor.EditTemplate>\r\n            <DataTemplate>\r\n              <Slider Value="{xcdg:CellEditorBinding}" Minimum="1" Maximum="3"/>\r\n            </DataTemplate>\r\n          </xcdg:CellEditor.EditTemplate>\r\n          <xcdg:CellEditor.ActivationGestures>\r\n            <xcdg:KeyActivationGesture Key="Right"/>\r\n            <xcdg:KeyActivationGesture Key="Left"/>\r\n          </xcdg:CellEditor.ActivationGestures>\r\n        </xcdg:CellEditor>\r\n      </xcdg:Column.CellEditor>\r\n    </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 2: Providing a complex cell editor"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to change the edit template of the cell editor for the Freight column to a custom calculator control. The C# code for the ",(0,n.jsx)(t.code,{children:"Calculate"})," method called in the buttons' ",(0,n.jsx)(t.code,{children:"Click"})," event simply calculates the new equation and is not provided. To shorten the code, some of the Button and KeyActivationGesture declarations have been removed."]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="Freight">\r\n            <xcdg:Column.CellEditor>\r\n                <xcdg:CellEditor>\r\n                  <xcdg:CellEditor.EditTemplate>\r\n                      <DataTemplate>\r\n                          <DockPanel>\r\n                            <TextBlock x:Name="actual_value"\r\n                                      Text="{xcdg:CellEditorBinding}"\r\n                                        DockPanel.Dock="Top"/>\r\n                            <UniformGrid Columns="4" x:Name="parentPanel"\r\n                                          Tag="{Binding ElementName=actual_value,\r\n                                                        Path=Text,\r\n                                                        Mode=TwoWay,\r\n                                                        UpdateSourceTrigger=PropertyChanged}"\r\n                                          Button.Click="Calculate"\r\n                                          DockPanel.Dock="Top">\r\n                                <Button x:Name="seven" Content="7"/>\r\n                                \x3c!-- ... --\x3e\r\n                                <Button x:Name="addition" Content="+"/>\r\n                            </UniformGrid>\r\n                            <TextBlock x:Name="current_equation" DockPanel.Dock="Bottom"/>\r\n                          </DockPanel>\r\n                      </DataTemplate>\r\n                  </xcdg:CellEditor.EditTemplate>\r\n                  <xcdg:CellEditor.ActivationGestures>\r\n                      <xcdg:KeyActivationGesture Key="NumPad0"/>\r\n                      \x3c!-- ... --\x3e\r\n                      <xcdg:KeyActivationGesture Key="NumPad9"/>\r\n                  </xcdg:CellEditor.ActivationGestures>\r\n                </xcdg:CellEditor>\r\n            </xcdg:Column.CellEditor>\r\n          </xcdg:Column>\r\n        </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 3: Providing a default cell editor"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to provide a default cell editor for columns that have an Int32 data type."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:s="clr-namespace:System;assembly=mscorlib">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.DefaultCellEditors>\r\n      <xcdg:CellEditor x:Key="{x:Type s:Int32}">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <Slider Value="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n    </xcdg:DataGridControl.DefaultCellEditors>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>o});r(6540);var n=r(4164);const i={tabItem:"tabItem_Ymn6"};var l=r(4848);function o(e){let{children:t,hidden:r,className:o}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,n.A)(i.tabItem,o),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>j});var n=r(6540),i=r(4164),l=r(3104),o=r(6347),a=r(205),d=r(7485),s=r(1682),c=r(679);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:i}}=e;return{value:t,label:r,attributes:n,default:i}}))}(r);return function(e){const t=(0,s.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function p(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:r}=e;const i=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,d.aZ)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(i.location.search);t.set(l,e),i.replace({...i.location,search:t.toString()})}),[l,i])]}function x(e){const{defaultValue:t,queryString:r=!1,groupId:i}=e,l=h(e),[o,d]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,u]=m({queryString:r,groupId:i}),[x,g]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,l]=(0,c.Dv)(r);return[i,(0,n.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:i}),f=(()=>{const e=s??x;return p({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{f&&d(f)}),[f]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var g=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(4848);function C(e){let{className:t,block:r,selectedValue:n,selectValue:o,tabValues:a}=e;const d=[],{blockElementScrollPositionUntilNextRender:s}=(0,l.a_)(),c=e=>{const t=e.currentTarget,r=d.indexOf(t),i=a[r].value;i!==n&&(s(t),o(i))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=d.indexOf(e.currentTarget)+1;t=d[r]??d[0];break}case"ArrowLeft":{const r=d.indexOf(e.currentTarget)-1;t=d[r]??d[d.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},t),children:a.map((e=>{let{value:t,label:r,attributes:l}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>d.push(e),onKeyDown:u,onClick:c,...l,className:(0,i.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function v(e){let{lazy:t,children:r,selectedValue:l}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===l));return e?(0,n.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==l})))})}function y(e){const t=x(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,b.jsx)(C,{...t,...e}),(0,b.jsx)(v,{...t,...e})]})}function j(e){const t=(0,g.A)();return(0,b.jsx)(y,{...e,children:u(e.children)},String(t))}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const i={},l=n.createContext(i);function o(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);