"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1044],{4025:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var t=r(4848),a=r(8453),i=r(1470),o=r(9365);const l={},s="Validating Data",d={id:"fundamentals/editing-validating/validation",title:"Validating Data",description:"Xceed DataGrid for WPF offers data validation support at various levels, including cells, row, and business-objects. How and when data is validated is determined by binding- and UI-level validation rules, which are queried when a cell or row is about to end its edit process, when a cell's content is changed, or when data is loaded into a grid.",source:"@site/datagrid/fundamentals/editing-validating/validation.md",sourceDirName:"fundamentals/editing-validating",slug:"/fundamentals/editing-validating/validation",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/validation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Text and Value Editors",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/text-value-editors"},next:{title:"Cell Error Styles",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/cell-error-styles"}},c={},u=[{value:"Binding-level Validation",id:"binding-level-validation",level:2},{value:"UI-level Validation",id:"ui-level-validation",level:2},{value:"Validation Errors",id:"validation-errors",level:2},{value:"Validation Order and Chained Validations",id:"validation-order-and-chained-validations",level:2},{value:"Examples",id:"examples",level:2}];function m(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"validating-data",children:"Validating Data"})}),"\n",(0,t.jsx)(n.p,{children:"Xceed DataGrid for WPF offers data validation support at various levels, including cells, row, and business-objects. How and when data is validated is determined by binding- and UI-level validation rules, which are queried when a cell or row is about to end its edit process, when a cell's content is changed, or when data is loaded into a grid."}),"\n",(0,t.jsx)(n.h2,{id:"binding-level-validation",children:"Binding-level Validation"}),"\n",(0,t.jsxs)(n.p,{children:["Through a column's ",(0,t.jsx)(n.code,{children:"DisplayMemberBindingInfo"})," property, information about a column's binding to its corresponding field in the underlying data source can be defined. In addition, the validation rules to apply to the data as it is read from and written to the data source (e.g., ",(0,t.jsx)(n.code,{children:"ExceptionValidationRule"})," and ",(0,t.jsx)(n.code,{children:"DataErrorValidationRule"}),") can be provided by adding the desired validation rules to the ",(0,t.jsx)(n.code,{children:"ValidationRules"})," collection (see Example 1)."]}),"\n",(0,t.jsxs)(n.p,{children:["Built-in support for ",(0,t.jsx)(n.code,{children:"IDataErrorInfo"})," provides business-object level validation that can be used in combination with validation rules."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Unless the ",(0,t.jsx)(n.code,{children:"ValidationRules"})," collection is cleared, it will always contain an ",(0,t.jsx)(n.code,{children:"ExceptionValidationRule"})," and ",(0,t.jsx)(n.code,{children:"DataErrorValidationRule"}),". If the ",(0,t.jsx)(n.code,{children:"DataErrorValidationRule"})," is excluded from the collection of validation rules, validation errors reported by ",(0,t.jsx)(n.code,{children:"IDataErrorInfo"})," will be ignored."]})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"The ValidationRules collection cannot be cleared once the binding has been established."})}),"\n",(0,t.jsx)(n.p,{children:"The moment when the data is written to the underlying data source, and therefore validated, is determined by the value of a grid's UpdateSourceTrigger property, which indicates whether the source is updated when a cell or row is ending its edit process or when a cell's content is changed."}),"\n",(0,t.jsx)(n.h2,{id:"ui-level-validation",children:"UI-level Validation"}),"\n",(0,t.jsxs)(n.p,{children:["Through the use of cell validation rules, the content of any cell can be validated before it is committed to the underlying data source. These rules can be provided for all the cells in a column by adding one or more ",(0,t.jsx)(n.code,{children:"CellValidationRule"})," objects to a ",(0,t.jsx)(n.code,{children:"CellValidationRules"})," collection or on a per-cell basis (see Example 2)."]}),"\n",(0,t.jsx)(n.h2,{id:"validation-errors",children:"Validation Errors"}),"\n",(0,t.jsxs)(n.p,{children:["When the value of a cell fails the validation process, its ",(0,t.jsx)(n.code,{children:"HasValidationError"})," property will return true, and its ",(0,t.jsx)(n.code,{children:"ValidationError"})," property will contain a ",(0,t.jsx)(n.code,{children:"CellValidationError"}),", which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed.  If the validation rule that failed is a binding-level ",(0,t.jsx)(n.code,{children:"ValidationRule"}),", it will be wrapped in a ",(0,t.jsx)(n.code,{children:"PassthroughCellValidationRule.Validation"})," errors will also be reported by a row when the value of one or more of its cells fail the validation process. Like cells, when a row contains validation errors, its HasValidationError property will return true, and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"IsValidationErrorRestrictive"})," property indicates whether the validation error that failed prevents the focus from moving to another row until the error is fixed. Usually, all errors are restrictive; however, validation errors reported through ",(0,t.jsx)(n.code,{children:"IDataErrorInfo"})," are considered non-restrictive."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Any validation rule created from the ",(0,t.jsx)(n.code,{children:"ValidationRule"})," class can be reused in a grid by using a  ",(0,t.jsx)(n.code,{children:"PassthroughCellValidationRule"}),", which wraps any validation rule and exposes it as a ",(0,t.jsx)(n.code,{children:"CellValidationRule"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"validation-order-and-chained-validations",children:"Validation Order and Chained Validations"}),"\n",(0,t.jsx)(n.p,{children:"Data is validated first by UI-level validation rules when data is modified, followed by the binding-level rules when the modified data is written back to the source."}),"\n",(0,t.jsx)(n.p,{children:"When a cell is successfully validated, an attempt will be made to re-validate any sibling cells that have validation errors. If more than one sibling cell has validation errors, their data will be re-validated at the same time. If, once the sibling cells have been successfully validated, other siblings have validation errors, they will be re-validated and so forth."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"All examples in this topic assume that the grid is bound to a list of Composer objects, unless stated otherwise."}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 1: Providing binding-level validation"}),(0,t.jsx)(n.p,{children:"The following example demonstrates how to create a custom ValidationRule and apply it to a column's binding to provide binding-level validation."}),(0,t.jsxs)(n.p,{children:["The implementation for the ",(0,t.jsx)(n.code,{children:"YearValidationRule"})," is provided below."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                          Source="{Binding Source={x:Static Application.Current}, \r\n                                                          Path=Composers}"/>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                          UpdateSourceTrigger="RowEndingEdit">\r\n      <xcdg:DataGridControl.Columns> \r\n        <xcdg:Column FieldName="BirthYear">\r\n            <xcdg:Column.DisplayMemberBindingInfo>\r\n              <xcdg:DataGridBindingInfo Path="BirthYear">\r\n                  <xcdg:DataGridBindingInfo.ValidationRules>\r\n                    <local:YearValidationRule />\r\n                  </xcdg:DataGridBindingInfo.ValidationRules>\r\n              </xcdg:DataGridBindingInfo>\r\n            </xcdg:Column.DisplayMemberBindingInfo>\r\n        </xcdg:Column>\r\n        <xcdg:Column FieldName="DeathYear">\r\n            <xcdg:Column.DisplayMemberBindingInfo>\r\n              <xcdg:DataGridBindingInfo Path="DeathYear">\r\n                  <xcdg:DataGridBindingInfo.ValidationRules>\r\n                    <local:YearValidationRule />\r\n                  </xcdg:DataGridBindingInfo.ValidationRules>\r\n              </xcdg:DataGridBindingInfo>\r\n            </xcdg:Column.DisplayMemberBindingInfo>\r\n        </xcdg:Column>      \r\n      </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing System.Windows.Controls;\r\nusing System.Globalization;\r\nnamespace Xceed.Wpf.Documentation\r\n{\r\n  public class YearValidationRule : ValidationRule\r\n  {\r\n    public override ValidationResult Validate( object value, CultureInfo cultureInfo )\r\n    {\r\n      int year = ( int )value;\r\n      if( year > DateTime.Now.Year )\r\n        return new ValidationResult( false, "Chosen year cannot be greater than this year." );\r\n      return ValidationResult.ValidResult;\r\n    }\r\n  }\r\n}\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'Imports System\r\nImports System.Windows.Controls\r\nImports System.Globalization\r\nNamespace Xceed.Wpf.Documentation\r\n  Public Class YearValidationRule\r\n              Inherits ValidationRule\r\n    Public Overrides Function Validate( ByVal value As Object, _\r\n                                        ByVal cultureInfo As CultureInfo ) As ValidationResult\r\n      Dim year As Integer = CInt( value )\r\n      If year > DateTime.Now.Year Then\r\n        Return New ValidationResult( False, "Chosen year cannot be greater than this year." )\r\n      End If\r\n      Return ValidationResult.ValidResult\r\n    End Function\r\n  End Class\r\nEnd Namespace\n'})})})]})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 2: Providing UI-level validation"}),(0,t.jsxs)(n.p,{children:["The following example demonstrates how to create a custom ",(0,t.jsx)(n.code,{children:"CellValidationRule"})," and add it to a column's ",(0,t.jsx)(n.code,{children:"CellValidationRules"})," collection to provide UI-level validation."]}),(0,t.jsxs)(n.p,{children:["The implementation for the ",(0,t.jsx)(n.em,{children:"PeriodVSCompositionCountCellValidationRule"})," and ",(0,t.jsx)(n.em,{children:"Person"})," class are provided below."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Composers}"/>\r\n    \x3c!--A data provider to bind to the Period enum--\x3e\r\n    <ObjectDataProvider x:Key="periods"\r\n                        MethodName="GetValues"\r\n                        ObjectType="{x:Type local:Period}">\r\n        <ObjectDataProvider.MethodParameters>\r\n          <x:Type TypeName="local:Period"/>\r\n        </ObjectDataProvider.MethodParameters>\r\n    </ObjectDataProvider>\r\n    \x3c!--A cell editor that will be used to edit a Period column with a combo box--\x3e\r\n    <xcdg:CellEditor x:Key="periodEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n              <ComboBox BorderThickness="0"\r\n                        MinHeight="22"\r\n                        VerticalContentAlignment="Top"\r\n                        SelectedValuePath="."\r\n                        ItemsSource="{Binding Source={StaticResource periods}}"\r\n                        SelectedValue="{xcdg:CellEditorBinding}">\r\n                <ComboBox.Resources>\r\n                    <Style TargetType="Popup">\r\n                      <Setter Property="TextElement.Foreground"\r\n                              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />\r\n                    </Style>\r\n                </ComboBox.Resources>\r\n              </ComboBox>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n    </xcdg:CellEditor>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                        UpdateSourceTrigger="RowEndingEdit">\r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="Period"\r\n                    CellEditor="{StaticResource periodEditor}">                                   \r\n          <xcdg:Column.CellValidationRules>\r\n            <local:PeriodVSCompositionCountCellValidationRule/>\r\n          </xcdg:Column.CellValidationRules>\r\n      </xcdg:Column>\r\n      <xcdg:Column FieldName="CompositionCount">\r\n          <xcdg:Column.CellValidationRules>\r\n            <local:PeriodVSCompositionCountCellValidationRule />\r\n          </xcdg:Column.CellValidationRules>\r\n      </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  using System;\r\n  using Xceed.Wpf.DataGrid.ValidationRules;\r\n  using Xceed.Wpf.DataGrid;\r\n  using System.Globalization;\r\n  using System.Windows.Controls;\r\n  namespace Xceed.Wpf.Documentation\r\n  { \r\n    public class PeriodVSCompositionCountCellValidationRule : CellValidationRule\r\n    {\r\n      public override ValidationResult Validate( object value, CultureInfo culture,\r\n                                                  CellValidationContext context )\r\n      {\r\n        Row parentRow = context.Cell.ParentRow;\r\n        int compositionCount;\r\n        Period period;\r\n        if( context.Cell.FieldName == "Period" )\r\n        {\r\n          period = ( Period )value;       \r\n          compositionCount = ( int )parentRow.Cells[ "CompositionCount" ].Content;\r\n        }\r\n        else\r\n        {\r\n          period = ( Period )parentRow.Cells[ "Period" ].Content;\r\n          compositionCount = ( int )value;\r\n        }\r\n        if( ( period == Period.Modern ) && compositionCount > 40 )\r\n          return new ValidationResult( false, "Composition count must be less than 50 when the period is set to Modern." );\r\n        return ValidationResult.ValidResult;\r\n      }\r\n    }\r\n  }\r\n  /*...*/\r\n  using System.ComponentModel;\r\n  using System.Windows.Media;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    public class Person: INotifyPropertyChanged, IDataErrorInfo\r\n    {\r\n      public Person( int personID, string firstName, string lastName, int age )\r\n      {\r\n        m_personID = personID;\r\n        m_firstName = firstName;\r\n        m_lastName = lastName;\r\n        m_age = age;\r\n      }\r\n      public Person()\r\n      {\r\n      }\r\n      public int PersonID\r\n      {\r\n        get\r\n        {\r\n          return m_personID;\r\n        }\r\n      }\r\n      public string FirstName\r\n      {\r\n        get\r\n        {\r\n          return m_firstName;\r\n        }\r\n        set\r\n        {\r\n          if( m_firstName != value )\r\n          {\r\n            m_firstName = value;\r\n            this.OnPropertyChanged( "FirstName" );\r\n          }\r\n        }\r\n      }\r\n      public string LastName\r\n      {\r\n        get\r\n        {\r\n          return m_lastName;\r\n        }\r\n        set\r\n        {\r\n          if( m_lastName != value )\r\n          {\r\n            m_lastName = value;\r\n            this.OnPropertyChanged( "LastName" );\r\n          }\r\n        }\r\n      }\r\n      public int Age\r\n      {\r\n        get\r\n        {\r\n          return m_age;\r\n        }\r\n        set\r\n        {\r\n          if( m_age == value )\r\n            return;\r\n          m_age = value;\r\n          this.OnPropertyChanged( "Age" );\r\n        }\r\n      }\r\n      // INotifyPropertyChanged implementation\r\n      public event PropertyChangedEventHandler PropertyChanged;\r\n      private void OnPropertyChanged( string propertyName )\r\n      {\r\n        if( this.PropertyChanged != null )\r\n          this.PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );\r\n      }\r\n      // IDataErrorInfo implementation\r\n      [EditorBrowsable( EditorBrowsableState.Never ) ]\r\n      [Browsable( false )]\r\n      public string Error\r\n      {\r\n        get\r\n        {\r\n          return "IDataErrorInfo Error Message";\r\n        }\r\n      }\r\n      [EditorBrowsable( EditorBrowsableState.Never )]\r\n      [Browsable( false )]\r\n      public string this[ string propertyName ]\r\n      {\r\n        get\r\n        {\r\n          if( propertyName == "Age" )\r\n          {\r\n            if( m_age < 18 )\r\n              return "An employee must be 18 years or older.";\r\n          }\r\n          return string.Empty;\r\n        }\r\n      }   \r\n      private string m_firstName = string.Empty;\r\n      private string m_lastName = string.Empty;\r\n      private int m_personID;\r\n      private int m_age = 18;\r\n    }\r\n  }\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'  Imports System\r\n  Imports Xceed.Wpf.DataGrid.ValidationRules\r\n  Imports Xceed.Wpf.DataGrid\r\n  Imports System.Globalization\r\n  Imports System.Windows.Controls\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class PeriodVSCompositionCountCellValidationRule\r\n                Inherits CellValidationRule\r\n      Public Overrides Function Validate( ByVal value As Object, ByVal culture As CultureInfo, _\r\n                                          ByVal context As CellValidationContext ) As ValidationResult\r\n        Dim parentRow As Row = context.Cell.ParentRow\r\n        Dim compositionCount As Integer\r\n        Dim period As Period\r\n        If context.Cell.FieldName = "Period" Then\r\n          period = CType( value, Period )\r\n          compositionCount = CInt( parentRow.Cells( "CompositionCount" ).Content )\r\n        Else\r\n          period = CType( parentRow.Cells( "Period" ).Content, Period )\r\n          compositionCount = CInt( value )\r\n        End If\r\n        If( ( period = Period.Modern ) And ( compositionCount > 40 ) ) Then\r\n          Return New ValidationResult( False, "Composition count must be less than 50 when the period is set to Modern." );\r\n        End If\r\n        Return ValidationResult.ValidResult\r\n      End Function\r\n    End Class\r\n  End Namespace\r\n  \'...\r\n  Imports System.ComponentModel\r\n  Imports System.Windows.Media\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class Person\r\n                Implements INotifyPropertyChanged\r\n      Public Sub New( personID As Integer, firstName As String, lastName As String, age As Integer )\r\n        m_personID = personID\r\n        m_firstName = firstName\r\n        m_lastName = lastName\r\n        m_age = age\r\n      End Sub\r\n      public Sub New()\r\n      End sub   \r\n      Public ReadOnly Property PersonID As Integer\r\n        Get\r\n          Return m_personID\r\n        End Get\r\n      End Property\r\n      Public Property FirstName As String\r\n        Get\r\n          Return m_firstName\r\n        End Get\r\n        Set( ByVal value As String )\r\n          If m_firstName <> value Then\r\n            m_firstName = value\r\n            Me.OnPropertyChanged( "FirstName" )\r\n          End If\r\n        End Set\r\n      End Property\r\n      Public Property LastName As String\r\n        Get\r\n          Return m_lastName\r\n        End Get\r\n        Set( ByVal value As String )\r\n          If m_lastName <> value Then\r\n            m_lastName = value\r\n            Me.OnPropertyChanged( "LastName" )\r\n          End If\r\n        End Set\r\n      End Property\r\n      Public Property Age As Integer\r\n        Get\r\n          Return m_age\r\n        End Get\r\n        Set( ByVal value As Integer )\r\n          If m_age = value Then\r\n            Return\r\n          End If\r\n          m_age = value\r\n          Me.OnPropertyChanged( "Age" )\r\n        End Set\r\n      End Property\r\n      \' INotifyPropertyChanged implementation\r\n      Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\r\n      Private Sub OnPropertyChanged( ByVal propertyName As String )\r\n        If Not Me.PropertyChanged Is Nothing Then\r\n          Me.PropertyChanged( Me, New PropertyChangedEventArgs( propertyName ) )\r\n        End If\r\n      End Sub\r\n      private string m_firstName = string.Empty;\r\n      private string m_lastName = string.Empty;\r\n      private m_personID As Integer\r\n      Private m_age As Integer = 18\r\n    End Class\r\n  End Namespace\n'})})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>o});r(6540);var t=r(4164);const a={tabItem:"tabItem_Ymn6"};var i=r(4848);function o(e){let{children:n,hidden:r,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,o),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(6540),a=r(4164),i=r(3104),o=r(6347),l=r(205),s=r(7485),d=r(1682),c=r(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const a=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,s.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,i=m(e),[o,s]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,u]=h({queryString:r,groupId:a}),[g,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Dv)(r);return[a,(0,t.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:a}),f=(()=>{const e=d??g;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var v=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=r(4848);function b(e){let{className:n,block:r,selectedValue:t,selectValue:o,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=s.indexOf(n),a=l[r].value;a!==t&&(d(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>s.push(e),onKeyDown:u,onClick:c,...i,className:(0,a.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function y(e){let{lazy:n,children:r,selectedValue:i}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function C(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(y,{...n,...e})]})}function w(e){const n=(0,v.A)();return(0,x.jsx)(C,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);