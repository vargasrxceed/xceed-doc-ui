"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[541],{379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=n(4848),r=n(8453);const s={},i="Object Model Overview",a={id:"datagrid/object-model-overview",title:"Object Model Overview",description:"Prerequisite Knowledge",source:"@site/docs/datagrid/object-model-overview.md",sourceDirName:"datagrid",slug:"/datagrid/object-model-overview",permalink:"/xceed-doc-ui/docs/datagrid/object-model-overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Datagrid control",permalink:"/xceed-doc-ui/docs/datagrid/intro"},next:{title:"DataGridControl Class",permalink:"/xceed-doc-ui/docs/datagrid/datagrid-control-class"}},l={},d=[{value:"Anatomy of the DataGridControl Class",id:"anatomy-of-the-datagridcontrol-class",level:2},{value:"A Closer Look at the Major Components",id:"a-closer-look-at-the-major-components",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"object-model-overview",children:"Object Model Overview"})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Prerequisite Knowledge"}),"\r\nMicrosoft Windows SDK: ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/ms754312(v=vs.85)?redirectedfrom=MSDN",children:"ItemsControl Content Model Overview"}),"\r\nMicrosoft Windows SDK: ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-3.0/ms742554(v=vs.85)?redirectedfrom=MSDN",children:"ContentControl Content Model Overview"})]})}),"\n",(0,o.jsxs)(t.p,{children:["If you are new to Windows Presentation Foundation (WPF), it is necessary to understand a few basic concepts before using Xceed DataGrid for WPF, notably, the ",(0,o.jsx)(t.strong,{children:"ItemsControl"}),", ",(0,o.jsx)(t.strong,{children:"ContentControl"}),", and ",(0,o.jsx)(t.strong,{children:"ContentPresenter"})," classes."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"ItemsControl"})," class (e.g., ",(0,o.jsx)(t.strong,{children:"DataGridControl"}),") represents a control that is used to display a collection of items. The ",(0,o.jsx)(t.strong,{children:"ItemsPanel"}),", which is a template that can be replaced or modified to rearrange the disposition of the items within the ",(0,o.jsx)(t.strong,{children:"ItemsControl"}),", defines the layout of the items contained in an ",(0,o.jsx)(t.strong,{children:"ItemsControl"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"ContentControl"})," class (e.g., Cell) represents a control which contains a single piece of content that is accessible through the ",(0,o.jsx)(t.strong,{children:"Content"})," property. The ",(0,o.jsx)(t.strong,{children:"ContentPresenter"})," determines how and where the content of the ",(0,o.jsx)(t.strong,{children:"ContentControl"})," is displayed in the visual tree."]}),"\n",(0,o.jsx)(t.h2,{id:"anatomy-of-the-datagridcontrol-class",children:"Anatomy of the DataGridControl Class"}),"\n",(0,o.jsxs)(t.p,{children:["At the root of Xceed's WPF datagrid is the ",(0,o.jsx)(t.code,{children:"DataGridControl"})," class, which derives from ",(0,o.jsx)(t.strong,{children:"ItemsControl"})," and is used to display a collection of data items. A ",(0,o.jsx)(t.code,{children:"DataRow"})," is the UI representation of a data item and will contain a DataCell for each property in the data item. ",(0,o.jsx)(t.strong,{children:"DataRow"})," and ",(0,o.jsx)(t.strong,{children:"DataCell"})," objects have a limited lifespan and will only exist while the data item is visible in a grid's viewport (virtualization)."]}),"\n",(0,o.jsxs)(t.p,{children:["DataCells, which display the value of the corresponding property in the data item, are ",(0,o.jsx)(t.strong,{children:"ContentControls"}),". How and where the cell's content is displayed is determined by the ",(0,o.jsx)(t.strong,{children:"ContentPresenter"})," that is defined by the cell's ",(0,o.jsx)(t.strong,{children:"ControlTemplate"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"a-closer-look-at-the-major-components",children:"A Closer Look at the Major Components"}),"\n",(0,o.jsxs)(t.p,{children:["The grid's major components include ",(0,o.jsx)(t.code,{children:"rows"}),", ",(0,o.jsx)(t.code,{children:"cells"}),", ",(0,o.jsx)(t.code,{children:"columns"}),", and their derivatives. ",(0,o.jsx)(t.code,{children:"DataRow"})," objects provide the UI representation of the data items displayed in a grid's viewport and contain a cell for each property in the data item. As previously mentioned, ",(0,o.jsx)(t.strong,{children:"DataRow"})," and ",(0,o.jsx)(t.strong,{children:"DataCell"})," objects  have a limited lifespan and exist only while they are visible in a grid's viewport; this is called virtualization and is the reason that the ",(0,o.jsx)(t.strong,{children:"Items"}),", ",(0,o.jsx)(t.code,{children:"SelectedItem"}),", ",(0,o.jsx)(t.code,{children:"SelectedItems"}),", and ",(0,o.jsx)(t.code,{children:"CurrentItem"})," properties of the ",(0,o.jsx)(t.strong,{children:"DataGridControl"})," class access data items and not data rows."]}),"\n",(0,o.jsxs)(t.p,{children:["The appearance of the data items is determined by the style or template that is applied to the resulting ",(0,o.jsx)(t.strong,{children:"DataRow"})," objects. ",(0,o.jsx)(t.strong,{children:"DataRow"})," styles can be provided implicitly or they can be assigned to the ",(0,o.jsx)(t.strong,{children:"ItemContainerStyle"})," property of the ",(0,o.jsx)(t.strong,{children:"DataGridControl"})," or ",(0,o.jsx)(t.code,{children:"GroupConfiguration"})," classes. ",(0,o.jsx)(t.strong,{children:"DataRow"})," templates can be provided by creating an implicit ControlTemplate or by assigning the template to the ItemTemplate property defined on the ",(0,o.jsx)(t.strong,{children:"DataGridControl"})," class (see ",(0,o.jsx)(t.code,{children:"Templates"})," and ",(0,o.jsx)(t.code,{children:"Styles"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["Each ",(0,o.jsx)(t.strong,{children:"DataRow"})," that is created will contain a cell for each property in the data item. Each cell is a separate ",(0,o.jsx)(t.strong,{children:"ContentControl"})," in which the value of the corresponding property in the data item is displayed. The cells contained in a ",(0,o.jsx)(t.strong,{children:"DataRow"})," can be accessed through the row's Cells collection."]}),"\n",(0,o.jsxs)(t.p,{children:["Like ",(0,o.jsx)(t.strong,{children:"DataRows"}),", the appearance and behavior of cells can be modified by creating a style for the ",(0,o.jsx)(t.strong,{children:"DataCell"})," class, or by providing a new ",(0,o.jsx)(t.strong,{children:"ControlTemplate"})," or ",(0,o.jsx)(t.strong,{children:"Style"})," for a specific ",(0,o.jsx)(t.strong,{children:"Cell"})," type (see Templates and ",(0,o.jsx)(t.code,{children:"Styles"}),"). Remember that a style must target a specific type, for example, ",(0,o.jsx)(t.code,{children:"DataCell"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Columns"})," define information on how the cells they contain are displayed and their content edited. In addition to the properties provided by each cell, a column's ",(0,o.jsx)(t.code,{children:"CellContentTemplate"})," property can be used to provide a new template that will be used by all the cells it contains to display their data. The list of all columns contained in a grid can be accessed through the Columns collection of the ",(0,o.jsx)(t.strong,{children:"DataGridControl"})," class."]}),"\n",(0,o.jsxs)(t.p,{children:["Each column has a title which is is displayed in its corresponding cell in any ",(0,o.jsx)(t.code,{children:"ColumnManagerRow"})," objects found in a grid. By default, this title corresponds to the ",(0,o.jsx)(t.code,{children:"FieldName"})," property; however, any value can be provided by setting the Title property."]}),"\n",(0,o.jsx)(t.p,{children:'Merged column headers allow you to organize columns vertically under headers that span multiple columns; for example, company name, company address, and company ID columns could be placed together under a "Company" title, helping to better present the data in the datagrid.'}),"\n",(0,o.jsx)(t.p,{children:"See the DataGrid sample in the LiveExplorer application for examples."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);