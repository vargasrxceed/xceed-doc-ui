"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1267],{755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var r=n(4848),i=n(8453);const o={},s="Migrating from Version 2.x",l={id:"migrating-from-prev/05",title:"Migrating from Version 2.x",description:"Although every attempt was made to prevent breaking interface changes between versions 2.x and 3.0, some were inevitable. This topic lists the most notable changes as well as provides a list of the members that were rendered obsolete.",source:"@site/datagrid/migrating-from-prev/05.md",sourceDirName:"migrating-from-prev",slug:"/migrating-from-prev/05",permalink:"/xceed-doc-ui/datagrid/migrating-from-prev/05",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Migrating from Version 3.0",permalink:"/xceed-doc-ui/datagrid/migrating-from-prev/04"},next:{title:"Migrating from Version 1.x",permalink:"/xceed-doc-ui/datagrid/migrating-from-prev/06"}},d={},a=[{value:"Behavior Changes",id:"behavior-changes",level:2},{value:"Obsolete Members",id:"obsolete-members",level:2},{value:"Inheritance Changes",id:"inheritance-changes",level:2},{value:"What Happened to ActualContent?",id:"what-happened-to-actualcontent",level:2},{value:"Known Issues",id:"known-issues",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"migrating-from-version-2x",children:"Migrating from Version 2.x"})}),"\n",(0,r.jsx)(t.p,{children:"Although every attempt was made to prevent breaking interface changes between versions 2.x and 3.0, some were inevitable. This topic lists the most notable changes as well as provides a list of the members that were rendered obsolete."}),"\n",(0,r.jsx)(t.h2,{id:"behavior-changes",children:"Behavior Changes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"AutoCreateItemProperties"})," property was added to the ",(0,r.jsx)(t.code,{children:"DataGridCollectionView"})," and ",(0,r.jsx)(t.code,{children:"DataGridCollectionViewSource"})," properties with a default value of true; therefore, as of version 3.0, all item properties (i.e., columns) will be added to the grid and not only the ones defined in the ItemProperties collection. Setting the ",(0,r.jsx)(t.code,{children:"AutoCreateItemProperties"})," to false will revert back to the expected 2.0 behavior."]}),"\n",(0,r.jsxs)(t.li,{children:["Because the ",(0,r.jsx)(t.strong,{children:"ValidationMode"})," property was made obsolete and a major overhaul of the validation behavior was done for version 3.0, some validation behaviors may have changed. These can include:"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["The focus no longer remains in a cell when it is in error when the ",(0,r.jsx)(t.strong,{children:"ValidationMode"})," was set to ",(0,r.jsx)(t.strong,{children:"CellEndingEdit"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["UI validation rules (",(0,r.jsx)(t.code,{children:"CellValidationRules"}),") are always validated when a cell exits edit mode or when the new value is updated in the source."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["Errors reported by ",(0,r.jsx)(t.code,{children:"IDataErrorInfo"})," will now be caught."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h1,{id:"breaking-interface-changes",children:"Breaking Interface Changes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"AutoFilterValues"})," property is now read-only on the ",(0,r.jsx)(t.code,{children:"DataGridCollectionView"}),", ",(0,r.jsx)(t.code,{children:"DataGridContext"}),", and ",(0,r.jsx)(t.code,{children:"DataGridDetailDescription"})," classes."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"BeginEdit"}),", ",(0,r.jsx)(t.strong,{children:"EndEdit"}),", and ",(0,r.jsx)(t.strong,{children:"CancelEdit"})," methods on the ",(0,r.jsx)(t.code,{children:"Row"})," and ",(0,r.jsx)(t.code,{children:"Cell"})," classes are no longer virtual and have been replaced by their virtual ",(0,r.jsx)(t.strong,{children:"BeginEditCore"}),", ",(0,r.jsx)(t.strong,{children:"EndEditCore"}),", and ",(0,r.jsx)(t.strong,{children:"CancelEditCore"})," counterparts."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Initialize"})," method on the ",(0,r.jsx)(t.code,{children:"Cell"})," class is no longer virtual and has been replaced by its virtual InitializeCore counterpart."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"Width"})," property on the ",(0,r.jsx)(t.code,{children:"Column"})," class is now a ",(0,r.jsx)(t.code,{children:"ColumnWidth"})," value rather than a double."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"EndNew"})," implementation of the ",(0,r.jsx)(t.code,{children:"ICancelAddNew"})," interface on the ",(0,r.jsx)(t.code,{children:"DataGridCollectionView"})," is now explicit rather than implicit."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"ICustomItemContainerGenerator"})," interface contains new members that need to be implemented on any classes that implement this interface."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"DropMarkOrientation"})," enumeration has been moved from the ",(0,r.jsx)(t.code,{children:"Xceed.Wpf.DataGrid"})," namespace to the",(0,r.jsx)(t.code,{children:" Xceed.Wpf.DataGrid.Views"})," namespace."]}),"\n",(0,r.jsxs)(t.li,{children:["The attached versions of the ",(0,r.jsx)(t.code,{children:"CardView.CardTitleBackground"}),", ",(0,r.jsx)(t.code,{children:"CardTitleForeground"}),", ",(0,r.jsx)(t.code,{children:"CardTitleTemplate"}),", ",(0,r.jsx)(t.code,{children:"HideEmptyCells"}),", ",(0,r.jsx)(t.code,{children:"InsertionCardTitleTemplate"}),", and ",(0,r.jsx)(t.code,{children:"StatCardTitleTemplate"})," properties have been removed as they were not supported."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"obsolete-members",children:"Obsolete Members"}),"\n",(0,r.jsx)(t.p,{children:"The following table provides a list of the members that were rendered obsolete and their replacement."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Obsolete member"}),(0,r.jsx)(t.th,{children:"Replacement member"}),(0,r.jsx)(t.th,{children:"Type"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RowSelectorPane.ItemsPlacementReference property"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"Error"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RowSelectorPane.RowSelectorStyle attached property"}),(0,r.jsx)(t.td,{children:"RowSelector.RowSelectorStyle attached property"}),(0,r.jsx)(t.td,{children:"Error"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"RowSelectorPane.ScrollViewer property"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"Error"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DataGridControl.AddingNewDataItem event"}),(0,r.jsx)(t.td,{children:"DataGridCollectionView.CreatingNewItem and InitializingNewItem events"}),(0,r.jsx)(t.td,{children:"Warning"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DataGridControl.ItemsPanel property"}),(0,r.jsx)(t.td,{children:"DataGridItemsHost class"}),(0,r.jsx)(t.td,{children:"Warning"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DataGridControl.ValidationMode property"}),(0,r.jsx)(t.td,{children:"See Editing and Validating topic"}),(0,r.jsx)(t.td,{children:"Warning"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Column.DisplayMemberBinding property"}),(0,r.jsx)(t.td,{children:"Column.DisplayMemberBindingInfo property"}),(0,r.jsx)(t.td,{children:"Warning"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"inheritance-changes",children:"Inheritance Changes"}),"\n",(0,r.jsx)(t.p,{children:"The CellCollection class now derives from Collection rather than ObservableCollection.\r\nThe GroupConfiguration class now derives from Freezable rather than directly from DependencyObject.\r\nThe RowSelectorPane class now derives from Panel rather than Canvas."}),"\n",(0,r.jsx)(t.h2,{id:"what-happened-to-actualcontent",children:"What Happened to ActualContent?"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"ActualContent"})," property was an internal property. Although binding to it in XAML worked (as long as the application has full trust), it was only a temporary workaround. It was one of our goals for version 3.0 to get rid of ",(0,r.jsx)(t.code,{children:"ActualContent"})," and to make it so that the Cell's ",(0,r.jsx)(t.code,{children:"Content"}),' property was always "live" with the business object. From now on, the Cell\'s ',(0,r.jsx)(t.code,{children:"Content"})," property will always return the current content of the cell."]}),"\n",(0,r.jsxs)(t.p,{children:["Let's take the following scenario: If a business object's \"quantity\" property is set to 10 and you enter edit on a DataGridControl's DataRow to change the \"quantity\" cell to 20: In version 2.0, the Cell's ",(0,r.jsx)(t.code,{children:"Content"})," property would still be set to 10 and the internal ",(0,r.jsx)(t.code,{children:"ActualContent"})," property would be set to 20. With version 3.0, the Cell's ",(0,r.jsx)(t.code,{children:"Content"})," would now be equal to 20, even if the cell and/or the row is still in edit mode. The business object's \"quantity\" property will still be equal to 10 until the binding between the cell's ",(0,r.jsx)(t.code,{children:"Content"})," property and the business object is updated. The moment when this binding updates the source is controlled via the DataGridControl's ",(0,r.jsx)(t.code,{children:"UpdateSourceTrigger"})," property. Its default value is ",(0,r.jsx)(t.code,{children:"RowEndingEdit"}),", meaning that each of the row's cells ",(0,r.jsx)(t.code,{children:"Content"})," will be sequentially pushed to the business object as soon as the row tries to end its edit process."]}),"\n",(0,r.jsxs)(t.p,{children:["The other ",(0,r.jsx)(t.strong,{children:"UpdateSourceTriggers"})," are : ",(0,r.jsx)(t.code,{children:"CellEndingEdit"}),", which means that the cell will push its content to the source as soon as it tries to end its edit process, even if the row is still being edited. ",(0,r.jsx)(t.code,{children:"CellContentChanged"}),", which means that the cell will push its content to the source as soon as its ",(0,r.jsx)(t.code,{children:"Content"})," property changes... this could very well mean that it could update your business object at each key stroke made in a cell editor. Therefore, as of version 3.0, all bindings to the ",(0,r.jsx)(t.code,{children:"ActualContent"})," property must be changed to the ",(0,r.jsx)(t.code,{children:"Content"})," property instead."]}),"\n",(0,r.jsx)(t.h2,{id:"known-issues",children:"Known Issues"}),"\n",(0,r.jsxs)(t.p,{children:["Implicit ",(0,r.jsx)(t.code,{children:"DataTemplates"})," are no longer detected and must be explicitly assigned to the appropriate column's ",(0,r.jsx)(t.code,{children:"CellContentTemplate"})," property."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);