"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1220],{7883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var o=n(4848),i=n(8453);const r={},a="Column Class",d={id:"datagrid/column/intro",title:"Column Class",description:"Columns define information on how the cells they contain are displayed and their content edited.",source:"@site/docs/datagrid/column/intro.md",sourceDirName:"datagrid/column",slug:"/datagrid/column/intro",permalink:"/xceed-doc-ui/docs/datagrid/column/intro",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cell Class",permalink:"/xceed-doc-ui/docs/datagrid/cell-class"},next:{title:"Position and Widths",permalink:"/xceed-doc-ui/docs/datagrid/column/position-width"}},s={},l=[{value:"Grouping, Sorting, and Auto-Filtering",id:"grouping-sorting-and-auto-filtering",level:2},{value:"Unbound Columns",id:"unbound-columns",level:2},{value:"Editing",id:"editing",level:2},{value:"Virtualization",id:"virtualization",level:2},{value:"Appearance",id:"appearance",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"column-class",children:"Column Class"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Columns"})," define information on how the ",(0,o.jsx)(t.code,{children:"cells"})," they contain are displayed and their content edited."]}),"\n",(0,o.jsxs)(t.p,{children:["Through a grid's ",(0,o.jsx)(t.code,{children:"Columns"})," collection, all the columns in a grid, regardless of their visibility, can be accessed. To access only the visible columns\u2014those whose ",(0,o.jsx)(t.code,{children:"Visible"})," property is set to ",(0,o.jsx)(t.strong,{children:"true"}),"\u2014the ",(0,o.jsx)(t.code,{children:"VisibleColumns"})," property can be consulted. The value of a column's ",(0,o.jsx)(t.code,{children:"Index"})," property represents its position within the ",(0,o.jsx)(t.strong,{children:"Columns"})," collection while the visible position of a column can be retrieved through a column's ",(0,o.jsx)(t.code,{children:"VisiblePosition"})," property, which may or may not correspond to the ",(0,o.jsx)(t.code,{children:"Index"})," property. In addition to the ",(0,o.jsx)(t.code,{children:"VisiblePosition"})," property, the IsFirstVisible and IsLastVisible properties can be used to determine if a column is the first or last visible column in a grid. A column-manager row's ",(0,o.jsx)(t.code,{children:"AllowColumnReorder"})," property can prevent end users from changing the visible positions of columns; however, programmatic changes to a column's visible position can still be made."]}),"\n",(0,o.jsx)(t.h2,{id:"grouping-sorting-and-auto-filtering",children:"Grouping, Sorting, and Auto-Filtering"}),"\n",(0,o.jsxs)(t.p,{children:["Data items can be grouped or sorted by adding ",(0,o.jsx)(t.code,{children:"DataGridGroupDescription"})," objects and ",(0,o.jsx)(t.code,{children:"SortDescription"})," objects to the ",(0,o.jsx)(t.code,{children:"GroupDescriptions"})," and ",(0,o.jsx)(t.code,{children:"SortDescriptions"})," properties of the ",(0,o.jsx)(t.code,{children:"DataGridCollectionView"})," to which a grid is bound and specifying the field name of the column by whose values to group and/or sort."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"The name of the property in the data item and the value of the FieldName property must be identical in order for grouping and sorting to work."})}),"\n",(0,o.jsxs)(t.p,{children:["A column's SortDirection property can be consulted to determine the direction used to sort its values, while the SortIndex property indicates the index of the column in the ",(0,o.jsx)(t.strong,{children:"SortDescriptions"})," collection."]}),"\n",(0,o.jsxs)(t.p,{children:["At runtime, data items can be grouped using a ",(0,o.jsx)(t.code,{children:"GroupByControl"})," or ",(0,o.jsx)(t.code,{children:"HierarchicalGroupByControl"}),", which provide a condensed view of the group levels and allow end users to modify the group descriptions applied to a grid and details (see Figure 1 and 2 in Grouping Data). Each group level is represented by a ",(0,o.jsx)(t.code,{children:"GroupByItem"})," or ",(0,o.jsx)(t.code,{children:"HierarchicalGroupByItem"}),", which can be used to change the order of the groups, sort the data items, or remove the groups. A ",(0,o.jsx)(t.code,{children:"ColumnManagerRow"})," can also be used to group and sort the data items (see Figure 3 and 4 in ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/grouping-data/01",children:"Grouping Data"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["End-user interaction can be limited through the ",(0,o.jsx)(t.strong,{children:"column-manager row's"})," ",(0,o.jsx)(t.code,{children:"AllowSort"})," property, which prevents columns from being sorted; the ",(0,o.jsx)(t.code,{children:"AllowGroupingModification"})," property, which prevents groups from being added or removed; and the ",(0,o.jsx)(t.code,{children:"AllowColumnReorder"})," property, which prevents columns from being reordered. These properties ",(0,o.jsx)(t.strong,{children:"only affect end-user interaction"})," and do not prevent programmatic changes."]}),"\n",(0,o.jsxs)(t.p,{children:["For more information on grouping and sorting data items, refer to the ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/grouping-data/01",children:"Grouping Data"}),", ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/sorting",children:"Sorting Data"}),", and ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/filtering",children:"Filtering Data"})," topics."]}),"\n",(0,o.jsx)(t.h2,{id:"unbound-columns",children:"Unbound Columns"}),"\n",(0,o.jsx)(t.p,{children:'An "unbound column" is a column that can be used to display non-data related information such as a label or controls that allow some sort of action to be carried out (e.g., a button to open a window in which the current item can be edited). Unlike data bound columns, unbound columns cannot be grouped or sorted, and their values cannot be filtered.'}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Although both the ",(0,o.jsx)(t.code,{children:"UnboundColumn"})," and ",(0,o.jsx)(t.code,{children:"DataGridUnboundItemProperty"}),' classes both use the term "unbound" they are not meant to be used together.']})}),"\n",(0,o.jsxs)(t.p,{children:["When adding unbound columns, it often becomes necessary to access the parent cell or row from the element specified as the cell content template. The static ",(0,o.jsx)(t.code,{children:"FindFromChild"})," method, which is defined on the Cell class, allows the parent cell to be retrieved by specifying the element (usually the sender in the event arguments) used as the template. From the cell returned by the ",(0,o.jsx)(t.code,{children:"FindFromChild"})," method, the parent row can be retrieved through the cell's ",(0,o.jsx)(t.code,{children:"ParentRow"})," property. If the parent data item is required, the parent row can be provided to the grid's ",(0,o.jsx)(t.code,{children:"GetItemFromContainer"})," method, which will return the parent data item (see Example 1)."]}),"\n",(0,o.jsx)(t.h2,{id:"editing",children:"Editing"}),"\n",(0,o.jsxs)(t.p,{children:["The content of each cell in a column\u2014assuming that the column or its cells are not ",(0,o.jsx)(t.code,{children:"read-only"}),"\u2014can be edited at runtime by the end user through the use of cell editors. Cell editors are created from ",(0,o.jsx)(t.code,{children:"DataTemplates"})," (see ",(0,o.jsx)(t.a,{href:"/docs/datagrid/templates",children:"Templates"}),") and are used to edit the content of cells. Custom cell editors can be provided per column by setting a column's CellEditor property, or per data type through the DataGridControl's ",(0,o.jsx)(t.code,{children:"DefaultCellEditors"})," property (see ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/editing-validating-data/05",children:"Cell Editors"}),"). A column's ",(0,o.jsx)(t.code,{children:"CellEditorDisplayConditions"})," property can be set to override the display conditions determined by the parent grid."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"A cell editor can be displayed without it being in edit mode."})}),"\n",(0,o.jsxs)(t.p,{children:["When a column's ",(0,o.jsx)(t.code,{children:"CanBeCurrentWhenReadOnly"})," property is ",(0,o.jsx)(t.strong,{children:"false"})," and its ",(0,o.jsx)(t.code,{children:"ReadOnly"})," property is ",(0,o.jsx)(t.strong,{children:"true"}),", its cells cannot receive focus: clicking on these cells has no effect, and using the keyboard (arrow keys, Tab key, etc.) causes the focus rectangle to skip the cells. Furthermore, the cell's EditTemplate is not displayed. The value of this property is ignored if ",(0,o.jsx)(t.strong,{children:"ReadOnly"})," is set to ",(0,o.jsx)(t.strong,{children:"false"}),"."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.strong,{children:["For more information on editing a validating data, refer to the ",(0,o.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/editing-validating-data/01",children:"Editing Data"})," topic."]})}),"\n",(0,o.jsx)(t.h2,{id:"virtualization",children:"Virtualization"}),"\n",(0,o.jsxs)(t.p,{children:["In addition to the built-in container recycling, which applies to all views, the ",(0,o.jsx)(t.code,{children:"TableView"})," class provides column virtualization, meaning that columns and cells that are not visible in the viewport are not created until they are brought into the viewport or accessed. If required, column virtualization can be disabled by setting the ",(0,o.jsx)(t.code,{children:"IsColumnVirtualizationEnabled"})," property to ",(0,o.jsx)(t.strong,{children:"false"})," (by default, ",(0,o.jsx)(t.strong,{children:"true"}),")."]}),"\n",(0,o.jsx)(t.h2,{id:"appearance",children:"Appearance"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"/docs/datagrid/styles/intro",children:"Styles"})," are a collection of properties and their associated values, which are applied to an element to override the default appearance provided by the element's default style (see also ",(0,o.jsx)(t.a,{href:"/docs/datagrid/templates",children:"Templates"}),"). All elements in a grid, ",(0,o.jsx)(t.strong,{children:"with the exception of columns"}),", can be styled in the same way as elements provided by the Microsoft .NET Framework. Although columns cannot be stylized, a template can be provided specifically for the cells contained in a column through the ",(0,o.jsx)(t.code,{children:"CellContentTemplate"})," property."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"GroupValueTemplate"})," and ",(0,o.jsx)(t.code,{children:"GroupValueTemplateSelector"}),' properties determine how the value of a group (e.g., "Canada", "France") is displayed, while the ',(0,o.jsx)(t.code,{children:"GroupConfiguration"})," property determines the configuration of the same-level groups when the data items are grouped according to the values of the column."]}),"\n",(0,o.jsxs)(t.p,{children:["Other properties can also affect the appearance of the cells contained in a column without changing the cell template. These include the ",(0,o.jsx)(t.code,{children:"TextTrimming"})," property, which indicates the text trimming behavior to employ when ",(0,o.jsx)(t.strong,{children:"textual"})," content overflows the content area, and the ",(0,o.jsx)(t.code,{children:"TextWrapping"})," property, which indicates how textual content should be wrapped."]}),"\n",(0,o.jsxs)(t.p,{children:["A column's Title property represents the data that, by default, is displayed in a column's corresponding column-manager cell and/or group-by item. If the ",(0,o.jsx)(t.code,{children:"Title"})," property has not been explicitly set, the value of the FieldName property will be used. The DataTemplate used to display a column's title can be modified through the TitleTemplate property while the TitleTemplateSelector property can be used to provide different title templates based on custom criteria (see ",(0,o.jsx)(t.a,{href:"/docs/datagrid/templates",children:"Templates"}),")."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.strong,{children:["For more information styles and templates, refer to the ",(0,o.jsx)(t.a,{href:"/docs/datagrid/styles/intro",children:"Styles"})," and ",(0,o.jsx)(t.a,{href:"/docs/datagrid/templates",children:"Templates"})," topics."]})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var o=n(6540);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);