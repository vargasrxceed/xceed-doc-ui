"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[5961],{7157:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var t=n(4848),a=n(8453),i=n(1470),o=n(9365);const s={},l="Providing Data",d={id:"datagrid/manipulating-data/providing-inserting-removing/01",title:"Providing Data",description:"The data items that populate a grid are provided by the DataGridCollectionView or DataGridCollectionViewSource (in XAML) assigned to the ItemsSource property of the DataGridControl class. These views allow the data items contained in a grid to be grouped, sorted, and/or filtered (see Example 1).",source:"@site/docs/datagrid/manipulating-data/providing-inserting-removing/01.md",sourceDirName:"datagrid/manipulating-data/providing-inserting-removing",slug:"/datagrid/manipulating-data/providing-inserting-removing/01",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/01",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manipulating data",permalink:"/xceed-doc-ui/docs/category/manipulating-data"},next:{title:"Data Virtualization",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/02"}},c={},u=[{value:"Deleting Selected Items",id:"deleting-selected-items",level:2}];function m(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"providing-data",children:"Providing Data"})}),"\n",(0,t.jsxs)(r.p,{children:["The data items that populate a grid are provided by the ",(0,t.jsx)(r.code,{children:"DataGridCollectionView"})," or ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," (in XAML) assigned to the ItemsSource property of the DataGridControl class. These views allow the data items contained in a grid to be grouped, sorted, and/or filtered (see Example 1)."]}),"\n",(0,t.jsxs)(r.p,{children:["In order for the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," to create a custom view for the data items that will eventually be displayed in a grid, it must be bound to the underlying data source or data items must be provided manually via the SourceItems property. In turn, a grid will be bound to the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," that contains the customized data-item view (see also ",(0,t.jsx)(r.a,{href:"/docs/datagrid/manipulating-data/grouping-data/01",children:"Grouping"}),", ",(0,t.jsx)(r.a,{href:"/docs/datagrid/manipulating-data/sorting",children:"Sorting"}),", and ",(0,t.jsx)(r.a,{href:"/docs/datagrid/manipulating-data/filtering",children:"Filtering"}),")."]}),"\n",(0,t.jsxs)(r.p,{children:["DataRow objects are the UI representation of data items. They have a limited lifespan and exist only while they are visible in a grid's viewport; this is called virtualization and is the reason that the ",(0,t.jsx)(r.code,{children:"Items"})," property accesses the data items and not the data rows. The ",(0,t.jsx)(r.code,{children:"SelectedItem"}),", ",(0,t.jsx)(r.code,{children:"SelectedItems"}),", and ",(0,t.jsx)(r.code,{children:"CurrentItem"})," properties of the ",(0,t.jsx)(r.code,{children:"DataGridControl"})," class also reference data items and not data rows (see Example 3)."]}),"\n",(0,t.jsxs)(r.p,{children:["Programmatically, when the ",(0,t.jsx)(r.strong,{children:"DataGridCollectionView"})," is bound to a data source, the ",(0,t.jsx)(r.code,{children:"ItemProperties.Clear"})," method must be called prior to adding ",(0,t.jsx)(r.code,{children:"DataGridItemProperty"})," objects to the ItemProperties collection to remove items that were automatically added when the ",(0,t.jsx)(r.strong,{children:"DataGridCollectionView"})," was instantiated. Automatic creation of item properties can be disabled by setting the AutoCreateItemProperties property of the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," to ",(0,t.jsx)(r.strong,{children:"false"})," (by default, ",(0,t.jsx)(r.strong,{children:"true"}),") or by specifying so when creating an instance of the ",(0,t.jsx)(r.strong,{children:"DataGridCollectionView"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"deleting-selected-items",children:"Deleting Selected Items"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"IsDeleteCommandEnabled"})," property indicates whether the ",(0,t.jsx)(r.code,{children:"ApplicationCommands.Delete"})," command is enabled. When set to ",(0,t.jsx)(r.strong,{children:"true"}),", all selected items will be deleted when the delete key is pressed. The ",(0,t.jsx)(r.code,{children:"DeletingSelectedItems"})," event, which is raised prior to deleting the items, allows the operation to be canceled by setting the Abort property, which is received in the event arguments, to ",(0,t.jsx)(r.strong,{children:"true"}),". By default, when an error occurs while deleting an item, the item will be skipped and the operation will continue to the next item. By handling the ",(0,t.jsx)(r.code,{children:"DeletingSelectedItemError"})," event, this behavior can be modified to either abort the entire operation, retry deleting the item that caused the error, or skip the item (see Example 9). Once the items have been deleted, the ",(0,t.jsx)(r.code,{children:"SelectedItemsDeleted"})," event will be raised to signal the end of the operation."]}),"\n",(0,t.jsx)(r.h1,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 1: Binding to a data table"}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>      \r\n  <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                  Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'public partial class App : Application\r\n{\r\n  public DataSet Data\r\n  {\r\n    get; set;\r\n  }\r\n  public DataTable Orders\r\n  {\r\n    get; set;\r\n  }\r\n  protected override void OnStartup( StartupEventArgs e )\r\n  {\r\n    // Set the licence key\r\n    Xceed.Wpf.DataGrid.Licenser.LicenseKey = "Enter your license key here";\r\n    Data = Xceed.Wpf.DataGrid.Samples.SampleData.DataProvider.GetNorthwindDataSet();\r\n    Orders = Data.Tables[ "Orders" ];\r\n    base.OnStartup( e );\r\n  }\r\n}\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Public Partial Class App\r\n  Inherits Application\r\n\r\n  Public Property Data As DataSet\r\n  Public Property Orders As DataTable\r\n\r\n  Protected Overrides Sub OnStartup(ByVal e As StartupEventArgs)\r\n      \' Set the licence key\r\n      Xceed.Wpf.DataGrid.Licenser.LicenseKey = "Enter your license key here"\r\n      Data = Xceed.Wpf.DataGrid.Samples.SampleData.DataProvider.GetNorthwindDataSet()\r\n      Orders = Data.Tables("Orders")\r\n      MyBase.OnStartup(e)\r\n  End Sub\r\nEnd Class\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 2: Binding to an array"}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:s="clr-namespace:System;assembly=mscorlib"\r\n      xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">                    \r\n  <Grid.Resources>\r\n  <x:Array x:Key="data_list" Type="{x:Type s:String}">\r\n    <s:String>Sunday</s:String>\r\n    <s:String>Monday</s:String>\r\n    <s:String>Tuesday</s:String>\r\n    <s:String>Wednesday</s:String>\r\n    <s:String>Thursday</s:String>\r\n    <s:String>Friday</s:String>\r\n    <s:String>Saturday</s:String>\r\n  </x:Array>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{StaticResource data_list}"/>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'string[] data = new string[ 7 ];\r\ndata[ 0 ] = "Sunday";\r\ndata[ 1 ] = "Monday";\r\ndata[ 2 ] = "Tuesday";\r\ndata[ 3 ] = "Wednesday";\r\ndata[ 4 ] = "Thursday";\r\ndata[ 5 ] = "Friday";\r\ndata[ 6 ] = "Saturday";\r\ndataGridControl.ItemsSource = data;\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim data() As New String( 6 )\r\ndata( 0 ) = "Sunday"\r\ndata( 1 ) = "Monday"\r\ndata( 2 ) = "Tuesday"\r\ndata( 3 ) = "Wednesday"\r\ndata( 4 ) = "Thursday"\r\ndata( 5 ) = "Friday"\r\ndata( 6 ) = "Saturday"\r\ndataGridControl.ItemsSource = data\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 3: Retrieving values from the current item"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to retrieve the value of the ShipCountry and ShipCity properties of the current item and display them in TextBlocks located above the grid. Note that an item in a grid must be current in order for the information to be displayed."}),(0,t.jsx)(i.A,{children:(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <DockPanel>  \r\n      <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n        <TextBlock Text="{Binding ElementName=OrdersGrid, Path=CurrentItem[ShipCountry]}"/>\r\n        <TextBlock Text=" - "/>\r\n        <TextBlock Text="{Binding ElementName=OrdersGrid, Path=CurrentItem[ShipCity]}"/>\r\n      </StackPanel>   \r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                            DockPanel.Dock="Bottom">\r\n      </xcdg:DataGridControl>\r\n  </DockPanel>\r\n</Grid>\n'})})})})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 4: Providing unbound data"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to add Person data to a custom ",(0,t.jsx)(r.strong,{children:"ObservableCollection"})," of Person objects."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation"\r\n      xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">\r\n      <Grid.Resources>\r\n      <local:PersonObservableCollection x:Key="personData">\r\n        <local:Person FirstName="Jenny"\r\n                      LastName="Beland"\r\n                      Occupation="Writer"/>\r\n        <local:Person FirstName="Francois"\r\n                      LastName="Carignan"\r\n                      Occupation="Developer"/>\r\n        <local:Person FirstName="Pascal"\r\n                      LastName="Bourque"\r\n                      Occupation="Developer"/>\r\n        <local:Person FirstName="Michel"\r\n                      LastName="Fortin"\r\n                      Occupation="Developer"/>\r\n        <local:Person FirstName="Marc"\r\n                      LastName="Laroche"\r\n                      Occupation="Developer"/>\r\n        <local:Person FirstName="Pierre-Luc"\r\n                      LastName="Ledoux"\r\n                      Occupation="Developer"/>\r\n        <local:Person FirstName="Mathieu"\r\n                      LastName="Drimonakos"\r\n                      Occupation="TechnicalSupport"/>\r\n        <local:Person FirstName="Catherine"\r\n                      LastName="Sauzede"\r\n                      Occupation="Infograph"/>\r\n      </local:PersonObservableCollection>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_person"\r\n                                          ItemType="{x:Type local:Person}"\r\n                                          Source="{StaticResource personData}">\r\n          <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n            <xcdg:DataGridGroupDescription PropertyName="Occupation"/>\r\n          </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n            <scm:SortDescription PropertyName="Occupation"\r\n                                  Direction="Ascending"/>\r\n          </xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n        </xcdg:DataGridCollectionViewSource>\r\n      </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="PersonGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_person}}"/>\r\n </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'ObservableCollection<Person> people = new ObservableCollection<Person>();\r\npeople.Add( new Person( "Jenny", "Beland" ) );\r\npeople.Add( new Person( "Francois", "Carignan" ) );\r\npeople.Add( new Person( "Jacques", "Bourque" ) );\r\npeople.Add( new Person( "Pascal", "Bourque" ) );\r\npeople.Add( new Person( "Marc", "Laroche" ) );\r\npeople.Add( new Person( "Pierre-Luc", "Ledoux" ) );\r\npeople.Add( new Person( "Catherine", "Sauzede" ) );\r\npeople.Add( new Person( "Christian", "Nadeau" ) );\r\nDataGridCollectionView collectionView = new DataGridCollectionView( people, typeof( Person ) );\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim people As New ObservableCollection( Of Person )()\r\npeople.Add( New Person( "Jenny", "Beland" ) )\r\npeople.Add( New Person( "Francois", "Carignan" ) )\r\npeople.Add( New Person( "Jacques", "Bourque" ) )\r\npeople.Add( New Person( "Pascal", "Bourque" ) )\r\npeople.Add( New Person( "Marc", "Laroche" ) )\r\npeople.Add( New Person( "Pierre-Luc", "Ledoux" ) )\r\npeople.Add( New Person( "Catherine", "Sauzede" ) )\r\npeople.Add( New Person( "Christian", "Nadeau" ) )\r\nDim collectionView As New DataGridCollectionView( people, GetType( Person ) )\r\ndataGridControl.ItemsSource = collectionView\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 5: Binding to a LINQ table"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to bind a grid to a LINQ table and submit any modifications made to the data items using the ",(0,t.jsx)(r.strong,{children:"SubmitChanges"})," method."]}),(0,t.jsxs)(r.p,{children:["This example assumes that a new LINQ to SQL Classes item named Northwind.dbml has been added to the project and that it contains the Orders, Customers, and Shippers tables. The Northwind.designer.cs that is created at the same time represents the ",(0,t.jsx)(r.strong,{children:"NorthwindDataContext"})," and should automatically contain all the relevant members. It also assumes that a property named ",(0,t.jsx)(r.strong,{children:"LinqDataContext"})," that returns a new instance of the ",(0,t.jsx)(r.strong,{children:"NorthwindDataContext"})," exists in the App.xaml.cs code-behind file."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=LinqDataContext.Orders}"/>\r\n      <DataTemplate DataType="{x:Type local:Shipper}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Customer}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Employee}">\r\n        <StackPanel Orientation="Horizontal">\r\n          <TextBlock Text="{Binding FirstName}"/>\r\n          <TextBlock Text=" " />\r\n          <TextBlock Text="{Binding LastName}"/>\r\n        </StackPanel>\r\n      </DataTemplate>\r\n      <xcdg:CellEditor x:Key="employeeEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current},\r\n                                            Path=LinqDataContext.Employees}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="customerEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current},\r\n                                            Path=LinqDataContext.Customers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="shipperEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current}, Path=LinqDataContext.Shippers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n    </Grid.Resources>\r\n    <DockPanel>\r\n      <Button Content="Save Modifications"\r\n              Click="SaveModifications"\r\n              DockPanel.Dock="Top" />\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="OrderID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="EmployeeID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Employee"\r\n                      CellEditor="{StaticResource employeeEditor}"/>\r\n          <xcdg:Column FieldName="CustomerID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Customer"\r\n                      CellEditor="{StaticResource customerEditor}"\r\n                      Title="Company Name"/>\r\n          <xcdg:Column FieldName="ShipVia"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Shipper"\r\n                      CellEditor="{StaticResource shipperEditor}"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n            <xcdg:TableView.FixedFooters>\r\n              <DataTemplate>\r\n                <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n            </xcdg:TableView.FixedFooters>\r\n          </xcdg:TableView>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n    </DockPanel>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"private void SaveModifications( object sender, RoutedEventArgs e )\r\n{    \r\nApp.LinqDataContext.SubmitChanges();\r\n}\n"})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"Private Sub SaveModifications( sender As Object, e As RoutedEventArgs )\r\n  App.LinqDataContext.SubmitChanges()\r\nEnd Sub\n"})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 6: Binding to a LINQ query (SQL)"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to an SQL LINQ query and submit any modifications made to the data items using the SubmitChanges method."}),(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:"Although existing data items can be modified and the changes committed, it is not possible to insert new data items."})}),(0,t.jsxs)(r.p,{children:["This example assumes that a new ",(0,t.jsx)(r.em,{children:"LINQ to SQL Classes"})," item named Northwind.dbml has been added to the project and that it contains the ",(0,t.jsx)(r.em,{children:"Orders"}),", ",(0,t.jsx)(r.em,{children:"Customers"}),", and ",(0,t.jsx)(r.em,{children:"Shippers"})," tables. The Northwind.designer.cs that is created at the same time represents the ",(0,t.jsx)(r.strong,{children:"NorthwindDataContext"})," and should automatically contain all the relevant members. It also assumes that a property named ",(0,t.jsx)(r.strong,{children:"OrdersQuery"})," that returns a new new query based on the value selected in the combo box."]}),(0,t.jsxs)(r.p,{children:["The Window1 class implements ",(0,t.jsx)(r.code,{children:"INotifyPropertyChanged"})," so that the ",(0,t.jsx)(r.strong,{children:"DataGridCollectionViewSource"})," can be notified when the query changes in order to refresh its content."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}},\r\n                                                      Path=OrdersQuery}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="Shipper"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n    <DataTemplate DataType="{x:Type local:Shipper}">\r\n      <TextBlock Text="{Binding CompanyName}"/>\r\n    </DataTemplate>\r\n    <DataTemplate DataType="{x:Type local:Customer}">\r\n      <TextBlock Text="{Binding CompanyName}"/>\r\n    </DataTemplate>\r\n    <DataTemplate DataType="{x:Type local:Employee}">\r\n      <StackPanel Orientation="Horizontal">\r\n        <TextBlock Text="{Binding FirstName}"/>\r\n        <TextBlock Text=" " />\r\n        <TextBlock Text="{Binding LastName}"/>\r\n      </StackPanel>\r\n    </DataTemplate>       \r\n  </Grid.Resources>\r\n  <DockPanel>\r\n    <StackPanel Orientation="Horizontal"\r\n                DockPanel.Dock="Top">\r\n      <Button Content="Save Modifications"\r\n              Click="SaveModifications"/>\r\n      <ComboBox x:Name="ShipperCombo"\r\n                ItemsSource="{Binding Source={x:Static Application.Current}, Path=LinqDataContext.Shippers}"\r\n                SelectionChanged="ShipperSelectionChanged"/>\r\n    </StackPanel>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="Shipper"\r\n                    VisiblePosition="0"/>\r\n        <xcdg:Column FieldName="OrderID"\r\n                    Visible="False"/>\r\n        <xcdg:Column FieldName="EmployeeID"\r\n                    Visible="False"/>\r\n        <xcdg:Column FieldName="CustomerID"\r\n                    Visible="False"/>\r\n        <xcdg:Column FieldName="Customer"\r\n                    Title="Company Name"/>\r\n        <xcdg:Column FieldName="ShipVia"\r\n                    Visible="False"/>\r\n      </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </DockPanel>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'namespace Xceed.Wpf.Documentation\r\n{\r\n  public partial class Window1 : Window, INotifyPropertyChanged\r\n  {\r\n    public Window1()\r\n    {\r\n      InitializeComponent();    \r\n    }\r\n    private IEnumerable m_query = null;\r\n    public IEnumerable OrdersQuery\r\n    {\r\n      get\r\n      {\r\n        if( m_query == null )\r\n        {\r\n          m_query = from orders in App.LinqDataContext.Orders\r\n                    select orders;\r\n        }\r\n        return m_query;\r\n      }\r\n      set\r\n      {\r\n        m_query = value;\r\n        this.OnPropertyChanged( new PropertyChangedEventArgs( "OrdersQuery" ) );\r\n      }\r\n    }\r\n    private void ShipperSelectionChanged( object sender, SelectionChangedEventArgs e )\r\n    {\r\n      this.OrdersQuery = from orders in App.LinqDataContext.Orders\r\n                  where orders.Shipper.CompanyName == ( ( Shipper )this.ShipperCombo.SelectedValue ).CompanyName\r\n                  select orders;\r\n    }\r\n    private void SaveModifications( object sender, RoutedEventArgs e )\r\n    {    \r\n      App.LinqDataContext.SubmitChanges();\r\n    }\r\n    public event PropertyChangedEventHandler PropertyChanged;\r\n    private void OnPropertyChanged( PropertyChangedEventArgs e )\r\n    {\r\n      if( this.PropertyChanged == null )\r\n        return;\r\n      this.PropertyChanged( this, e );\r\n    }\r\n  }\r\n}\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Namespace Xceed.Wpf.Documentation\r\nPublic Partial Class Window1\r\n    Inherits Window\r\n    Implements INotifyPropertyChanged\r\n    Public Sub New()\r\n      InitializeComponent()\r\n    End Sub\r\n    Private m_query As IEnumerable = Nothing\r\n    Public Property OrdersQuery() As IEnumerable\r\n      Get\r\n        If m_query Is Nothing Then\r\n          m_query = From orders In App.LinqDataContext.Orders _\r\n                    Select orders\r\n        End If\r\n        Return m_query\r\n      End Get\r\n      Set\r\n        m_query = Value\r\n        Me.OnPropertyChanged(New PropertyChangedEventArgs("OrdersQuery"))\r\n      End Set\r\n    End Property\r\n    Private Sub ShipperSelectionChanged(ByVal sender As Object, ByVal e As SelectionChangedEventArgs)\r\n      Me.OrdersQuey = From orders In App.LinqDataContext.Orders _\r\n                Where orders.Shipper.CompanyName = CTYpe( Me.ShipperCombo.SelectedValue, Shipper).CompanyName _\r\n                Select orders\r\n    End Sub\r\n    Private Sub SaveModifications(ByVal sender As Object, ByVal e As RoutedEventArgs)\r\n      App.LinqDataContext.SubmitChanges()\r\n    End Sub\r\n    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\r\n    Private Sub OnPropertyChanged(ByVal e As PropertyChangedEventArgs)\r\n      If Me.PropertyChangedEvent Is Nothing Then\r\n        Return\r\n      End If\r\n      RaiseEvent PropertyChanged(Me, e)\r\n    End Sub\r\n  End Class\r\nEnd Namespace\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 7: Binding to a LINQ query (XML)"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to an XML query on an XDocument that loads the XML version of the Orders table of the Northwind database."}),(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:"The content of the resulting grid will not be editable."})}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                    Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}},\r\n                                    Path=XmlData}"/>\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'public IEnumerable XmlData\r\n{\r\n  get\r\n  {\r\n    XDocument document = App.NorthwindDocument;\r\n    IEnumerable data = from order in document.Element( "dataroot" ).Descendants( "Orders" )\r\n                        select new\r\n                        {\r\n                          ShipCountry = order.Element( "ShipCountry" ).Value,\r\n                          ShipCity = order.Element( "ShipCity" ).Value,\r\n                          ShipAddress = order.Element( "ShipAddress" ).Value,\r\n                          ShipName = order.Element( "ShipName" ).Value,\r\n                          ShipVia = order.Element( "ShipVia" ).Value,\r\n                          Freight = order.Element( "Freight" ).Value\r\n                        };\r\n    return data;\r\n  }\r\n}\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Public ReadOnly Property XmlData() As IEnumerable\r\n  Get\r\n    Dim document As XDocument = App.NorthwindDocument\r\n    Dim data As IEnumerable = From order In document.Element("dataroot").Descendants("Orders") _\r\n                              Select New With {.ShipCountry = order.Element("ShipCountry").Value, _\r\n                                .ShipCity = order.Element("ShipCity").Value, _\r\n                                .ShipAddress = order.Element("ShipAddress").Value, _\r\n                                .ShipName = order.Element("ShipName").Value, _\r\n                                .Freight = order.Element("Freight").Value}\r\n    Return data\r\n  End Get\r\nEnd Property\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 8: Deleting selected items"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to delete the selected items and handle the ",(0,t.jsx)(r.code,{children:"DeletingSelectedItemError"})," and ",(0,t.jsx)(r.code,{children:"DeletingSelectedItems"})," events."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />      \r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                        IsDeleteCommandEnabled="True"\r\n                        DeletingSelectedItemError="OrdersGrid_DeletingSelectedItemError"\r\n                        DeletingSelectedItems="OrdersGrid_DeletingSelectedItems"/>       \r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  private void OrdersGrid_DeletingSelectedItemError( object sender, DeletingSelectedItemErrorRoutedEventArgs e )\r\n  {    \r\n    MessageBoxResult result = System.Windows.MessageBox.Show( "The following error occurred while attempting to delete an item: " +\r\n                                              e.Exception.Message + " Do you want to attempt to continue?", "Error", MessageBoxButton.YesNoCancel );\r\n    // If "No", the item would be skipped. Since "Skip" is the default action,\r\n    // there is no need to verify it.\r\n    if( result == MessageBoxResult.Yes )\r\n    {\r\n      if( this.OrdersGrid.IsBeingEdited )\r\n      {\r\n        try\r\n        {\r\n          this.OrdersGrid.CancelEdit();\r\n          e.Action = DeletingSelectedItemErrorAction.Retry;\r\n        }\r\n        catch\r\n        {\r\n          e.Action = DeletingSelectedItemErrorAction.Skip;\r\n        }        \r\n      }\r\n    }\r\n    if( result == MessageBoxResult.Cancel )\r\n    {\r\n      e.Action = DeletingSelectedItemErrorAction.Abort;\r\n    }\r\n  }\r\n  private void OrdersGrid_DeletingSelectedItems( object sender, CancelRoutedEventArgs e )\r\n  {\r\n    MessageBoxResult result = System.Windows.MessageBox.Show( "Are you certain you want to delete the selected rows?", "Confirm Delete", MessageBoxButton.YesNo );\r\n    if( result == MessageBoxResult.No )\r\n    {\r\n      e.Cancel = true;\r\n    }     \r\n }\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Private Sub OrdersGrid_DeletingSelectedItemError( ByVal sender As Object, ByVal e As DeletingSelectedItemErrorRoutedEventArgs )\r\n  Dim result As MessageBoxResult = System.Windows.MessageBox.Show( "The following error occurred while attempting to delete an item: " & _\r\n                                            e.Exception.Message & " Do you want to attempt to continue?", "Error", MessageBoxButton.YesNoCancel )\r\n  \' If "No", the item would be skipped. Since "Skip" is the default action,\r\n  \' there is no need to verify it.\r\n  If result = MessageBoxResult.Yes Then\r\n    If Me.OrdersGrid.IsBeingEdited Then\r\n      Try\r\n        Me.OrdersGrid.CancelEdit()\r\n        e.Action = DeletingSelectedItemErrorAction.Retry\r\n      Catch\r\n        e.Action = DeletingSelectedItemErrorAction.Skip\r\n      End Try\r\n    End If\r\n  End If\r\n  If result = MessageBoxResult.Cancel Then\r\n    e.Action = DeletingSelectedItemErrorAction.Abort\r\n  End If\r\nEnd Sub\r\nPrivate Sub OrdersGrid_DeletingSelectedItems( ByVal sender As Object, ByVal e As CancelRoutedEventArgs )\r\n  Dim result As MessageBoxResult = System.Windows.MessageBox.Show( "Are you certain you want to delete the selected rows?", _\r\n                                                                "Confirm Delete", MessageBoxButton.YesNo )\r\n  If result = MessageBoxResult.No Then\r\n    e.Cancel = True\r\n  End If\r\nEnd Sub\n'})})})]})]})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var t=n(4164);const a={tabItem:"tabItem_Ymn6"};var i=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>D});var t=n(6540),a=n(4164),i=n(3104),o=n(6347),s=n(205),l=n(7485),d=n(1682),c=n(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:a}}=e;return{value:r,label:n,attributes:t,default:a}}))}(n);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function p(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function h(e){let{queryString:r=!1,groupId:n}=e;const a=(0,o.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(a.location.search);r.set(i,e),a.replace({...a.location,search:r.toString()})}),[i,a])]}function x(e){const{defaultValue:r,queryString:n=!1,groupId:a}=e,i=m(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:i}))),[d,u]=h({queryString:n,groupId:a}),[x,g]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,i]=(0,c.Dv)(n);return[a,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),S=(()=>{const e=d??x;return p({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{S&&l(S)}),[S]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=n(2303);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function y(e){let{className:r,block:n,selectedValue:t,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const r=e.currentTarget,n=l.indexOf(r),a=s[n].value;a!==t&&(d(r),o(a))},u=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},r),children:s.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>l.push(e),onKeyDown:u,onClick:c,...i,className:(0,a.A)("tabs__item",S.tabItem,i?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function C(e){let{lazy:r,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function v(e){const r=x(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",S.tabList),children:[(0,b.jsx)(y,{...r,...e}),(0,b.jsx)(C,{...r,...e})]})}function D(e){const r=(0,g.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(6540);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);