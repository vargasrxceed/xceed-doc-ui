"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[6535],{3073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=t(4848),i=t(8453);const o={},a="Providing a Detail Configuration Item-container Style",d={id:"code-snippets/22",title:"Providing a Detail Configuration Item-container Style",description:"The following example demonstrates how to provide an item-container style for the Employee_Orders data relation.",source:"@site/datagrid/code-snippets/22.md",sourceDirName:"code-snippets",slug:"/code-snippets/22",permalink:"/xceed-doc-ui/datagrid/code-snippets/22",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Providing a Default Detail Configuration",permalink:"/xceed-doc-ui/datagrid/code-snippets/21"},next:{title:"Providing, Inserting, and Removing Data",permalink:"/xceed-doc-ui/datagrid/code-snippets/23"}},c={},s=[];function l(e){const n={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"providing-a-detail-configuration-item-container-style",children:"Providing a Detail Configuration Item-container Style"})}),"\n",(0,r.jsxs)(n.p,{children:["The following example demonstrates how to provide an item-container style for the ",(0,r.jsx)(n.em,{children:"Employee_Orders"})," data relation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                              Path=Employees}"/>           \r\n   \r\n    <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />\r\n   \r\n    <Style x:Key="alternatingDataRowStyle" TargetType="{x:Type xcdg:DataRow}">\r\n      <Style.Triggers>\r\n         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                 Path=(xcdg:DataGridVirtualizingPanel.ItemIndex),\r\n                                 Converter={StaticResource rowIndexConverter}}"\r\n                      Value="True">\r\n            <Setter Property="Background" Value="AliceBlue"/>                    \r\n         </DataTrigger>\r\n      </Style.Triggers>\r\n    </Style>\r\n  </Grid.Resources>\r\n \r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                  ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                  AutoCreateDetailConfigurations="True">   \r\n    <xcdg:DataGridControl.DetailConfigurations>\r\n      <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                Title="Employee Orders"\r\n                                ItemContainerStyle="{StaticResource alternatingDataRowStyle}"/>                        \r\n    </xcdg:DataGridControl.DetailConfigurations>      \r\n  </xcdg:DataGridControl>\r\n</Grid> \n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);