"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7031],{2507:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>d});var n=t(4848),o=t(8453),i=t(1470),a=t(9365);const u={},l="Custom Group-configuration Selectors",s={id:"fundamentals/grouping/custom-group-config-selector",title:"Custom Group-configuration Selectors",description:"In addition to the built-in LevelGroupConfigurationSelector and FieldNameGroupConfigurationSelector group-configuration selectors, which can be used to select the appropriate configuration for a group based on its level or field name, custom group-configuration selectors can also be created and used.",source:"@site/datagrid/fundamentals/grouping/custom-group-config-selector.md",sourceDirName:"fundamentals/grouping",slug:"/fundamentals/grouping/custom-group-config-selector",permalink:"/xceed-doc-ui/datagrid/fundamentals/grouping/custom-group-config-selector",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Group Configurations",permalink:"/xceed-doc-ui/datagrid/fundamentals/grouping/grouping-configuration"},next:{title:"Sorting Data",permalink:"/xceed-doc-ui/datagrid/fundamentals/sorting"}},c={},d=[{value:"Examples",id:"examples",level:2}];function p(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"custom-group-configuration-selectors",children:"Custom Group-configuration Selectors"})}),"\n",(0,n.jsxs)(r.p,{children:["In addition to the built-in ",(0,n.jsx)(r.code,{children:"LevelGroupConfigurationSelector"})," and ",(0,n.jsx)(r.code,{children:"FieldNameGroupConfigurationSelector"})," group-configuration selectors, which can be used to select the appropriate configuration for a group based on its level or field name, custom group-configuration selectors can also be created and used."]}),"\n",(0,n.jsxs)(r.p,{children:["Custom group-configuration selectors (with or without corresponding selector items) can be created by deriving from the ",(0,n.jsx)(r.code,{children:"GroupConfigurationSelector"})," class and overriding the SelectGroupConfiguration method to return the appropriate group configuration based on the desired criteria (see Example 1). If a selector does not have a group configuration that corresponds to the specified information it should either call the base implementation or return ",(0,n.jsx)(r.strong,{children:"null"})," (",(0,n.jsx)(r.strong,{children:"Nothing"})," in VisualBasic)."]}),"\n",(0,n.jsxs)(r.admonition,{type:"tip",children:[(0,n.jsxs)(r.p,{children:["When a grid is in a table-view layout, rows located in the headers, footers, fixed headers, and fixed footers of a grid (e.g., ",(0,n.jsx)(r.code,{children:"ColumnManagerRows"}),", ",(0,n.jsx)(r.code,{children:"InsertionRows"}),") will query the selector in order to retrieve the ",(0,n.jsx)(r.code,{children:"GroupLevelIndicatorStyle"})," of the appropriate group configuration. In this case, collectionViewGroup will be a null reference (Nothing in Visual Basic)."]}),(0,n.jsx)(r.p,{children:'If the selector chooses group configurations based on the specified collectionViewGroup, a "dummy" group configuration that provides an identical group-level-indicator style should be returned. For example, if a group configuration sets the width of its group-level indicator to 30, the "dummy" group configuration should also return 30 in its group-level-indicator style so that the items in the headers and footers have the same indentation as the other items to preserve cell alignment.'}),(0,n.jsx)(r.p,{children:"It is recommended that all group-level-indicator styles return the same width to preserve the alignment of the cells throughout the grid."})]}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsx)(r.p,{children:"Example 1: Creating a group-configuration selector"}),"\n",(0,n.jsx)(r.p,{children:"The following example demonstrates how to create a custom group-configuration selector that will return the appropriate group configuration depending on the number of items in a group. The implementation of the ItemCountGroupConfigurationSelector is provided below."}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>              \r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity" />\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.GroupConfigurationSelector>\r\n        <local:ItemCountGroupConfigurationSelector MinItemCount="10" />\r\n      </xcdg:DataGridControl.GroupConfigurationSelector>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,n.jsx)(a.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'  DataGridCollectionView collectionView = new DataGridCollectionView( Orders );      \r\n  collectionView.GroupDescriptions.Add( new DataGridGroupDescription( "ShipCity" ) );\r\n  dataGridControl.GroupConfigurationSelector = new ItemCountGroupConfigurationSelector( 10 );\r\n  dataGridControl.ItemsSource = collectionView;\n'})})}),(0,n.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:'  Dim collectionView As New DataGridCollectionView( Orders )\r\n  collectionView.GroupDescriptions.Add( New DataGridGroupDescription( "ShipCity" ) )\r\n  dataGridControl.GroupConfigurationSelector = New ItemCountGroupConfigurationSelector( 10 )\r\n  dataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,n.jsx)(r.p,{children:"The following code provides the implementation of the ItemCountGroupConfigurationSelector."}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"    public class ItemCountGroupConfigurationSelector : GroupConfigurationSelector\r\n      {\r\n        public ItemCountGroupConfigurationSelector()\r\n        {\r\n        } \r\n        public ItemCountGroupConfigurationSelector( int minItemCount )\r\n        :base()\r\n        {\r\n          this.MinItemCount = minItemCount;\r\n        } \r\n      public override GroupConfiguration SelectGroupConfiguration( int groupLevel,\r\n                      System.Windows.Data.CollectionViewGroup collectionViewGroup,\r\n                      System.ComponentModel.GroupDescription groupDescription )\r\n      {\r\n        if( collectionViewGroup == null )\r\n          return base.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription );\r\n        GroupConfiguration groupConfiguration = new GroupConfiguration();\r\n        Style style = new Style( typeof( Xceed.Wpf.DataGrid.DataRow ) );\r\n        if( collectionViewGroup.ItemCount <= m_minItemCount ) // red\r\n        {\r\n          style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) );       \r\n        }\r\n        else // green\r\n        {\r\n          style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) );       \r\n        }\r\n        groupConfiguration.ItemContainerStyle = style;\r\n        return groupConfiguration;\r\n      }\r\n        private int m_minItemCount = 0;\r\n        public int MinItemCount\r\n        {\r\n          get\r\n          {\r\n            return m_minItemCount;\r\n          }\r\n          set\r\n          {\r\n            if( value != m_minItemCount )\r\n              m_minItemCount = value;\r\n          }\r\n        }\r\n      }\n"})})}),(0,n.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Public Class ItemCountGroupConfigurationSelector\r\n                Inherits GroupConfigurationSelector\r\n      Public Sub New\r\n      End Sub\r\n      Public Sub New( minItemCount As Integer )\r\n        Me.MinItemCount = minItemCount\r\n      End Sub\r\n      Public Overrides Function SelectGroupConfiguration( ByVal groupLevel As Integer, _\r\n                      ByVal collectionViewGroup As System.Windows.Data.CollectionViewGroup, _\r\n                      ByVal groupDescription As System.ComponentModel.GroupDescription ) As GroupConfiguration\r\n        If collectionViewGroup Is Nothing Then\r\n          Return MyBase.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription )\r\n        End If\r\n        Dim groupConfiguration As New GroupConfiguration()\r\n        Dim style As New Style( GetType( Xceed.Wpf.DataGrid.DataRow ) )\r\n        If collectionViewGroup.ItemCount <= m_minItemCount Then ' red\r\n          style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) )\r\n        Else ' green\r\n          style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) )\r\n        End If\r\n        groupConfiguration.ItemContainerStyle = style\r\n        Return groupConfiguration\r\n      End Function\r\n      Private m_minItemCount As Integer = 0\r\n      Public Property MinItemCount As Integer\r\n        Get\r\n          Return m_minItemCount\r\n        End Get\r\n        Set\r\n          m_minItemCount = value\r\n      End Property\r\n    End Class\n"})})})]})]})}function g(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},9365:(e,r,t)=>{t.d(r,{A:()=>a});t(6540);var n=t(4164);const o={tabItem:"tabItem_Ymn6"};var i=t(4848);function a(e){let{children:r,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(o.tabItem,a),hidden:t,children:r})}},1470:(e,r,t)=>{t.d(r,{A:()=>G});var n=t(6540),o=t(4164),i=t(3104),a=t(6347),u=t(205),l=t(7485),s=t(1682),c=t(679);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return d(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:o}}=e;return{value:r,label:t,attributes:n,default:o}}))}(t);return function(e){const r=(0,s.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function g(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:t}=e;const o=(0,a.W6)(),i=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(o.location.search);r.set(i,e),o.replace({...o.location,search:r.toString()})}),[i,o])]}function h(e){const{defaultValue:r,queryString:t=!1,groupId:o}=e,i=p(e),[a,l]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:i}))),[s,d]=m({queryString:t,groupId:o}),[h,f]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,i]=(0,c.Dv)(t);return[o,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),C=(()=>{const e=s??h;return g({value:e,tabValues:i})?e:null})();(0,u.A)((()=>{C&&l(C)}),[C]);return{selectedValue:a,selectValue:(0,n.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var f=t(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function x(e){let{className:r,block:t,selectedValue:n,selectValue:a,tabValues:u}=e;const l=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const r=e.currentTarget,t=l.indexOf(r),o=u[t].value;o!==n&&(s(r),a(o))},d=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},r),children:u.map((e=>{let{value:r,label:t,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>l.push(e),onKeyDown:d,onClick:c,...i,className:(0,o.A)("tabs__item",C.tabItem,i?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function v(e){let{lazy:r,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function w(e){const r=h(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",C.tabList),children:[(0,b.jsx)(x,{...r,...e}),(0,b.jsx)(v,{...r,...e})]})}function G(e){const r=(0,f.A)();return(0,b.jsx)(w,{...e,children:d(e.children)},String(r))}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>u});var n=t(6540);const o={},i=n.createContext(o);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);