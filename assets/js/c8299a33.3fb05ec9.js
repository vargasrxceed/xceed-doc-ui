"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[5389],{3951:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var n=t(4848),a=t(8453),i=t(1470),o=t(9365);const s={},c="Multi-Surface Views Overview",u={id:"fundamentals/views-themes/views/cardflow-3d-view/multisurface-view-overview",title:"Multi-Surface Views Overview",description:'Multi-surface views are card views that expose multiple "surfaces", which represent the positions of cards in the view. Surfaces, such as those exposed by the Cardflow\u2122 3D view, can be exposed for the center card, the cards located to either side of the center card, or for any other desired surface (see Figure 1).',source:"@site/datagrid/fundamentals/views-themes/views/cardflow-3d-view/multisurface-view-overview.md",sourceDirName:"fundamentals/views-themes/views/cardflow-3d-view",slug:"/fundamentals/views-themes/views/cardflow-3d-view/multisurface-view-overview",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/cardflow-3d-view/multisurface-view-overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Cardflow 3D View",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/cardflow-3d-view/"},next:{title:"Camera settings",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/cardflow-3d-view/camera-setting"}},l={},d=[{value:"Surface Configurations",id:"surface-configurations",level:2},{value:"Surface-configuration Context",id:"surface-configuration-context",level:2},{value:"Examples",id:"examples",level:2}];function f(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"multi-surface-views-overview",children:"Multi-Surface Views Overview"})}),"\n",(0,n.jsx)(r.p,{children:'Multi-surface views are card views that expose multiple "surfaces", which represent the positions of cards in the view. Surfaces, such as those exposed by the Cardflow\u2122 3D view, can be exposed for the center card, the cards located to either side of the center card, or for any other desired surface (see Figure 1).'}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"cardPosition",src:t(391).A+"",width:"590",height:"265"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Figure 1:"})," Surfaces exposed by the Cardflow\u2122 3D view *"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"surface-configurations",children:"Surface Configurations"}),"\n",(0,n.jsxs)(r.p,{children:["Surface configurations, which can be applied to any surface exposed by a multi-surface view, support various regions in which data can be displayed. How and where the supported regions are displayed is determined by the multi-surface themes, which provide the default surface configurations that will be applied to a multi-surface view's surfaces. These default configurations can be overridden by adding surface configurations to a theme's ",(0,n.jsx)(r.code,{children:"SurfaceConfigurations"})," collection and specifying the surfaces to which they will be applied using the Surfaces attached property defined on the multi-surface view (see Examples 1 and 3 in Surface Configurations)."]}),"\n",(0,n.jsxs)(r.p,{children:["Currently, only the ",(0,n.jsx)(r.strong,{children:"Cardflow\u2122 3D"})," view supports multiple surfaces. When more multi-surface views are added, they will also expose a Surfaces attached property with their corresponding enumeration that can be set on various surface configurations.\r\nIf a surface configuration is added to the ",(0,n.jsx)(r.code,{children:"SurfaceConfigurations"})," collection but does not specify the surface(s) to which it should be applied, it will be ignored. If more than one configuration specifies the same surface, the last one on which the Surfaces attached property was set will be used."]}),"\n",(0,n.jsxs)(r.p,{children:["In addition to specifying the surface configurations to apply to the surfaces exposed by a multi-surface view, surface configurations can also be applied to specific card surfaces, using the ",(0,n.jsx)(r.strong,{children:"CoercedSurfaceConfiguration"})," attached property (see Example 1). Setting the ",(0,n.jsx)(r.strong,{children:"CoercedSurfaceConfiguration"})," property to ",(0,n.jsx)(r.strong,{children:"null"})," (",(0,n.jsx)(r.strong,{children:"Nothing"})," in Visual Basic), will result in an empty surface being displayed."]}),"\n",(0,n.jsx)(r.h2,{id:"surface-configuration-context",children:"Surface-configuration Context"}),"\n",(0,n.jsxs)(r.p,{children:["Through a multi-surface view's SurfaceConfigurationContext attached property, the properties exposed by a surface configuration and multi-surface theme (e.g., ",(0,n.jsx)(r.code,{children:"TitleRegionPosition"})," and ",(0,n.jsx)(r.code,{children:"GradientLightColor"}),") can be accessed in order to bind elements in the theme-defined ControlTemplates to their values or use them in triggers. The type of the coerced surface configuration can also be retrieved through the ",(0,n.jsx)(r.code,{children:"CoercedSurfaceConfigurationType"})," property."]}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Products table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsx)(r.p,{children:"Example 1: Coercing a surface configuration"}),"\n",(0,n.jsxs)(r.p,{children:["The following example demonstrates how to apply a different surface configuration on the back surface of the center card using the ",(0,n.jsx)(r.strong,{children:"CoercedSurfaceConfiguration"})," attached property."]}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">     \r\n    <Grid.RowDefinitions>\r\n      <RowDefinition Height="Auto"/>\r\n      <RowDefinition/>\r\n    </Grid.RowDefinitions>\r\n    <Grid.Resources>\r\n      \r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                      Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n    </Grid.Resources>\r\n  <Button Content="Coerce Surface Configuration"\r\n          Click="ApplyCoercedSurfaceConfiguration"\r\n          Grid.Row="0"/>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}"\r\n                          Grid.Row="1">\r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ProductName"\r\n                      IsMainColumn="True"/>\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:CardflowView3D CardHeightToViewportRatio="0.5">\r\n            <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ElementalBlackTheme>\r\n                  <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                    <xcdg:ImageSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right"/>\r\n                    <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>\r\n                    <xcdg:CompleteSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Back"\r\n                                                        AutoFillDefaultRegion="False">\r\n                        <xcdg:CompleteSurfaceConfiguration.DataRegionConfiguration>\r\n                          <xcdg:RegionConfiguration FieldNames="ProductID, UnitPrice, UnitsInStock"/>\r\n                        </xcdg:CompleteSurfaceConfiguration.DataRegionConfiguration>                      \r\n                    </xcdg:CompleteSurfaceConfiguration>\r\n                  </xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n              </xcdg:ElementalBlackTheme>\r\n            </xcdg:CardflowView3D.Theme>\r\n        </xcdg:CardflowView3D>           \r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,n.jsx)(o.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"private ImageAndDataSurfaceConfiguration m_fullSurfaceConfiguration = new ImageAndDataSurfaceConfiguration();\r\n\r\nprivate void ApplyCoercedSurfaceConfiguration( object sender, RoutedEventArgs e )\r\n{\r\n  if( this.ProductsGrid.CurrentItem != null )\r\n  {\r\n  Xceed.Wpf.DataGrid.DataRow card = this.ProductsGrid.GetContainerFromItem(\r\n                                        this.ProductsGrid.CurrentItem ) as Xceed.Wpf.DataGrid.DataRow;\r\n  if( card != null )\r\n  {\r\n    card.SetValue( MultiSurfaceViewBase.CoercedSurfaceConfigurationProperty, m_fullSurfaceConfiguration );\r\n  }\r\n  }\r\n}\n"})})}),(0,n.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"Private m_fullSurfaceConfiguration As New ImageAndDataSurfaceConfiguration()\r\n\r\nPrivate Sub ApplyCoercedSurfaceConfiguration( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  If Not Me.ProductsGrid.CurrentItem Is Nothing Then\r\n    Dim card As Xceed.Wpf.DataGrid.DataRow = CType( Me.ProductsGrid.GetContainerFromItem( _\r\n                                        Me.ProductsGrid.CurrentItem ), Xceed.Wpf.DataGrid.DataRow )\r\n    If Not card Is Nothing Then\r\n      card.SetValue( MultiSurfaceViewBase.CoercedSurfaceConfigurationProperty, m_fullSurfaceConfiguration )\r\n    End If\r\n  End If\r\nEnd Sub\n"})})})]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(f,{...e})}):f(e)}},9365:(e,r,t)=>{t.d(r,{A:()=>o});t(6540);var n=t(4164);const a={tabItem:"tabItem_Ymn6"};var i=t(4848);function o(e){let{children:r,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,o),hidden:t,children:r})}},1470:(e,r,t)=>{t.d(r,{A:()=>S});var n=t(6540),a=t(4164),i=t(3104),o=t(6347),s=t(205),c=t(7485),u=t(1682),l=t(679);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function f(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return d(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:a}}=e;return{value:r,label:t,attributes:n,default:a}}))}(t);return function(e){const r=(0,u.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function h(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:t}=e;const a=(0,o.W6)(),i=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,c.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(a.location.search);r.set(i,e),a.replace({...a.location,search:r.toString()})}),[i,a])]}function g(e){const{defaultValue:r,queryString:t=!1,groupId:a}=e,i=f(e),[o,c]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:i}))),[u,d]=p({queryString:t,groupId:a}),[g,m]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,i]=(0,l.Dv)(t);return[a,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),w=(()=>{const e=u??g;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{w&&c(w)}),[w]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),m(e)}),[d,m,i]),tabValues:i}}var m=t(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function x(e){let{className:r,block:t,selectedValue:n,selectValue:o,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),l=e=>{const r=e.currentTarget,t=c.indexOf(r),a=s[t].value;a!==n&&(u(r),o(a))},d=e=>{let r=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;r=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;r=c[t]??c[c.length-1];break}}r?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},r),children:s.map((e=>{let{value:r,label:t,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>c.push(e),onKeyDown:d,onClick:l,...i,className:(0,a.A)("tabs__item",w.tabItem,i?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function b(e){let{lazy:r,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function C(e){const r=g(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",w.tabList),children:[(0,v.jsx)(x,{...r,...e}),(0,v.jsx)(b,{...r,...e})]})}function S(e){const r=(0,m.A)();return(0,v.jsx)(C,{...e,children:d(e.children)},String(r))}},391:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/cardPosition_thumb-d36652a72b8e0b2ff68b776adf457504.png"},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>s});var n=t(6540);const a={},i=n.createContext(a);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);