"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[2765],{5116:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=r(4848),i=r(8453),o=r(1470),a=r(9365);const s={},l="Editing Data",c={id:"code-snippets/14",title:"Editing Data",description:"The following page provides a list of examples that demonstrate how to edit data.",source:"@site/datagrid/code-snippets/14.md",sourceDirName:"code-snippets",slug:"/code-snippets/14",permalink:"/xceed-doc-ui/datagrid/code-snippets/14",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Displaying Tooltips",permalink:"/xceed-doc-ui/datagrid/code-snippets/13"},next:{title:"Filtering Data Items",permalink:"/xceed-doc-ui/datagrid/code-snippets/15"}},u={},d=[{value:"Entering edit when a cell is current",id:"entering-edit-when-a-cell-is-current",level:3},{value:"Using a masked text box",id:"using-a-masked-text-box",level:3},{value:"Handling routed edit events",id:"handling-routed-edit-events",level:3},{value:"Defining foreign key configurations",id:"defining-foreign-key-configurations",level:3},{value:"Custom key/value mappings",id:"custom-keyvalue-mappings",level:3}];function g(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"editing-data",children:"Editing Data"})}),"\n",(0,t.jsx)(n.p,{children:"The following page provides a list of examples that demonstrate how to edit data."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."})}),"\n",(0,t.jsx)(n.h3,{id:"entering-edit-when-a-cell-is-current",children:"Entering edit when a cell is current"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to enter edit mode only when a cell becomes current by setting the EditTriggers property to ",(0,t.jsx)(n.code,{children:"CellIsCurrent"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                     Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                        EditTriggers="CellIsCurrent"/>      \r\n</Grid>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-a-masked-text-box",children:"Using a masked text box"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to use the ",(0,t.jsx)(n.code,{children:"MaskedTextBox"})," control outside a grid to allow a user to input a fictitious identity number. The foreground color of the masked text box will change from red when it contains invalid text (",(0,t.jsx)(n.strong,{children:"HasParsingError"}),"), to blue when all required characters have been inputted (",(0,t.jsx)(n.strong,{children:"IsMaskCompleted"}),"), to green when all characters, required and optional, have been inputted (",(0,t.jsx)(n.strong,{children:"IsMaskFull"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:s="clr-namespace:System;assembly=mscorlib">\r\n  <Grid.Resources>  \r\n    <Style TargetType="{x:Type xcdg:MaskedTextBox}">\r\n        <Style.Triggers>\r\n          <Trigger Property="HasParsingError" Value="True">\r\n              <Setter Property="Foreground" Value="Red" />\r\n          </Trigger>\r\n          <Trigger Property="IsMaskCompleted" Value="True">\r\n            <Setter Property="Foreground" Value="Blue" />\r\n          </Trigger>\r\n        \r\n          <Trigger Property="IsMaskFull" Value="True">\r\n            <Setter Property="Foreground" Value="Green" />\r\n          </Trigger>\r\n      </Style.Triggers>\r\n    </Style>\r\n  </Grid.Resources>\r\n    <xcdg:MaskedTextBox Mask=">LLLL 000000 ??"\r\n                        PromptChar="-"\r\n                        AllowPromptAsInput="True"\r\n                        ResetOnPrompt="True"\r\n                        ResetOnSpace="True"\r\n                        Height="Auto"/>\r\n</Grid>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"handling-routed-edit-events",children:"Handling routed edit events"}),"\n",(0,t.jsx)(n.p,{children:"The following example demonstrates how to subscribe to the Cell.EditBeginning and EditBegun routed events as well as how to handle and cancel them."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />\r\n        </Grid.Resources>\r\n  <DockPanel>\r\n      <StackPanel DockPanel.Dock="Top">\r\n        <CheckBox x:Name="handledByRowCheckBox"\r\n                  Content="Events are handled by the rows"\r\n                  IsChecked="False" />\r\n        <CheckBox x:Name="cancelBeginEdit"\r\n                  Content="Cancel BeginEdit event"\r\n                  IsChecked="False" />\r\n      </StackPanel>\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                            xcdg:Cell.EditBeginning="EditBeginning"\r\n                            xcdg:Cell.EditBegun="EditBegun"/>\r\n  </DockPanel>\r\n</Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public void EditBeginning( object sender, CancelRoutedEventArgs e )\r\n{\r\n  e.Cancel = ( this.cancelBeginEdit.IsChecked == true );\r\n  e.Handled = ( this.handledByRowCheckBox.IsChecked == true );\r\n  Debug.WriteLine( sender + ": EditBeginning" );\r\n}\r\npublic void EditBegun( object sender, RoutedEventArgs e )\r\n{\r\n  e.Handled = ( this.handledByRowCheckBox.IsChecked ?? true );\r\n  Debug.WriteLine( sender + ": EditBegun" );\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'Public Sub EditBeginning( ByVal sender As Object, ByVal e As CancelRoutedEventArgs )\r\n  If Me.cancelBeginEdit.IsChecked = True Then\r\n      e.Cancel = True\r\n  End If\r\n  If Me.handledByRowCheckBox.IsChecked = True Then\r\n    e.Handled = True\r\n  End If\r\n  Debug.WriteLine( sender + ": EditBeginning" )\r\nEnd Sub\r\nPublic Sub EditBegun( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  If Me.handledByRowCheckBox.IsChecked = True Then\r\n    e.Handled = True\r\n  End If\r\n  Debug.WriteLine( sender + ": EditBegun" )\r\nEnd Sub\n'})})})]}),"\n",(0,t.jsx)(n.h3,{id:"defining-foreign-key-configurations",children:"Defining foreign key configurations"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to define foreign key configurations for foreign key descriptions that were automatically created from the constraints extracted from the underlying ",(0,t.jsx)(n.strong,{children:"DataTable"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current}, Path=Orders}"\r\n                                       AutoCreateForeignKeyDescriptions="True"/>\r\n </Grid.Resources>      \r\n \r\n <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                       ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                       AutoCreateForeignKeyConfigurations="True">\r\n    <xcdg:DataGridControl.Columns>\r\n       <xcdg:Column FieldName="EmployeeID"\r\n                    Title="Employee">\r\n          <xcdg:Column.CellContentTemplate>\r\n             <DataTemplate>\r\n                <StackPanel Orientation="Horizontal">\r\n                   <TextBlock Text="{Binding FirstName}" />\r\n                   <TextBlock Text=" " />\r\n                   <TextBlock Text="{Binding LastName}" />\r\n                </StackPanel>\r\n             </DataTemplate>\r\n          </xcdg:Column.CellContentTemplate>\r\n       </xcdg:Column>\r\n       <xcdg:Column FieldName="CustomerID"\r\n                    Title="Customer">\r\n          <xcdg:Column.ForeignKeyConfiguration>\r\n             <xcdg:ForeignKeyConfiguration DisplayMemberPath="CompanyName"\r\n                                           ValuePath="CustomerID" />\r\n          </xcdg:Column.ForeignKeyConfiguration>\r\n       </xcdg:Column>\r\n       \r\n       <xcdg:Column FieldName="ShipVia"\r\n                    Title="Shipping Company">\r\n          <xcdg:Column.ForeignKeyConfiguration>\r\n             <xcdg:ForeignKeyConfiguration DisplayMemberPath="CompanyName"\r\n                                           ValuePath="ShipperID" />\r\n          </xcdg:Column.ForeignKeyConfiguration>\r\n       </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-keyvalue-mappings",children:"Custom key/value mappings"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to bind the grid directly to a ",(0,t.jsx)(n.code,{children:"BindingList<Person>"})," objects and provide a custom key/value mapping through a ",(0,t.jsx)(n.strong,{children:"ForeignKeyConverter"}),", which will return the appropriate ",(0,t.jsx)(n.em,{children:"employee"})," first and last names for the provided ",(0,t.jsx)(n.em,{children:"employee"})," ID."]}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <local:OccupationToStringConverter x:Key="occupationToStringConverter" />\r\n      <local:PersonForeignKeyConverter x:Key="personForeignKeyConverter" />\r\n      <ObjectDataProvider x:Key="occupationValues"\r\n                          MethodName="GetValues"\r\n                          ObjectType="{x:Type sys:Enum}">\r\n          <ObjectDataProvider.MethodParameters>\r\n            <x:Type TypeName="local:Occupation" />\r\n          </ObjectDataProvider.MethodParameters>\r\n      </ObjectDataProvider>\r\n    </Grid.Resources>    \r\n  \r\n    <xcdg:DataGridControl x:Name="PersonsGrid"\r\n                          ItemsSource="{Binding Source={x:Static Application.Current}, Path=Persons}">\r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="Occupation">\r\n            <xcdg:Column.CellContentTemplate>\r\n              <DataTemplate>\r\n                  <TextBlock Text="{Binding Converter={StaticResource occupationToStringConverter}}" />\r\n              </DataTemplate>\r\n            </xcdg:Column.CellContentTemplate>\r\n            <xcdg:Column.ForeignKeyConfiguration>\r\n              <xcdg:ForeignKeyConfiguration ItemsSource="{Binding Source={StaticResource occupationValues}}" />\r\n            </xcdg:Column.ForeignKeyConfiguration>\r\n        </xcdg:Column>\r\n        <xcdg:Column FieldName="ReportsTo">\r\n            <xcdg:Column.CellContentTemplate>\r\n              <DataTemplate>\r\n                  <StackPanel Orientation="Horizontal">\r\n                    <TextBlock Text="{Binding FirstName}" />\r\n                    <TextBlock Text=" " />\r\n                    <TextBlock Text="{Binding LastName}" />\r\n                  </StackPanel>\r\n              </DataTemplate>\r\n            </xcdg:Column.CellContentTemplate>\r\n            <xcdg:Column.ForeignKeyConfiguration>\r\n              <xcdg:ForeignKeyConfiguration ItemsSource="{Binding Source={x:Static Application.Current}, Path=Persons}"\r\n                                            ForeignKeyConverter="{StaticResource personForeignKeyConverter}"\r\n                                            ValuePath="PersonID"/>\r\n            </xcdg:Column.ForeignKeyConfiguration>\r\n        </xcdg:Column>\r\n      </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class PersonForeignKeyConverter : ForeignKeyConverter\r\n{\r\n  public override object GetKeyFromValue( object value, ForeignKeyConfiguration configuration )\r\n  {\r\n    PersonBindingList bindingList = configuration.ItemsSource as PersonBindingList;\r\n    if( bindingList != null )\r\n    {\r\n      Person person = value as Person;\r\n      if( person != null )\r\n      {\r\n        return person.PersonID;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  public override object GetValueFromKey( object key, ForeignKeyConfiguration configuration )\r\n  {\r\n    PersonBindingList bindingList = configuration.ItemsSource as PersonBindingList;\r\n    if( bindingList != null )\r\n    {\r\n      try\r\n      {\r\n        int personID = ( int )key;\r\n        foreach( Person person in bindingList )\r\n        {\r\n          if( person.PersonID == personID )\r\n          {\r\n            return person;\r\n          }\r\n        }\r\n      }\r\n      catch( Exception )\r\n      {\r\n        // key can be null\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:"Public Class PersonForeignKeyConverter\r\n            Inherits ForeignKeyConverter\r\n  Public Overrides Function GetKeyFromValue( value As Object, configuration As ForeignKeyConfiguration ) As Object\r\n    Dim bindingList As PersonBindingList = TryCast( configuration.ItemsSource, PersonBindingList )\r\n    If Not bindingList Is Nothing Then\r\n      Dim person As Person = TryCast( value, Person )\r\n      If Not person Is Nothing Then\r\n        Return person.PersonID\r\n      End If\r\n    End If\r\n    Return -1\r\n  End Function\r\n  Public Overrides Function GetValueFromKey( key As Object, configuration As ForeignKeyConfiguration ) As Object\r\n  Dim bindingList As PersonBindingList = TryCast( configuration.ItemsSource, PersonBindingList )\r\n    If Not bindingList Is Nothing Then\r\n      Try\r\n        Dim personID As Integer = CInt( key )\r\n        Dim person As Person\r\n        For Each person In bindingList\r\n          If person.PersonID = personID Then\r\n            Return person\r\n          End If\r\n        Next person\r\n      Catch e As Exception\r\n        ' key can be nothing\r\n      End Try\r\n    Return Nothing\r\n  End Function\r\nEnd Class\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["The following code provides the implementation of the ",(0,t.jsx)(n.em,{children:"OccupationToStringConverter"})," class."]}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class OccupationToStringConverter: IValueConverter\r\n{\r\n  public object Convert( object value, Type targetType, object parameter, System.Globalization.CultureInfo culture )\r\n  {\r\n    if( value != null && value is Occupation)\r\n    {\r\n      string enumString = value.ToString();\r\n      // Start at 1 to ignore the first capitalizes letter.\r\n      for( int i = 1; i < enumString.Length - 1; i++ )\r\n      {\r\n        if( char.IsUpper( enumString[ i ] ) )\r\n        {\r\n          enumString = enumString.Insert( i, " " );\r\n          i++;\r\n        }\r\n      }\r\n      return enumString;\r\n    }\r\n    return null;\r\n  }\r\n  public object ConvertBack( object value, Type targetType, object parameter, System.Globalization.CultureInfo culture )\r\n  {\r\n    return Binding.DoNothing;\r\n  }\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'Public Class OccupationToStringConverter inherints IValueConverter\r\n  Public Function Convert( value As Object, targetType As Type, parameter As Object,\r\n                          culture As System.Globalization.CultureInfo ) As Object Implements IValueConverter.Convert\r\n    If( Not value Is Nothing ) AndAlso ( TypeOf value Is Occupation ) Then\r\n      Dim enumString As String = value.ToString()\r\n      \' Start at 1 to ignore the first capitalizes letter.\r\n      Dim i as Integer = 1\r\n      For i To i < enumString.Length - 1\r\n        If char.IsUpper( enumString( i ) ) Then\r\n          enumString = enumString.Insert( i, " " )\r\n          i++\r\n        End If\r\n      Next i\r\n      Return enumString\r\n    End If\r\n    Return Nothing\r\n  End Function\r\n  Public Function ConvertBack( value As Value, targetType As Type, parameter As Object,\r\n                              culture As System.Globalization.CultureInfo ) As Object Implements IValueConverter.ConvertBack\r\n    Return Binding.DoNothing\r\n  End Function\r\nEnd Class\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(4164);const i={tabItem:"tabItem_Ymn6"};var o=r(4848);function a(e){let{children:n,hidden:r,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>T});var t=r(6540),i=r(4164),o=r(3104),a=r(6347),s=r(205),l=r(7485),c=r(1682),u=r(679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function h(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,o=g(e),[a,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,d]=m({queryString:r,groupId:i}),[h,x]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,u.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:i}),f=(()=>{const e=c??h;return p({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{f&&l(f)}),[f]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),x(e)}),[d,x,o]),tabValues:o}}var x=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(4848);function C(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const n=e.currentTarget,r=l.indexOf(n),i=s[r].value;i!==t&&(c(n),a(i))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:s.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...o,className:(0,i.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:o}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=h(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,b.jsx)(C,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function T(e){const n=(0,x.A)();return(0,b.jsx)(y,{...e,children:d(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);