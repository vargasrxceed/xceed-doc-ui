"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[6396],{1701:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Welcome to Xceed Toolkit Plus for WPF v4.6","href":"/xceed-doc-ui/docs/welcome","docId":"welcome","unlisted":false},{"type":"link","label":"Themes Usage Instructions","href":"/xceed-doc-ui/docs/themes-usage-instructions","docId":"themes-usage-instructions","unlisted":false},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Creating Your First Toolkit Plus for WPF Project","href":"/xceed-doc-ui/docs/getting-started/02","docId":"getting-started/02","unlisted":false},{"type":"link","label":"Creating Your First Datagrid Project","href":"/xceed-doc-ui/docs/getting-started/03","docId":"getting-started/03","unlisted":false},{"type":"link","label":"Creating Your First ListBox Project","href":"/xceed-doc-ui/docs/getting-started/04","docId":"getting-started/04","unlisted":false},{"type":"link","label":"Creating Your First AvalonDock Project","href":"/xceed-doc-ui/docs/getting-started/05","docId":"getting-started/05","unlisted":false},{"type":"link","label":"Licensing","href":"/xceed-doc-ui/docs/getting-started/06","docId":"getting-started/06","unlisted":false},{"type":"link","label":"LiveExplorer (Sample apps)","href":"/xceed-doc-ui/docs/getting-started/07","docId":"getting-started/07","unlisted":false},{"type":"link","label":"Deploying","href":"/xceed-doc-ui/docs/getting-started/08","docId":"getting-started/08","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/getting-started/01"},{"type":"link","label":"Chart control","href":"/xceed-doc-ui/docs/chart","docId":"chart","unlisted":false},{"type":"category","label":"Datagrid control","items":[{"type":"link","label":"Object Model Overview","href":"/xceed-doc-ui/docs/datagrid/object-model-overview","docId":"datagrid/object-model-overview","unlisted":false},{"type":"link","label":"DataGridControl Class","href":"/xceed-doc-ui/docs/datagrid/datagrid-control-class","docId":"datagrid/datagrid-control-class","unlisted":false},{"type":"link","label":"DataGridContext Class","href":"/xceed-doc-ui/docs/datagrid/datagridcontext-class","docId":"datagrid/datagridcontext-class","unlisted":false},{"type":"link","label":"Cell Class","href":"/xceed-doc-ui/docs/datagrid/cell-class","docId":"datagrid/cell-class","unlisted":false},{"type":"category","label":"Column control","items":[{"type":"link","label":"Position and Widths","href":"/xceed-doc-ui/docs/datagrid/column/position-width","docId":"datagrid/column/position-width","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/column/intro"},{"type":"link","label":"Row Class","href":"/xceed-doc-ui/docs/datagrid/row-class","docId":"datagrid/row-class","unlisted":false},{"type":"link","label":"DataGridCollectionView Class","href":"/xceed-doc-ui/docs/datagrid/datagridcollectionview-class","docId":"datagrid/datagridcollectionview-class","unlisted":false},{"type":"link","label":"Other Classes","href":"/xceed-doc-ui/docs/datagrid/other-classes","docId":"datagrid/other-classes","unlisted":false},{"type":"category","label":"Manipulating data","items":[{"type":"category","label":"Providing, Inserting and Removing Data","items":[{"type":"link","label":"Data Virtualization","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/02","docId":"datagrid/manipulating-data/providing-inserting-removing/02","unlisted":false},{"type":"link","label":"Inserting Data","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/03","docId":"datagrid/manipulating-data/providing-inserting-removing/03","unlisted":false},{"type":"link","label":"Removing Data","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/04","docId":"datagrid/manipulating-data/providing-inserting-removing/04","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/01"},{"type":"category","label":"Editing and Validating Data","items":[{"type":"link","label":"DataCollectionView Edit Events","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/02","docId":"datagrid/manipulating-data/editing-validating-data/02","unlisted":false},{"type":"link","label":"Routed Edit Events","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/03","docId":"datagrid/manipulating-data/editing-validating-data/03","unlisted":false},{"type":"link","label":"Cell Editors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/04","docId":"datagrid/manipulating-data/editing-validating-data/04","unlisted":false},{"type":"link","label":"Date and Time Editors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/05","docId":"datagrid/manipulating-data/editing-validating-data/05","unlisted":false},{"type":"link","label":"Masked Editors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/06","docId":"datagrid/manipulating-data/editing-validating-data/06","unlisted":false},{"type":"link","label":"Numeric Editors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/07","docId":"datagrid/manipulating-data/editing-validating-data/07","unlisted":false},{"type":"link","label":"Text and Value Editors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/08","docId":"datagrid/manipulating-data/editing-validating-data/08","unlisted":false},{"type":"link","label":"Validating Data","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/09","docId":"datagrid/manipulating-data/editing-validating-data/09","unlisted":false},{"type":"link","label":"Cell Error Styles","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/10","docId":"datagrid/manipulating-data/editing-validating-data/10","unlisted":false},{"type":"link","label":"Foreign Key Detection","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/11","docId":"datagrid/manipulating-data/editing-validating-data/11","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/manipulating-data/editing-validating-data/01"},{"type":"category","label":"Grouping Data","items":[{"type":"link","label":"Group Configurations","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/02","docId":"datagrid/manipulating-data/grouping-data/02","unlisted":false},{"type":"link","label":"Custom Group-configuration Selectors","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/03","docId":"datagrid/manipulating-data/grouping-data/03","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/01"},{"type":"link","label":"Sorting Data","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/sorting","docId":"datagrid/manipulating-data/sorting","unlisted":false},{"type":"link","label":"Filtering Data","href":"/xceed-doc-ui/docs/datagrid/manipulating-data/filtering","docId":"datagrid/manipulating-data/filtering","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/category/manipulating-data"},{"type":"category","label":"Views and themes","items":[{"type":"category","label":"Views","items":[{"type":"link","label":"Column Positions and Widths","href":"/xceed-doc-ui/docs/datagrid/views-themes/views/02","docId":"datagrid/views-themes/views/02","unlisted":false},{"type":"link","label":"View Properties","href":"/xceed-doc-ui/docs/datagrid/views-themes/views/03","docId":"datagrid/views-themes/views/03","unlisted":false},{"type":"link","label":"Tableflow View: Smooth Scrolling and Other Animated Effects","href":"/xceed-doc-ui/docs/datagrid/views-themes/views/04","docId":"datagrid/views-themes/views/04","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/views-themes/views/01"},{"type":"category","label":"Themes","items":[{"type":"link","label":"System Themes","href":"/xceed-doc-ui/docs/datagrid/views-themes/themes/02","docId":"datagrid/views-themes/themes/02","unlisted":false},{"type":"link","label":"Office 2007 Themes","href":"/xceed-doc-ui/docs/datagrid/views-themes/themes/03","docId":"datagrid/views-themes/themes/03","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/views-themes/themes/01"}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/views-themes/intro"},{"type":"category","label":"Styles","items":[{"type":"link","label":"Cell Error Styles","href":"/xceed-doc-ui/docs/datagrid/styles/01","docId":"datagrid/styles/01","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/styles/intro"},{"type":"link","label":"Templates","href":"/xceed-doc-ui/docs/datagrid/templates","docId":"datagrid/templates","unlisted":false},{"type":"link","label":"Commands","href":"/xceed-doc-ui/docs/datagrid/commands","docId":"datagrid/commands","unlisted":false},{"type":"link","label":"Foreign Key Detection","href":"/xceed-doc-ui/docs/datagrid/foreign-key-detection","docId":"datagrid/foreign-key-detection","unlisted":false},{"type":"link","label":"Items and Containers","href":"/xceed-doc-ui/docs/datagrid/items-containers","docId":"datagrid/items-containers","unlisted":false},{"type":"link","label":"UI Automation and Testing","href":"/xceed-doc-ui/docs/datagrid/ui-automation-testing","docId":"datagrid/ui-automation-testing","unlisted":false},{"type":"link","label":"Unbound Columns","href":"/xceed-doc-ui/docs/datagrid/unbound-columns","docId":"datagrid/unbound-columns","unlisted":false},{"type":"link","label":"Comparing the DataGrids","href":"/xceed-doc-ui/docs/datagrid/comparing-datagrids","docId":"datagrid/comparing-datagrids","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/datagrid/intro"},{"type":"category","label":"Listbox control","items":[{"type":"link","label":"Providing Data","href":"/xceed-doc-ui/docs/listbox/02","docId":"listbox/02","unlisted":false},{"type":"link","label":"Custom Data Sources","href":"/xceed-doc-ui/docs/listbox/03","docId":"listbox/03","unlisted":false},{"type":"link","label":"Filtering Data","href":"/xceed-doc-ui/docs/listbox/04","docId":"listbox/04","unlisted":false},{"type":"link","label":"Grouping Data","href":"/xceed-doc-ui/docs/listbox/05","docId":"listbox/05","unlisted":false},{"type":"link","label":"Selecting Data","href":"/xceed-doc-ui/docs/listbox/06","docId":"listbox/06","unlisted":false},{"type":"link","label":"Sorting Data","href":"/xceed-doc-ui/docs/listbox/07","docId":"listbox/07","unlisted":false},{"type":"link","label":"Animation Settings","href":"/xceed-doc-ui/docs/listbox/08","docId":"listbox/08","unlisted":false},{"type":"link","label":"Drag-and-Drop Operations","href":"/xceed-doc-ui/docs/listbox/09","docId":"listbox/09","unlisted":false},{"type":"category","label":"Panels & Views","items":[{"type":"link","label":"The StackPanel and StackView Classes","href":"/xceed-doc-ui/docs/listbox/panel-view/01","docId":"listbox/panel-view/01","unlisted":false},{"type":"link","label":"The PathPanel, PathView, and PathConfiguration Classes","href":"/xceed-doc-ui/docs/listbox/panel-view/02","docId":"listbox/panel-view/02","unlisted":false},{"type":"link","label":"The MultiViewPanel Class","href":"/xceed-doc-ui/docs/listbox/panel-view/03","docId":"listbox/panel-view/03","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/category/panels--views"}],"collapsed":true,"collapsible":true,"href":"/xceed-doc-ui/docs/listbox/01"},{"type":"link","label":"Docking window control","href":"/xceed-doc-ui/docs/docking-window-control","docId":"docking-window-control","unlisted":false},{"type":"link","label":"Material controls","href":"/xceed-doc-ui/docs/material-controls","docId":"material-controls","unlisted":false},{"type":"link","label":"PropertyGrid class","href":"/xceed-doc-ui/docs/property-grid","docId":"property-grid","unlisted":false}]},"docs":{"chart":{"id":"chart","title":"Chart control","description":"The WPF chart control is designed to display rich, flexible, configurable, extendable charts. The control is 100% lookless and is able to display multiple areas with multiple charts at the same time. It supports area, column (bar), line, and pie charts, and also provides the ability to create custom charts.","sidebar":"tutorialSidebar"},"datagrid/cell-class":{"id":"datagrid/cell-class","title":"Cell Class","description":"A cell is a ContentControl, which displays the value of a corresponding property in a data item. Like their parent row, cells have a limited lifespan and will only exist while their parent rows are displayed in a grid\'s viewport (virtualization). Each cell is also associated with a parent column, whose FieldName property matches the FieldName property of its child cells.","sidebar":"tutorialSidebar"},"datagrid/column/intro":{"id":"datagrid/column/intro","title":"Column Class","description":"Columns define information on how the cells they contain are displayed and their content edited.","sidebar":"tutorialSidebar"},"datagrid/column/position-width":{"id":"datagrid/column/position-width","title":"Position and Widths","description":"Through a grid\'s Columns collection, all the columns in a grid can be accessed, regardless of their visibility. To access only the visible columns\u2014those whose Visible property is set to true\u2014the VisibleColumns property can be consulted. The value of a column\'s Index property represents its position within the Columns collection while the visible position of a column can be retrieved through a column\'s VisiblePosition property, which may or may not correspond to the Index property. In addition to the VisiblePosition property, the IsFirstVisible and IsLastVisible properties can be used to determine if a column is the first or last visible column in a grid. A column-manager row\'s AllowColumnReorder property can prevent end users from changing the visible positions of columns; however, programmatic changes to a column\'s visible position can still be made.","sidebar":"tutorialSidebar"},"datagrid/commands":{"id":"datagrid/commands","title":"Commands","description":"A RoutedCommand provides the signaling mechanism that indicates that a particular action is required; it is simply a messaging mechanism and does not perform the actions for the command. Routed commands can be triggered on an element through gestures attached to a command, through an InputBinding on a specific element, or explicitly (invoked directly).","sidebar":"tutorialSidebar"},"datagrid/comparing-datagrids":{"id":"datagrid/comparing-datagrids","title":"Comparing the DataGrids","description":"The DataGrid included in Xceed Toolkit Plus for WPF (available on the Xceed web site), is the same as the DataGrid included in Extended WPF Toolkit.","sidebar":"tutorialSidebar"},"datagrid/datagrid-control-class":{"id":"datagrid/datagrid-control-class","title":"DataGridControl Class","description":"At the root of Xceed\'s WPF datagrid is the DataGridControl class, which derives from ItemsControl and is used to display a collection of data items.","sidebar":"tutorialSidebar"},"datagrid/datagridcollectionview-class":{"id":"datagrid/datagridcollectionview-class","title":"DataGridCollectionView Class","description":"The DataGridCollectionView class allows any collection that implements the IEnumerable interface to be grouped, sorted, or filtered. Unlike the BindingListCollectionView class, the DataGridCollectionView class will never touch the underlying data source, meaning that the original sorting and filtering present in the data source will not be modified. The underlying data source to which the DataGridCollectionView is bound can be retrieved through the SourceCollection property.","sidebar":"tutorialSidebar"},"datagrid/datagridcontext-class":{"id":"datagrid/datagridcontext-class","title":"DataGridContext Class","description":"At the heart of every grid is a DataGridContext that provides contextual information on, and access to, the items they contain and acts as a hub through which all interactions with the grid pass. The grid that is the source of the context can be retrieved through a context\'s DataGridControl property.","sidebar":"tutorialSidebar"},"datagrid/foreign-key-detection":{"id":"datagrid/foreign-key-detection","title":"Foreign Key Detection","description":"Through the DataGridCollectionView[Source] (as well as other collection views that derive from DataGridCollectionView[Source]Base), foreign key constraints defined by a DataTable or DataView used as a data source, as well as enums, can be automatically detected and displayed and edited, through a ComboBox, as the corresponding value rather than its key. In order to automatically detect foreign key constraints, the collection view\'s AutoCreateForeignKeyDescriptions property must be set to true, which will result in a DataGridForeignKeyDescription being created for each constraint in the ConstraintCollection of the DataTable or DataView used as a source as well as for each enum.","sidebar":"tutorialSidebar"},"datagrid/intro":{"id":"datagrid/intro","title":"Datagrid control","description":"Please note that there may be some references to the features contained in the full version of Xceed DataGrid for WPF (which contains additional, advanced features) in the documentation.","sidebar":"tutorialSidebar"},"datagrid/items-containers":{"id":"datagrid/items-containers","title":"Items and Containers","description":"Every item that is contained in a grid or detail has a container that provides it with a visual representation. Although normally a container\'s item is dealt with directly, sometimes it is necessary to access the container instead.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/01":{"id":"datagrid/manipulating-data/editing-validating-data/01","title":"Editing Data","description":"The content of each cell in a grid\u2014assuming that they are not read-only\u2014can be edited programmatically or at runtime by the end user.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/02":{"id":"datagrid/manipulating-data/editing-validating-data/02","title":"DataCollectionView Edit Events","description":"Unlike the routed edit events that edit items through the grid, the edit events exposed by the DataGridCollectionView and DataGridCollectionViewSource classes (see Table 1) allow the items in the underlying data source to be edited directly.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/03":{"id":"datagrid/manipulating-data/editing-validating-data/03","title":"Routed Edit Events","description":"The Cell and Row classes expose routed events (see Table 1) that are triggered during various stages of the edit process and that can be handled by any parent element in the visual tree (bubbling). These events are raised when the BeginEdit, EndEdit, or CancelEdit methods are called, both programmatically and through UI interactions (e.g., pressing ESC key), to provide notifications when a process is about to begin and when it has ended.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/04":{"id":"datagrid/manipulating-data/editing-validating-data/04","title":"Cell Editors","description":"The content of the cells contained in a grid are edited with CellEditors, whose type, by default, is determined by the data type of a cell\'s content (see Table 1).  Custom cell editors can also be provided per column by setting a column\'s CellEditor property, or per data type through the DataGridControl\'s DefaultCellEditors property.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/05":{"id":"datagrid/manipulating-data/editing-validating-data/05","title":"Date and Time Editors","description":"The standard DatePicker is used.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/06":{"id":"datagrid/manipulating-data/editing-validating-data/06","title":"Masked Editors","description":"The MaskedTextBox, which derives from the ValueRangeTextBox, forces inputted text to match the mask defined by its Mask and MaskedTextProvider properties (see Table 1 for a list of the supported mask characters). In addition to the limitations imposed by the mask, the inputted characters can be limited on only ASCII characters according to the value of the RestrictToAscii property.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/07":{"id":"datagrid/manipulating-data/editing-validating-data/07","title":"Numeric Editors","description":"The NumericUpDown-derived classes provide support for numerical input.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/08":{"id":"datagrid/manipulating-data/editing-validating-data/08","title":"Text and Value Editors","description":"The AutoSelectTextBox is the default editor that will be used to edit string values and any values whose data type does not have an associated default editor.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/09":{"id":"datagrid/manipulating-data/editing-validating-data/09","title":"Validating Data","description":"Xceed DataGrid for WPF offers data validation support at various levels, including cells, row, and business-objects. How and when data is validated is determined by binding- and UI-level validation rules, which are queried when a cell or row is about to end its edit process, when a cell\'s content is changed, or when data is loaded into a grid.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/10":{"id":"datagrid/manipulating-data/editing-validating-data/10","title":"Cell Error Styles","description":"By default, when the value of a cell fails the validation process, its appearance will change to provide a visual cue that an error has occurred (see Figure 1). To redefine the appearance of a cell when its value is in error, the CellErrorStyle property can be set to a new style, which will be used when a validation error occurs. The error style can be provided at the grid, row, column, or cell levels by setting their respective CellErrorStyle properties (see Example 1).","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/editing-validating-data/11":{"id":"datagrid/manipulating-data/editing-validating-data/11","title":"Foreign Key Detection","description":"Through the DataGridCollectionView[Source] (as well as other collection views that derive from DataGridCollectionView[Source]Base), foreign key constraints defined by a DataTable or DataView used as a data source, as well as enums, can be automatically detected and displayed and edited, through a ComboBox, as the corresponding value rather than its key. In order to automatically detect foreign key constraints, the collection view\'s AutoCreateForeignKeyDescriptions property must be set to true, which will result in a DataGridForeignKeyDescription being created for each constraint in the ConstraintCollection of the DataTable or DataView used as a source as well as for each enum.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/filtering":{"id":"datagrid/manipulating-data/filtering","title":"Filtering Data","description":"The items that are displayed in a view can be limited to one or more filtering criteria using either the native CollectionView filtering or automatic filtering meaning that even if an item exists in the underlying data source, it is not necessarily displayed in the view.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/grouping-data/01":{"id":"datagrid/manipulating-data/grouping-data/01","title":"Grouping Data","description":"Data items can be grouped by adding standard PropertyGroupDescription objects or DataGridGroupDescription objects (recommended) to the GroupDescriptions property of the DataGridCollectionViewSource or DataGridCollectionView to which a grid is bound or directly through the Items property and specifying the field name of the column by whose values to group. Each DataGridGroupDescription object that is added to this collection represents the characteristics of a group level in a grid.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/grouping-data/02":{"id":"datagrid/manipulating-data/grouping-data/02","title":"Group Configurations","description":"Group configurations define how same-level groups in the grid or detail are configured. By default, all group configurations contain a GroupHeaderControl in their header sections; however, the default configuration can be modified by providing a new group configuration to a grid or detail configuration\'s DefaultGroupConfiguration property (see Example 1). A group configuration can also be provided on either a DataGridGroupDescription or column and will be applied to all groups that are created from the values of the column.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/grouping-data/03":{"id":"datagrid/manipulating-data/grouping-data/03","title":"Custom Group-configuration Selectors","description":"In addition to the built-in LevelGroupConfigurationSelector and FieldNameGroupConfigurationSelector group-configuration selectors, which can be used to select the appropriate configuration for a group based on its level or field name, custom group-configuration selectors can also be created and used.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/providing-inserting-removing/01":{"id":"datagrid/manipulating-data/providing-inserting-removing/01","title":"Providing Data","description":"The data items that populate a grid are provided by the DataGridCollectionView or DataGridCollectionViewSource (in XAML) assigned to the ItemsSource property of the DataGridControl class. These views allow the data items contained in a grid to be grouped, sorted, and/or filtered (see Example 1).","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/providing-inserting-removing/02":{"id":"datagrid/manipulating-data/providing-inserting-removing/02","title":"Data Virtualization","description":"The DataGridVirtualizingCollectionView class and its XAML proxy, the DataGridVirtualizingCollectionViewSource class, provide support for data virtualization. Also known as \\"virtual mode\\" or \\"lazy loading\\", data virtualization provides smart deferred querying of data, support for asynchronous data fetching, preemptive loading, and query abort notifications to ensure a smooth and seemless experience that leaves applications responsive and prevents needless queries to data servers.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/providing-inserting-removing/03":{"id":"datagrid/manipulating-data/providing-inserting-removing/03","title":"Inserting Data","description":"The DataGridCollectionView and DataGridCollectionViewSource classes expose events (see Table 1) that are triggered during key stages of inserting a new item into an underlying data source. These events provide full control over the insertion process and make it possible to insert items into a source that does not implement the IBindingList interface.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/providing-inserting-removing/04":{"id":"datagrid/manipulating-data/providing-inserting-removing/04","title":"Removing Data","description":"In addition to the insertion events, the DataGridCollectionView and DataGridCollectionViewSource classes also expose the RemovingItem and ItemRemoved events, which are raised when the Remove or RemoveAt methods have been called to signal that an item is about to be removed or has been removed, respectively, from the underlying data source.","sidebar":"tutorialSidebar"},"datagrid/manipulating-data/providing-inserting-removing/05":{"id":"datagrid/manipulating-data/providing-inserting-removing/05","title":"Unbound Data","description":"Unbound data can be \\"appended\\" to a data item through the use of unbound item properties, which are represented by the DataGridUnboundItemProperty class. Unlike unbound columns, which can be used to display non-data related information such as a label or controls that allow some sort of action to be carried out, unbound item properties can be used to provide additional data, such as calculated columns (see Example 1)."},"datagrid/manipulating-data/sorting":{"id":"datagrid/manipulating-data/sorting","title":"Sorting Data","description":"Data items can be sorted by adding SortDescription objects to the SortDescriptions property of the DataGridCollectionViewSource or DataGridCollectionView to which a grid is bound, or directly through the Items property, and specifying the field name of the column by whose values to sort as well as the direction in which those values are to be sorted (see Example 1).","sidebar":"tutorialSidebar"},"datagrid/object-model-overview":{"id":"datagrid/object-model-overview","title":"Object Model Overview","description":"Prerequisite Knowledge","sidebar":"tutorialSidebar"},"datagrid/other-classes":{"id":"datagrid/other-classes","title":"Other Classes","description":"The other topics discussed in this book deal with the major classes that compose Xceed DataGrid for WPF; however, there are other classes that also play a part in every grid.","sidebar":"tutorialSidebar"},"datagrid/row-class":{"id":"datagrid/row-class","title":"Row Class","description":"Each row\u2014more specifically each DataRow\u2014is the UI representation of a data item. The data rows that are contained in a grid are virtualized, meaning that they only exist when they are visible in a grid\'s viewport; therefore, references to them, or one of their cells, should not be kept.","sidebar":"tutorialSidebar"},"datagrid/styles/01":{"id":"datagrid/styles/01","title":"Cell Error Styles","description":"By default, when the value of a cell fails the validation process, its appearance will change to provide a visual cue that an error has occurred (see Figure 1). To redefine the appearance of a cell when its value is in error, the CellErrorStyle property can be set to a new style, which will be used when a validation error occurs. The error style can be provided at the grid, row, column, or cell levels by setting their respective CellErrorStyle properties (see Example 1).","sidebar":"tutorialSidebar"},"datagrid/styles/intro":{"id":"datagrid/styles/intro","title":"Styles","description":"Styles are a collection of properties and their associated values, which are applied to an element to override the default appearance provided by the element\'s default style (see also Templates).  All elements in a grid, with the exception of columns, can be styled in the same way as elements provided by the Microsoft .NET Framework.","sidebar":"tutorialSidebar"},"datagrid/templates":{"id":"datagrid/templates","title":"Templates","description":"Windows Presentation Foundation (WPF) introduced a new way to think of controls and data items the ControlTemplate, which defines the default appearance and behavior of a control; the DataTemplate, which defines how content in a ContentControl and/or data items in an ItemsControl are displayed; and the ItemsPanelTemplate, which identifies the type of panel used to display items in an ItemsControl.","sidebar":"tutorialSidebar"},"datagrid/ui-automation-testing":{"id":"datagrid/ui-automation-testing","title":"UI Automation and Testing","description":"Xceed DataGrid for WPF supports Microsoft\'s newest accessibility framework, Microsoft UI Automation. It is available on all operating systems that support Windows Presentation Foundation (WPF). It provides programmatic access to most UI elements, which enables assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI using other than standard input. It also allows automated test scripts to interact with the UI.","sidebar":"tutorialSidebar"},"datagrid/unbound-columns":{"id":"datagrid/unbound-columns","title":"Unbound Columns","description":"An \\"unbound column\\" is a column that can be used to display non-data related information such as a label or controls that allow some sort of action to be carried out (e.g., a button to open a window in which the current item can be edited). Unlike data bound columns, unbound columns cannot be grouped or sorted, and their values cannot be filtered.","sidebar":"tutorialSidebar"},"datagrid/views-themes/intro":{"id":"datagrid/views-themes/intro","title":"Views and Themes","description":"The WPF datagrid included in this product supports two views: TableView and TableflowView classes, which derive from the UIViewBase class. The TableView and TableflowView classes lay out data items as typical rows.","sidebar":"tutorialSidebar"},"datagrid/views-themes/themes/01":{"id":"datagrid/views-themes/themes/01","title":"Themes Overview","description":"Themes determine the color palette and default visual cues applied to the elements in a grid.","sidebar":"tutorialSidebar"},"datagrid/views-themes/themes/02":{"id":"datagrid/views-themes/themes/02","title":"System Themes","description":"The system themes are pixel-perfect themes that were designed to integrate into any windows application, regardless of the theme being used.","sidebar":"tutorialSidebar"},"datagrid/views-themes/themes/03":{"id":"datagrid/views-themes/themes/03","title":"Office 2007 Themes","description":"The Office 2007 themes, which are represented by the Office2007BlackTheme, Office2007BlueTheme, and Office2007SilverTheme classes, are pixel-perfect themes that can be seamlessly integrated into any Office 2007-like application.","sidebar":"tutorialSidebar"},"datagrid/views-themes/views/01":{"id":"datagrid/views-themes/views/01","title":"Table Views Overview","description":"The TableView class","sidebar":"tutorialSidebar"},"datagrid/views-themes/views/02":{"id":"datagrid/views-themes/views/02","title":"Column Positions and Widths","description":"Through a grid\'s Columns collection, all the columns in a grid can be accessed, regardless of their visibility. To access only the visible columns\u2014those whose Visible property is set to true\u2014the VisibleColumns property can be consulted. The value of a column\'s Index property represents its position within the Columns collection while the visible position of a column can be retrieved through a column\'s VisiblePosition property, which may or may not correspond to the Index property. In addition to the VisiblePosition property, the IsFirstVisible and IsLastVisible properties can be used to determine if a column is the first or last visible column in a grid. A column-manager row\'s AllowColumnReorder property can prevent end users from changing the visible positions of columns; however, programmatic changes to a column\'s visible position can still be made.","sidebar":"tutorialSidebar"},"datagrid/views-themes/views/03":{"id":"datagrid/views-themes/views/03","title":"View Properties","description":"The ViewProperty attribute, which is set on various view properties, determines how or if the view property on which it is set can be accessed through a ViewBinding. If set to None or if the attribute is not set at all, the property cannot be accessed through a ViewBinding. If set to ViewOnly, the property will be accessible through a ViewBinding. Setting the ViewProperty attribute to Routed or RoutedNoFallback, allows an attached property to be accessed through a ViewBinding.","sidebar":"tutorialSidebar"},"datagrid/views-themes/views/04":{"id":"datagrid/views-themes/views/04","title":"Tableflow View: Smooth Scrolling and Other Animated Effects","description":"The Tableflow\u2122 view is represented by the TableflowView class. It differs greatly from the TableView class from which it derives. It provides a rich, fluid, and high performance user experience, featuring a capabilities such as inertial smooth scrolling and animated full-column reordering, which mimic the physics of real-life movement.","sidebar":"tutorialSidebar"},"docking-window-control":{"id":"docking-window-control","title":"Docking window control","description":"AvalonDock provides a system that allow developers to create customizable layouts using a window docking system similar to what is found in many popular integrated development environements (IDEs).","sidebar":"tutorialSidebar"},"getting-started/01":{"id":"getting-started/01","title":"Getting Started","description":"In this section of the documentation, you will find a variety of information and examples to help you get started using Xceed Toolkit Plus for WPF.","sidebar":"tutorialSidebar"},"getting-started/02":{"id":"getting-started/02","title":"Creating Your First Toolkit Plus for WPF Project","description":"In order to use Xceed Toolkit Plus for WPF, .NET Framework 4.0+or .NET5+ must be installed.","sidebar":"tutorialSidebar"},"getting-started/03":{"id":"getting-started/03","title":"Creating Your First Datagrid Project","description":"The installer will copy all the necessary files into the product\'s installation folder (usually in [Installation Folder]\\\\Xceed\\\\Xceed DataGrid for WPF v[VERSION]) as well as place a copy of the Xceed DataGrid for WPF assemblies (Xceed.Wpf.DataGrid.dll) in the global assembly cache.","sidebar":"tutorialSidebar"},"getting-started/04":{"id":"getting-started/04","title":"Creating Your First ListBox Project","description":"Begin by creating a new application from the installed templates. Once the new project is created, the control will be available in the toolbox and can be dragged onto the design surface.","sidebar":"tutorialSidebar"},"getting-started/05":{"id":"getting-started/05","title":"Creating Your First AvalonDock Project","description":"Begin by creating a new application from the installed templates. Once the new project is created, the control will be available in the toolbox and can be dragged onto the design surface.","sidebar":"tutorialSidebar"},"getting-started/06":{"id":"getting-started/06","title":"Licensing","description":"In order to use the controls provided by Xceed Toolkit Plus for WPF in your application, the LicenseKey property of the Licenser class must be set with a valid license key, before any other method of the component is called. If you use an invalid or expired license key, fail to license the control altogether, or license it in the wrong place in your code, an exception will be thrown at run time (see License Exception section below).","sidebar":"tutorialSidebar"},"getting-started/07":{"id":"getting-started/07","title":"LiveExplorer (Sample apps)","description":"The LiveExplorer application, which is installed when the product is installed, contains sample apps and lets you examine the C# code behind and the XAML used to create the samples.","sidebar":"tutorialSidebar"},"getting-started/08":{"id":"getting-started/08","title":"Deploying","description":"When distributing an application that uses Xceed Toolkit Plus for WPF, the Xceed.Wpf.Toolkit.dll assembly must be distributed along with your application and must either be installed into the global assembly cache or placed in the same directory as your executable.","sidebar":"tutorialSidebar"},"listbox/01":{"id":"listbox/01","title":"Listbox control","description":"Xceed\'s WPF listbox control is the perfect drop-in replacement for the standard listbox that behaves the way a listbox should! Thanks to an API that is designed to allow it to fit in to any project using the stock WPF listbox, you\'ll be up and running in no time. But this control gives you so much more than that standard control!","sidebar":"tutorialSidebar"},"listbox/02":{"id":"listbox/02","title":"Providing Data","description":"Xceed Ultimate ListBox provides built-in support for WCF Data and for any local data source that implements IEnumerable. In order to populate a listbox with data items, its ItemsSource property must be bound to a property that exposes the data. Once the data items are loaded into a listbox, they can be grouped, sorted, and searched.","sidebar":"tutorialSidebar"},"listbox/03":{"id":"listbox/03","title":"Custom Data Sources","description":"The DataSourceProvider class allows Xceed\'s listbox controls to support a wide range of data sources. The main purpose of this class is to translate requests from the component into queries to be processed by the data source. The data-source providers can be classified into two distinct categories: synchronous and asynchronous. A data-source provider is considered synchronous if all calls or requests made on it return synchronously.  All other cases are considered asynchronous.","sidebar":"tutorialSidebar"},"listbox/04":{"id":"listbox/04","title":"Filtering Data","description":"The data contained in a listbox can be filtered (searched), programmatically or through end-user interaction, to display a subset of data. Programmatically, data can be filtered through the Filter event, which allows more complex filtering such as comparisons between two fields, by providing a filter expression via the FilterExpression property, or through a combination of both.","sidebar":"tutorialSidebar"},"listbox/05":{"id":"listbox/05","title":"Grouping Data","description":"The data contained in a listbox can be grouped into logical sets through the use of GroupDescription objects. Multiple group descriptions can be added to the GroupDescriptions collection, but items are displayed in \\"flattened\\" groups. For example, given the following XAML, \\"Canada - Moncton\\" might appear in a group header followed by items with that country and city, followed by another group header containing \\"Canada - Montreal.\\"","sidebar":"tutorialSidebar"},"listbox/06":{"id":"listbox/06","title":"Selecting Data","description":"Items in a listbox can be selected both through end-user interactions and programmatically. The SelectionMode property defines how the items in a listbox can be selected through end-user interactions. SelectionMode.Single (default) indicates that only one item can be selected at a time. Multiple indicates that multiple items can be selected without pressing the CTRL or SHIFT modifier keys. Extended indicates that multiple items can be selected by pressing a modifier key.","sidebar":"tutorialSidebar"},"listbox/07":{"id":"listbox/07","title":"Sorting Data","description":"Items in a listbox can be selected both through end-user interactions and programmatically. The SelectionMode property defines how the items in a listbox can be selected through end-user interactions. SelectionMode.Single (default) indicates that only one item can be selected at a time. Multiple indicates that multiple items can be selected without pressing the CTRL or SHIFT modifier keys. Extended indicates that multiple items can be selected by pressing a modifier key.","sidebar":"tutorialSidebar"},"listbox/08":{"id":"listbox/08","title":"Animation Settings","description":"The various animations that occur while scrolling, loading, and manipulating elements in a listbox can be configured through its AnimationSettings property.","sidebar":"tutorialSidebar"},"listbox/09":{"id":"listbox/09","title":"Drag-and-Drop Operations","description":"The ListBox class and the classes contained in the Xceed.Wpf.DragDrop namespace provide support for flexible drag-and-drop operations, through events that determine whether a drop operation can occur (IDropTargetCanDropElement) with an IDropTarget-derived control, as well as events related to entering (IDropTargetDragEnter), leaving (IDropTargetDragLeave), dragging over (IDropTargetDragOver), and dropping on (IDropTargetDrop) an IDropTarget-derived control.","sidebar":"tutorialSidebar"},"listbox/panel-view/01":{"id":"listbox/panel-view/01","title":"The StackPanel and StackView Classes","description":"The StackPanel and StackView classes provide a traditional layout of items in a listbox, yet provide a feel unlike what the stock listbox gives, thanks to the smooth scrolling of items and to its data virtualization, which keeps the application responsive at all times.","sidebar":"tutorialSidebar"},"listbox/panel-view/02":{"id":"listbox/panel-view/02","title":"The PathPanel, PathView, and PathConfiguration Classes","description":"The PathPanel and PathView classes display listbox items along a \\"path,\\" allowing for the creation of unique, eye-catching applications. The settings available for configuring a path make it easy to draw attention to the most important item in the list in a striking fashion (see Configuring the Path below).","sidebar":"tutorialSidebar"},"listbox/panel-view/03":{"id":"listbox/panel-view/03","title":"The MultiViewPanel Class","description":"The MultiViewPanel allows multiple views to be used in an application, which are accessible via its Views property or in XAML via its PanelViewsProperty attached property. Views can be switched easily and automatically, and animations are used to render the change from one view to another.","sidebar":"tutorialSidebar"},"material-controls":{"id":"material-controls","title":"Material controls","description":"The toolkit\'s material controls (see list below) were designed to follow the color palettes and animations defined by the Material Design Specifications.","sidebar":"tutorialSidebar"},"property-grid":{"id":"property-grid","title":"PropertyGrid class","description":"Represents a control that allows users to inspect and edit the properties of an object.","sidebar":"tutorialSidebar"},"themes-usage-instructions":{"id":"themes-usage-instructions","title":"Themes Usage Instructions","description":"Windows Themes","sidebar":"tutorialSidebar"},"welcome":{"id":"welcome","title":"Welcome to Xceed Toolkit Plus for WPF v4.6","description":"Welcome to the documentation for Xceed Toolkit Plus for WPF!","sidebar":"tutorialSidebar"}}}}')}}]);