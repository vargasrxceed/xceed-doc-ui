"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[8093],{6842:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var n=i(4848),t=i(8453),a=i(1470),l=i(9365);const o={title:"Table, Tableflow and TreeGridflow View"},s="Table Views Overview",d={id:"fundamentals/views-themes/views/table-tableflow-treegrid-view/overview",title:"Table, Tableflow and TreeGridflow View",description:"The TableView class",source:"@site/datagrid/fundamentals/views-themes/views/table-tableflow-treegrid-view/overview.md",sourceDirName:"fundamentals/views-themes/views/table-tableflow-treegrid-view",slug:"/fundamentals/views-themes/views/table-tableflow-treegrid-view/overview",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/table-tableflow-treegrid-view/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Table, Tableflow and TreeGridflow View"},sidebar:"sidebardatagrid",previous:{title:"Tips for Improving 3D Performance",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/cardflow-3d-view/tips-for-improving-3d-performance"},next:{title:"Column Positions and Widths",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/views/table-tableflow-treegrid-view/column-position-width"}},c={},h=[{value:"The TableView class",id:"the-tableview-class",level:2},{value:"The TableflowView class",id:"the-tableflowview-class",level:2},{value:"Gridlines and Group Levels",id:"gridlines-and-group-levels",level:2},{value:"Headers and Footers",id:"headers-and-footers",level:2},{value:"Fixing Elements (other than columns)",id:"fixing-elements-other-than-columns",level:2},{value:"Column Virtualization",id:"column-virtualization",level:2},{value:"Examples",id:"examples",level:2}];function u(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components},{Details:o}=r;return o||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"table-views-overview",children:"Table Views Overview"})}),"\n",(0,n.jsx)(r.h2,{id:"the-tableview-class",children:"The TableView class"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"TableView"})," class provides a traditional, non-animated table-view layout for the data items in a grid."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.img,{alt:"TableView",src:i(3971).A+"",width:"325",height:"237"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsxs)(r.em,{children:[(0,n.jsx)(r.strong,{children:"Figure 1"}),": Table-view layout in Aero theme"]})}),"\n",(0,n.jsx)(r.h2,{id:"the-tableflowview-class",children:"The TableflowView class"}),"\n",(0,n.jsx)(r.p,{children:"The Tableflow\u2122 view is represented by the TableflowView class. Although it also provides a table-view layout, it differs greatly from the TableView class from which it derives. It provides a rich, fluid, and high performance user experience, featuring a capabilities such as inertial smooth scrolling and animated full-column reordering\u2014which mimic the physics of real-life movement. For details on these visual features, see Smooth Scrolling and Other Animated Effects."}),"\n",(0,n.jsx)(r.h2,{id:"gridlines-and-group-levels",children:"Gridlines and Group Levels"}),"\n",(0,n.jsxs)(r.p,{children:["The grid lines displayed when a grid is in table-view layout are determined by the ",(0,n.jsx)(r.code,{children:"VerticalGridLineBrush"})," and ",(0,n.jsx)(r.code,{children:"HorizontalGridLineBrush"})," properties, in conjunction with the ",(0,n.jsx)(r.code,{children:"VerticalGridLineThickness"})," and ",(0,n.jsx)(r.code,{children:"HorizontalGridLineThickness"})," properties (see Example 3)."]}),"\n",(0,n.jsxs)(r.p,{children:["The width of the group-level indicators (see Figure 2) can be modified through the ",(0,n.jsx)(r.code,{children:"GroupLevelIndicatorWidth"})," property. The group-level indicators can be hidden by setting the ",(0,n.jsx)(r.code,{children:"ShowIndicators"})," attached property of the ",(0,n.jsx)(r.code,{children:"GroupLevelIndicatorPane"})," to false; however, the space reserved for the indicators in the group-level indicator pane will remain visible and provide the rows with an indentation when they are grouped. To completely remove the group-level indicator pane, a style must be created for ",(0,n.jsx)(r.code,{children:"GroupLevelIndicatorPane"})," objects and the Visibility property set to Collapsed (see Example 4)."]}),"\n",(0,n.jsxs)(r.p,{children:["Through the ",(0,n.jsx)(r.code,{children:"ShowRowSelectorPane"})," property, the row-selector pane (see Figure 3) can be shown or hidden (see Example 3)."]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:(0,n.jsx)(r.img,{alt:"tableViews_Figure2",src:i(6390).A+"",width:"417",height:"326"})}),(0,n.jsx)(r.th,{children:(0,n.jsx)(r.img,{alt:"tableViews_Figure3",src:i(2427).A+"",width:"417",height:"326"})})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.em,{children:[(0,n.jsx)(r.strong,{children:"Figure 2"}),": Group-level indicators"]})}),(0,n.jsx)(r.td,{children:(0,n.jsxs)(r.em,{children:[(0,n.jsx)(r.strong,{children:"Figure 3"}),": Row-selector pane"]})})]})})]}),"\n",(0,n.jsxs)(r.p,{children:["Each theme provides an alternate row color, which can be activated by setting the TableView's ",(0,n.jsx)(r.code,{children:"IsAlternatingRowStyleEnabled"})," property to ",(0,n.jsx)(r.strong,{children:"true"}),". By default, with the exception of the ",(0,n.jsx)(r.strong,{children:"Glass"})," theme, alternating row styles are not enabled."]}),"\n",(0,n.jsx)(r.h2,{id:"headers-and-footers",children:"Headers and Footers"}),"\n",(0,n.jsx)(r.p,{children:"Views define their associated grid's fixed header and fixed footer sections, which are non-scrollable regions usually located at the top and bottom of a grid, and its header and footer sections, which are scrollable regions usually located, respectively, beneath the fixed header and above the fixed footer sections (see Example 1)."}),"\n",(0,n.jsxs)(r.p,{children:["By default, a grid will have a ",(0,n.jsx)(r.code,{children:"HierarhicalGroupByControl"})," and ",(0,n.jsx)(r.code,{children:"ColumnManagerRow"})," in its fixed header section. In XAML, the content of a header, footer, fixed header, and footer sections can be cleared by setting the ",(0,n.jsx)(r.code,{children:"UseDefaultHeadersFooters"})," property of a view to ",(0,n.jsx)(r.strong,{children:"false"})," (see Example 2). If left to ",(0,n.jsx)(r.strong,{children:"true"}),", any items that are added to a header or footer section will be added after the default headers and footers."]}),"\n",(0,n.jsx)(r.admonition,{type:"warning",children:(0,n.jsxs)(r.p,{children:["Setting the ",(0,n.jsx)(r.code,{children:"UseDefaultHeadersFooters"})," property to false will exclude the default header and footer items from all header and footer sections."]})}),"\n",(0,n.jsxs)(r.p,{children:["In code, the collections can be cleared by calling the ",(0,n.jsx)(r.code,{children:"Clear"})," method."]}),"\n",(0,n.jsx)(r.h2,{id:"fixing-elements-other-than-columns",children:"Fixing Elements (other than columns)"}),"\n",(0,n.jsxs)(r.p,{children:["Elements, such as group-by and group-header controls, can also be fixed to prevent them from scrolling with the grid content through the use of the ",(0,n.jsx)(r.code,{children:"CanScrollHorizontally"})," attached property. The ",(0,n.jsx)(r.code,{children:"CanScrollHorizontally"})," attached property has been set to false for the ",(0,n.jsx)(r.code,{children:"GroupByControl"}),", ",(0,n.jsx)(r.code,{children:"HierarchicalGroupByControl"}),",  ",(0,n.jsx)(r.code,{children:"GroupHeaderControl"}),", and ",(0,n.jsx)(r.code,{children:"RowSelectorPane"})," in each table-view theme. If these elements are added manually to a fixed section of a grid in table-view layout, only the ",(0,n.jsx)(r.code,{children:"CanScrollHorizontally"})," property of the group-by control must be explicitly set to false (see Example 6); the group-header control and row-selector pane, by default, already have their ",(0,n.jsx)(r.code,{children:"CanScrollHorizontally"})," property set to false."]}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsxs)(r.p,{children:["Rows\u2014regardless of their type\u2014will ignore the ",(0,n.jsx)(r.code,{children:"CanScrollHorizontally"})," property and scroll with the grid content."]})}),"\n",(0,n.jsx)(r.h2,{id:"column-virtualization",children:"Column Virtualization"}),"\n",(0,n.jsxs)(r.p,{children:["In addition to the built-in container recycling, which applies to all views, the ",(0,n.jsx)(r.code,{children:"TableView"})," class provides column virtualization, meaning that columns and cells that are not visible in the viewport are not created until they are brought into the viewport or accessed. How column virtualization is managed, is determined by the value of the ColumnVirtualizationMode property."]}),"\n",(0,n.jsxs)(r.p,{children:["If having a low memory consumption is important in your environment, ",(0,n.jsx)(r.strong,{children:"Recycling"})," mode is the one to use, because cells will be created only for columns that are in view, and will be reused (thus recycled) between columns as new columns are scrolled into view."]}),"\n",(0,n.jsxs)(r.p,{children:["If horizontal scrolling performance is more important, choose the ",(0,n.jsx)(r.strong,{children:"Virtualizing"}),' mode.  In this mode, all cells are created in advance, and assigned to a specific column.  Thus when a column is scrolled into view, the cost of preparing the cell is minimal, since it is already associated to the column.  When scrolling is done, though cells are still associated to a column, they are "virtualized" (put in a non-available state) as if they had not been created, and thus the DataGrid performance is preserved in other scenarios (e.g. live updating, vertical scrolling, group expending/collapsing) because the UI is still virtualized as when recycling.']}),"\n",(0,n.jsx)(r.p,{children:"If memory and speed is not a concern, but cell availability is important, then use the None mode, as this will create all cells, and maintain them in a valid state at all times."}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsxs)(r.p,{children:["By default, a grid will take all the room that it requires; therefore, if it is not given a size constraint, such as when it is placed in a ",(0,n.jsx)(r.strong,{children:"StackPanel"}),", and a large amount of data items are present, UI virtualization will be lost\u2014resulting in a significant loss in performance. To preserve virtualization when a grid is in a StackPanel, the ",(0,n.jsx)(r.strong,{children:"MaxWidth"})," and ",(0,n.jsx)(r.strong,{children:"MaxHeight"})," properties (or ",(0,n.jsx)(r.strong,{children:"Width"})," and ",(0,n.jsx)(r.strong,{children:"Height"}),") must be used to constrain the grid. As an alternative, a ",(0,n.jsx)(r.strong,{children:"DockPanel"})," or ",(0,n.jsx)(r.strong,{children:"Grid"})," can be used as both impose size constraints on their child elements."]})}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 1: Adding an InsertionRow to the fixed headers"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to add an InsertionRow to the fixed header section of a grid."}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView>\r\n\r\n          <xcdg:TableView.FixedHeaders>\r\n              <DataTemplate>\r\n                <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n          </xcdg:TableView.FixedHeaders>\r\n        </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 2: Clearing a fixed header section"}),(0,n.jsxs)(r.p,{children:["The following example demonstrates how to clear the content of all header and footer sections of a grid using its view's ",(0,n.jsx)(r.strong,{children:"UseDefaultHeadersFooters"})," property."]}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:CardView UseDefaultHeadersFooters="False"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,n.jsx)(l.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"CardView view = new CardView();\r\nview.UseDefaultHeadersFooters = false;\r\ndataGridControl.View = view;\n"})})}),(0,n.jsx)(l.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Dim view As New CardView()\r\n  view.UseDefaultHeadersFooters = False\r\n  dataGridControl.View = view\n"})})})]})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 3: Adding vertical and horizontal grid lines"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to add vertical and horizontal grid lines to a grid in table-view layout. A style for the ColumnManagerRow objects has been added to the resources to remove the horizontal grid line drawn above the column-manager row in the fixed headers."}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n        <Style TargetType="{x:Type xcdg:ColumnManagerRow}">\r\n          <Setter Property="BorderThickness" Value="0"/>\r\n        </Style>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>   \r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.View>\r\n\r\n          <xcdg:TableView HorizontalGridLineThickness="1" VerticalGridLineThickness="1">\r\n            <xcdg:TableView.HorizontalGridLineBrush>\r\n                <SolidColorBrush Color="Orange"/>\r\n            </xcdg:TableView.HorizontalGridLineBrush>\r\n            <xcdg:TableView.VerticalGridLineBrush>\r\n                <SolidColorBrush Color="Orange"/>\r\n            </xcdg:TableView.VerticalGridLineBrush>\r\n          </xcdg:TableView> \r\n        </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,n.jsx)(l.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"TableView view = new TableView();\r\nview.HorizontalGridLineThickness = 1;\r\nview.VerticalGridLineThickness = 1;\r\n\r\nview.HorizontalGridLineBrush = Brushes.Orange;\r\nview.VerticalGridLineBrush = Brushes.Orange;\r\n\r\ndataGridControl.View = view;\n"})})}),(0,n.jsx)(l.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"Dim view As New TableView()\r\nview.HorizontalGridLineThickness = 1\r\nview.VerticalGridLineThickness = 1\r\n\r\nview.HorizontalGridLineBrush = Brushes.Orange\r\nview.VerticalGridLineBrush = Brushes.Orange\r\n\r\ndataGridControl.View = view\n"})})})]})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 4: Hiding the group-level indicator pane"}),(0,n.jsxs)(r.p,{children:["The following example demonstrates how to hide the group-level indicator pane by creating a style which sets the ",(0,n.jsx)(r.code,{children:"Visibility"})," property of ",(0,n.jsx)(r.code,{children:"GroupLevelIndicatorPane"})," objects to ",(0,n.jsx)(r.strong,{children:"Collapsed"}),"."]}),(0,n.jsx)(a.A,{children:(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <Style TargetType="{x:Type xcdg:GroupLevelIndicatorPane}">\r\n      <Setter Property="Visibility" Value="Collapsed"/>\r\n    </Style>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})})})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 5: Hiding the row-selector pane"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to hide the row-selector pane."}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView ShowRowSelectorPane="False"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,n.jsx)(l.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"  TableView view = new TableView();\r\n  view.ShowRowSelectorPane = false;\r\n  dataGridControl.View = view;\n"})})}),(0,n.jsx)(l.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Dim view As New TableView()\r\n  view.ShowRowSelectorPane = False\r\n  dataGridControl.View = view\n"})})})]})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 6: Allowing horizontal scrolling"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to prevent horizontal scrolling of the group-by control in the fixed header section."}),(0,n.jsx)(a.A,{children:(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView UseDefaultHeadersFooters="False">\r\n          <xcdg:TableView.FixedHeaders>\r\n            <DataTemplate>\r\n              <xcdg:GroupByControl xcdg:TableView.CanScrollHorizontally="True"/>\r\n            </DataTemplate>\r\n            <DataTemplate>\r\n              <xcdg:ColumnManagerRow/>\r\n            </DataTemplate>\r\n          </xcdg:TableView.FixedHeaders>\r\n        </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})})})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Example 7: Using routed view properties"}),(0,n.jsx)(r.p,{children:"The following example demonstrates how to set routed view properties on detail configurations to change the width of their detail indicators as well as to fix columns and remove the fixed-column splitter."}),(0,n.jsxs)(a.A,{children:[(0,n.jsx)(l.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'    <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n          xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                            Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Employees}" />\r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                          AutoCreateDetailConfigurations="True">\r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="Photo"\r\n                        Visible="False" />\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.DetailConfigurations>\r\n            <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                      Title="Employee Orders"\r\n                                      xcdg:TableView.DetailIndicatorWidth="50"\r\n                                      xcdg:TableView.FixedColumnCount="2">\r\n              <xcdg:DetailConfiguration.Columns>\r\n                  <xcdg:Column FieldName="EmployeeID"\r\n                              Visible="False" />\r\n              </xcdg:DetailConfiguration.Columns>\r\n              <xcdg:DetailConfiguration.DetailConfigurations>\r\n                  <xcdg:DetailConfiguration RelationName="Order_OrderDetails"\r\n                                            Title="Order Details"\r\n                                            xcdg:TableView.ShowFixedColumnSplitter="False"\r\n                                            xcdg:TableView.DetailIndicatorWidth="50"/>\r\n              </xcdg:DetailConfiguration.DetailConfigurations>\r\n            </xcdg:DetailConfiguration>\r\n        </xcdg:DataGridControl.DetailConfigurations>\r\n      </xcdg:DataGridControl>\r\n    </Grid>\n'})})}),(0,n.jsx)(l.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:'  dataGridControl.AutoCreateDetailConfigurations = true;\r\n  dataGridControl.Columns[ "Photo" ].Visible = false;\r\n  DetailConfiguration detailConfiguration = new DetailConfiguration();\r\n  detailConfiguration.RelationName = "Employee_Orders";\r\n  detailConfiguration.Title = "Employee Orders";\r\n  detailConfiguration.Columns[ "EmployeeID" ].Visible = false;\r\n  detailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 );\r\n  detailConfiguration.SetValue( TableView.FixedColumnCountProperty, 2 );\r\n  DetailConfiguration childDetailConfiguration = new DetailConfiguration();\r\n  childDetailConfiguration.RelationName = "Order_OrderDetails";\r\n  childDetailConfiguration.Title = "Order Details";\r\n  childDetailConfiguration.SetValue( TableView.ShowFixedColumnSplitterProperty, false );\r\n  childDetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 );\r\n  detailConfiguration.DetailConfigurations.Add( childDetailConfiguration );\r\n  dataGridControl.DetailConfigurations.Add( detailConfiguration );\n'})})}),(0,n.jsx)(l.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:'  dataGridControl.AutoCreateDetailConfigurations = True\r\n  dataGridControl.Columns( "Photo" ).Visible = False\r\n  Dim detailConfiguration As New DetailConfiguration()\r\n  detailConfiguration.RelationName = "Employee_Orders"\r\n  detailConfiguration.Title = "Employee Orders"\r\n  detailConfiguration.Columns( "EmployeeID" ).Visible = False\r\n  detailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 )\r\n  detailConfiguration.SetValue( TableView.FixedColumnCountProperty, 2 )\r\n  Dim childDetailConfiguration As New DetailConfiguration()\r\n  childDetailConfiguration.RelationName = "Order_OrderDetails"\r\n  childDetailConfiguration.Title = "Order Details"\r\n  childDetailConfiguration.SetValue( TableView.ShowFixedColumnSplitterProperty, false )\r\n  childDetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 )\r\n  detailConfiguration.DetailConfigurations.Add( childDetailConfiguration )\r\n  dataGridControl.DetailConfigurations.Add( detailConfiguration )\n'})})})]})]})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},9365:(e,r,i)=>{i.d(r,{A:()=>l});i(6540);var n=i(4164);const t={tabItem:"tabItem_Ymn6"};var a=i(4848);function l(e){let{children:r,hidden:i,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,n.A)(t.tabItem,l),hidden:i,children:r})}},1470:(e,r,i)=>{i.d(r,{A:()=>C});var n=i(6540),t=i(4164),a=i(3104),l=i(6347),o=i(205),s=i(7485),d=i(1682),c=i(679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:i}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:i,attributes:n,default:t}}=e;return{value:r,label:i,attributes:n,default:t}}))}(i);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,i])}function g(e){let{value:r,tabValues:i}=e;return i.some((e=>e.value===r))}function x(e){let{queryString:r=!1,groupId:i}=e;const t=(0,l.W6)(),a=function(e){let{queryString:r=!1,groupId:i}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:r,groupId:i});return[(0,s.aZ)(a),(0,n.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(t.location.search);r.set(a,e),t.replace({...t.location,search:r.toString()})}),[a,t])]}function m(e){const{defaultValue:r,queryString:i=!1,groupId:t}=e,a=u(e),[l,s]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=i.find((e=>e.default))??i[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:a}))),[d,h]=x({queryString:i,groupId:t}),[m,p]=function(e){let{groupId:r}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,a]=(0,c.Dv)(i);return[t,(0,n.useCallback)((e=>{i&&a.set(e)}),[i,a])]}({groupId:t}),w=(()=>{const e=d??m;return g({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{w&&s(w)}),[w]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),h(e),p(e)}),[h,p,a]),tabValues:a}}var p=i(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=i(4848);function b(e){let{className:r,block:i,selectedValue:n,selectValue:l,tabValues:o}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const r=e.currentTarget,i=s.indexOf(r),t=o[i].value;t!==n&&(d(r),l(t))},h=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=s.indexOf(e.currentTarget)+1;r=s[i]??s[0];break}case"ArrowLeft":{const i=s.indexOf(e.currentTarget)-1;r=s[i]??s[s.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":i},r),children:o.map((e=>{let{value:r,label:i,attributes:a}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>s.push(e),onKeyDown:h,onClick:c,...a,className:(0,t.A)("tabs__item",w.tabItem,a?.className,{"tabs__item--active":n===r}),children:i??r},r)}))})}function v(e){let{lazy:r,children:i,selectedValue:a}=e;const l=(Array.isArray(i)?i:[i]).filter(Boolean);if(r){const e=l.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function j(e){const r=m(e);return(0,f.jsxs)("div",{className:(0,t.A)("tabs-container",w.tabList),children:[(0,f.jsx)(b,{...r,...e}),(0,f.jsx)(v,{...r,...e})]})}function C(e){const r=(0,p.A)();return(0,f.jsx)(j,{...e,children:h(e.children)},String(r))}},3971:(e,r,i)=>{i.d(r,{A:()=>n});const n=i.p+"assets/images/TableView_thumb-c6b21a64e364f78848cb26ade991cee6.png"},6390:(e,r,i)=>{i.d(r,{A:()=>n});const n=i.p+"assets/images/tableViews_Figure2_thumb-0074fe172d7f92f9391a70294af0e4de.gif"},2427:(e,r,i)=>{i.d(r,{A:()=>n});const n=i.p+"assets/images/tableViews_Figure3_thumb-c92c0204775b25608186d7948bcbe78b.gif"},8453:(e,r,i)=>{i.d(r,{R:()=>l,x:()=>o});var n=i(6540);const t={},a=n.createContext(t);function l(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);