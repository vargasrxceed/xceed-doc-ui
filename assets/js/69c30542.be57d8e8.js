"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1745],{7610:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var n=t(4848),a=t(8453),o=t(1470),i=t(9365);const l={},s="Customizing Views and Themes",d={id:"code-snippets/05",title:"Customizing Views and Themes",description:"The following page provides a list of examples that demonstrate how to set a view and theme. For more view- and theme-related information.",source:"@site/datagrid/code-snippets/05.md",sourceDirName:"code-snippets",slug:"/code-snippets/05",permalink:"/xceed-doc-ui/datagrid/code-snippets/05",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Creating Custom Cell Editors",permalink:"/xceed-doc-ui/datagrid/code-snippets/04"},next:{title:"Customizing Cardflow 3D Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/06"}},c={},u=[{value:"Setting a view and theme through attribute syntax",id:"setting-a-view-and-theme-through-attribute-syntax",level:3},{value:"Setting a view and theme through property element syntax",id:"setting-a-view-and-theme-through-property-element-syntax",level:3},{value:"Displaying a scroll tip",id:"displaying-a-scroll-tip",level:3},{value:"Enabling the column chooser",id:"enabling-the-column-chooser",level:3}];function m(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"customizing-views-and-themes",children:"Customizing Views and Themes"})}),"\n",(0,n.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to set a view and theme. For more view- and theme-related information."}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,n.jsx)(r.em,{children:"Orders"})," table of the Northwind database, unless stated otherwise."]})}),"\n",(0,n.jsx)(r.h3,{id:"setting-a-view-and-theme-through-attribute-syntax",children:"Setting a view and theme through attribute syntax"}),"\n",(0,n.jsx)(r.p,{children:"The following examples demonstrates how to use attribute syntax to apply a card-view layout, with the normal-color Aero theme, to a grid."}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                        View="CardView.Zune.NormalColor"/>\r\n</Grid>\n'})})}),(0,n.jsx)(i.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"  CardView view = new CardView();\r\n  view.Theme = new ZuneNormalColorTheme();\r\n  dataGridControl.View = view;\n"})})}),(0,n.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Dim view As New CardView()\r\n  view.Theme = New ZuneNormalColorTheme()\r\n  dataGridControl.View = view\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"setting-a-view-and-theme-through-property-element-syntax",children:"Setting a view and theme through property element syntax"}),"\n",(0,n.jsx)(r.p,{children:"The following examples demonstrates how to use property element syntax to apply a card-view layout, with the normal-color Aero theme, to a grid."}),"\n",(0,n.jsxs)(o.A,{children:[(0,n.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.View>\r\n        <xcdg:CardView>\r\n          <xcdg:CardView.Theme>\r\n              <xcdg:ZuneNormalColorTheme/>\r\n          </xcdg:CardView.Theme>\r\n        </xcdg:CardView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,n.jsx)(i.A,{value:"csharp",label:"C#",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"  CardView view = new CardView();\r\n  view.Theme = new ZuneNormalColorTheme();\r\n  dataGridControl.View = view;\n"})})}),(0,n.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-vbnet",children:"  Dim view As New CardView()\r\n  view.Theme = New ZuneNormalColorTheme()\r\n  dataGridControl.View = view\n"})})})]}),"\n",(0,n.jsx)(r.h3,{id:"displaying-a-scroll-tip",children:"Displaying a scroll tip"}),"\n",(0,n.jsx)(r.p,{children:"The following example demonstrates how to display a scroll tip whose content and location have been modified."}),"\n",(0,n.jsxs)(r.p,{children:['The "flagConverter" resource represents a converter that is used to return the appropriate ',(0,n.jsx)(r.strong,{children:"BitmapImage"})," according to the value of the ",(0,n.jsx)(r.em,{children:"ShipCountry"})," cell."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid>\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"\r\n                                       AutoCreateItemProperties="False">\r\n      <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n        <xcdg:DataGridItemProperty Name="ShipCountry"/>\r\n        <xcdg:DataGridItemProperty Name="ShipCity"/>\r\n        <xcdg:DataGridItemProperty Name="ShipAddress"/>\r\n        <xcdg:DataGridItemProperty Name="ShipPostalCode"/>\r\n        <xcdg:DataGridItemProperty Name="ShipName"/>\r\n        <xcdg:DataGridItemProperty Name="OrderDate"/>\r\n        <xcdg:DataGridItemProperty Name="ShippedDate"/>\r\n        <xcdg:DataGridItemProperty Name="Freight"/>\r\n        </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    <local:FlagPathConverter x:Key="flagConverter"/>\r\n    <Style TargetType="{x:Type xcdg:ScrollTip}">\r\n      <Setter Property="HorizontalAlignment"\r\n              Value="Center"/>\r\n      <Setter Property="VerticalAlignment"\r\n              Value="Center"/>\r\n      <Setter Property="Width"\r\n              Value="150"/>\r\n      <Setter Property="Height"\r\n              Value="125"/>\r\n    </Style>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="ShipCountry"\r\n                   IsMainColumn="True">\r\n        <xcdg:Column.CellContentTemplate>\r\n          <DataTemplate>\r\n            <Image Source="{Binding Converter={StaticResource flagConverter}}"\r\n                   StretchDirection="DownOnly"/>\r\n          </DataTemplate>\r\n        </xcdg:Column.CellContentTemplate>\r\n      </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:TableView ShowScrollTip="True">\r\n        <xcdg:TableView.ScrollTipContentTemplate>\r\n          <DataTemplate>\r\n            <Grid>\r\n              <Image Source="{Binding Path=[ShipCountry], Converter={StaticResource flagConverter}}"/>\r\n              <TextBlock Text="{Binding Path=[ShipCountry]}"\r\n                         FontSize="14"\r\n                         FontWeight="UltraBold"\r\n                         HorizontalAlignment="Center"\r\n                         VerticalAlignment="Center"/>\r\n           </Grid>\r\n          </DataTemplate>\r\n        </xcdg:TableView.ScrollTipContentTemplate>\r\n      </xcdg:TableView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,n.jsx)(r.h3,{id:"enabling-the-column-chooser",children:"Enabling the column chooser"}),"\n",(0,n.jsx)(r.p,{children:"The following example demonstrates how to enable the column chooser and change the sort order of the column names it displays."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n     <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n     <xcdg:DataGridControl.Columns>\r\n       <xcdg:Column FieldName="OrderID"\r\n                    ShowInColumnChooser="False" />\r\n        <xcdg:Column FieldName="EmployeeID"\r\n                     Visible="False" />\r\n        <xcdg:Column FieldName="CustomerID"\r\n                     Visible="False" />\r\n        <xcdg:Column FieldName="ShipVia"\r\n                     Visible="False" />\r\n     </xcdg:DataGridControl.Columns>\r\n     <xcdg:DataGridControl.View>\r\n       <xcdg:TableView AllowColumnChooser="True"\r\n                       ColumnChooserSortOrder="TitleAscending" />\r\n     </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},9365:(e,r,t)=>{t.d(r,{A:()=>i});t(6540);var n=t(4164);const a={tabItem:"tabItem_Ymn6"};var o=t(4848);function i(e){let{children:r,hidden:t,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,i),hidden:t,children:r})}},1470:(e,r,t)=>{t.d(r,{A:()=>y});var n=t(6540),a=t(4164),o=t(3104),i=t(6347),l=t(205),s=t(7485),d=t(1682),c=t(679);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:a}}=e;return{value:r,label:t,attributes:n,default:a}}))}(t);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function h(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:t}=e;const a=(0,i.W6)(),o=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,s.aZ)(o),(0,n.useCallback)((e=>{if(!o)return;const r=new URLSearchParams(a.location.search);r.set(o,e),a.replace({...a.location,search:r.toString()})}),[o,a])]}function g(e){const{defaultValue:r,queryString:t=!1,groupId:a}=e,o=m(e),[i,s]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:o}))),[d,u]=p({queryString:t,groupId:a}),[g,x]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,o]=(0,c.Dv)(t);return[a,(0,n.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),w=(()=>{const e=d??g;return h({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{w&&s(w)}),[w]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),x(e)}),[u,x,o]),tabValues:o}}var x=t(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=t(4848);function v(e){let{className:r,block:t,selectedValue:n,selectValue:i,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),c=e=>{const r=e.currentTarget,t=s.indexOf(r),a=l[t].value;a!==n&&(d(r),i(a))},u=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;r=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;r=s[t]??s[s.length-1];break}}r?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},r),children:l.map((e=>{let{value:r,label:t,attributes:o}=e;return(0,C.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>s.push(e),onKeyDown:u,onClick:c,...o,className:(0,a.A)("tabs__item",w.tabItem,o?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function b(e){let{lazy:r,children:t,selectedValue:o}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===o));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==o})))})}function f(e){const r=g(e);return(0,C.jsxs)("div",{className:(0,a.A)("tabs-container",w.tabList),children:[(0,C.jsx)(v,{...r,...e}),(0,C.jsx)(b,{...r,...e})]})}function y(e){const r=(0,x.A)();return(0,C.jsx)(f,{...e,children:u(e.children)},String(r))}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>l});var n=t(6540);const a={},o=n.createContext(a);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);