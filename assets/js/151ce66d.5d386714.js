"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[3062],{2465:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=o(4848),n=o(8453);const i={},a="Other Classes",s={id:"datagrid/other-classes",title:"Other Classes",description:"The other topics discussed in this book deal with the major classes that compose Xceed DataGrid for WPF; however, there are other classes that also play a part in every grid.",source:"@site/docs/datagrid/other-classes.md",sourceDirName:"datagrid",slug:"/datagrid/other-classes",permalink:"/xceed-doc-ui/docs/datagrid/other-classes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DataGridCollectionView Class",permalink:"/xceed-doc-ui/docs/datagrid/datagridcollectionview-class"},next:{title:"Manipulating data",permalink:"/xceed-doc-ui/docs/category/manipulating-data"}},d={},c=[{value:"Grouping-related Classes",id:"grouping-related-classes",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"other-classes",children:"Other Classes"})}),"\n",(0,r.jsx)(t.p,{children:"The other topics discussed in this book deal with the major classes that compose Xceed DataGrid for WPF; however, there are other classes that also play a part in every grid."}),"\n",(0,r.jsx)(t.h2,{id:"grouping-related-classes",children:"Grouping-related Classes"}),"\n",(0,r.jsxs)(t.p,{children:["When the content of a grid is grouped, complementary information on the group descriptions can be retrieved through a grid's ",(0,r.jsx)(t.code,{children:"GroupLevelDescriptions"})," property, which contains a ",(0,r.jsx)(t.code,{children:"GroupLevelDescription"})," object for each group level, such as the field name of the column whose values were used to create the groups as well as information on the data template that was used to create the Title for the specific group level."]}),"\n",(0,r.jsxs)(t.p,{children:["By default, when a ",(0,r.jsx)(t.code,{children:"DataGridControl"})," is created it contains a ",(0,r.jsx)(t.code,{children:"HierarchicalGroupByControl"})," in its fixed headers section. The group-by control provides a condensed view of the group levels and allows end users to modify the group descriptions applied to a grid and any existing details. Each group level is represented by a ",(0,r.jsx)(t.code,{children:"HierarchicalGroupByItem"})," that can be used to change the order of the groups, sort the data items, or remove the groups altogether. In addition, group-by items can be consulted to know if it is being dragged\u2014to change the order or remove groups\u2014through the ",(0,r.jsx)(t.code,{children:"IsBeingDragged"})," property, while the ",(0,r.jsx)(t.code,{children:"SortDirection"})," property can be used to retrieve the direction in which its associated column is sorted."]}),"\n",(0,r.jsxs)(t.p,{children:["How the group-by items are displayed in a group-by control depends on the values of various properties exposed by the group-by control. These include the ",(0,r.jsx)(t.code,{children:"ConnectionLineAlignment"}),", ",(0,r.jsx)(t.code,{children:"ConnectionLineOffset"}),", ",(0,r.jsx)(t.code,{children:"ConnectionLinePen"}),", ",(0,r.jsx)(t.code,{children:"StairHeight"}),", and ",(0,r.jsx)(t.code,{children:"StairSpacing"})," properties, which define the appearance of the connection lines and the space between the group-by items. When a grid or detail does not contain groups, the value of the ",(0,r.jsx)(t.code,{children:"NoGroupContent"})," property will be displayed in the group-by control."]}),"\n",(0,r.jsxs)(t.p,{children:["If a ",(0,r.jsx)(t.code,{children:"ColumnManagerRow"})," (see Figure 4 in ",(0,r.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/grouping-data/01",children:"Grouping Data"}),") is present in a grid or detail, its cells (",(0,r.jsx)(t.code,{children:"ColumnManagerCell"}),") can be dragged onto a group-by control to create an additional group level in a grid or detail. A column-manager cell's ",(0,r.jsx)(t.code,{children:"IsBeingDragged"})," property can be consulted to know if it is being dragged to change the order of the columns or create new groups, while the ",(0,r.jsx)(t.code,{children:"IsPressed"})," property can be used to know if a column is being sorted. End users can be prevented from modifying the existing group levels and sorting criteria through the group-by control's ",(0,r.jsx)(t.code,{children:"AllowGroupingModification"})," and ",(0,r.jsx)(t.code,{children:"AllowSort"})," properties respectively; however, grouping and sorting modifications can still be made programmatically, regardless of the value of the ",(0,r.jsx)(t.code,{children:"AllowGroupingModification"})," and ",(0,r.jsx)(t.code,{children:"AllowSort"})," properties."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"GroupLevelIndicators"})," indicate the number of group levels in a grid and are contained in a ",(0,r.jsx)(t.code,{children:"GroupLevelIndicatorPane"}),". The width of the group-level indicators, when a grid is in a table view, can be modified through the ",(0,r.jsx)(t.code,{children:"GroupLevelIndicatorWidth"})," property (see ",(0,r.jsx)(t.a,{href:"/docs/datagrid/views-themes/views/01",children:"Table Views Overview"}),"). The group-level indicators can be hidden by setting the ",(0,r.jsx)(t.code,{children:"ShowIndicators"})," attached property of the group-level-indicator pane to ",(0,r.jsx)(t.strong,{children:"false"}),", on the container or in the container's template whose corresponding indicators are to be hidden."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"HierarchicalGroupLevelIndicatorPanes"})," are used in conjunction with the ",(0,r.jsx)(t.code,{children:"GroupLevelIndicatorPanes"})," when data items in a detail are grouped,. These panes contain pairs of ",(0,r.jsx)(t.code,{children:"GroupLevelIndicatorPanes"})," and ",(0,r.jsx)(t.code,{children:"DetailIndicators"})," that indicate the number of group levels and details, while the standard group-level-indicator pane indicates the group level information of its detail/context."]}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.code,{children:"GroupHeaderControl"})," represents the control used as a group header, which is used to expand and collapse its associated group, as well as display information on the group's content, including the value that caused the group to be created, following the data template that was used to create a group's Title. The realized runtime group associated with a group-header control can be retrieved through its Group property. A group's ",(0,r.jsx)(t.code,{children:"Level"})," property indicates to which group level a realized group belongs while the ",(0,r.jsx)(t.code,{children:"IsBottomLevel"})," property can be consulted to immediately know if the group belongs to the last group level\u2014the groups which contain the data items. The ",(0,r.jsx)(t.code,{children:"ItemCount"})," property will return the number of the data items contained in a bottom-level group. In contrast, a group's parent groups can be retrieved through the ParentGroups property; however, if consulted for a top-level group ",(0,r.jsx)(t.strong,{children:"null"})," (",(0,r.jsx)(t.strong,{children:"Nothing"})," in Visual Basic) will be returned. The SiblingGroups property returns the groups that are at the same level as the caller. Lastly, the ",(0,r.jsx)(t.code,{children:"IsExpanded"})," property indicates whether a group is expanded or collapsed."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.strong,{children:["For more information on grouping, refer to the ",(0,r.jsx)(t.a,{href:"/docs/datagrid/manipulating-data/grouping-data/01",children:"Grouping Data"})," topic."]})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var r=o(6540);const n={},i=r.createContext(n);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);