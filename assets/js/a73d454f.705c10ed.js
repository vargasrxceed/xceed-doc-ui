"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7049],{4154:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var o=n(4848),t=n(8453),i=n(1470),a=n(9365);const l={},c="Grouping Data Items",s={id:"code-snippets/16",title:"Grouping Data Items",description:"The following page provides a list of examples that demonstrate how to group data items.",source:"@site/datagrid/code-snippets/16.md",sourceDirName:"code-snippets",slug:"/code-snippets/16",permalink:"/xceed-doc-ui/datagrid/code-snippets/16",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Filtering Data Items",permalink:"/xceed-doc-ui/datagrid/code-snippets/15"},next:{title:"Handling collection-changed events",permalink:"/xceed-doc-ui/datagrid/code-snippets/17"}},d={},u=[{value:"Grouping data items",id:"grouping-data-items-1",level:3},{value:"Preventing group and sorting",id:"preventing-group-and-sorting",level:3},{value:"Defining a default group configuration",id:"defining-a-default-group-configuration",level:3},{value:"Programmatically toggling group expansion",id:"programmatically-toggling-group-expansion",level:3},{value:"Custom grouping",id:"custom-grouping",level:3},{value:"Changing the group-header text",id:"changing-the-group-header-text",level:3},{value:"Providing a group-configuration selector",id:"providing-a-group-configuration-selector",level:3},{value:"Creating a group-configuration selector",id:"creating-a-group-configuration-selector",level:3}];function p(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"grouping-data-items",children:"Grouping Data Items"})}),"\n",(0,o.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to group data items."}),"\n",(0,o.jsx)(r.admonition,{type:"tip",children:(0,o.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."})}),"\n",(0,o.jsx)(r.h3,{id:"grouping-data-items-1",children:"Grouping data items"}),"\n",(0,o.jsxs)(r.p,{children:["The following example demonstrates how to group the data items by the ",(0,o.jsx)(r.em,{children:"ShipCountry"})," and ",(0,o.jsx)(r.em,{children:"ShipCity"})," columns."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">       \r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>         \r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    \r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">     \r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders );\r\ncollectionView.GroupDescriptions.Add( new DataGridGroupDescription( "ShipCountry" ) );\r\ncollectionView.GroupDescriptions.Add( new DataGridGroupDescription( "ShipCity" ) );\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders )\r\ncollectionView.GroupDescriptions.Add( New DataGridGroupDescription( "ShipCountry" ) )\r\ncollectionView.GroupDescriptions.Add( New DataGridGroupDescription( "ShipCity" ) )\r\ndataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,o.jsx)(r.h3,{id:"preventing-group-and-sorting",children:"Preventing group and sorting"}),"\n",(0,o.jsxs)(r.p,{children:["The following example demonstrates how to bind a grid to the ",(0,o.jsx)(r.em,{children:"Orders"})," table and prevent columns from being sorted and reordered and groups from being created or removed. By default, the ",(0,o.jsx)(r.em,{children:"ShipCountry"})," and ",(0,o.jsx)(r.em,{children:"ShipCity"})," columns will be sorted, grouped, and fixed."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:d="clr-namespace:System.Windows.Data;assembly=PresentationFramework"\r\n      xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n        <scm:SortDescription PropertyName="ShipCountry" Direction="Ascending"/>\r\n        <scm:SortDescription PropertyName="ShipCity" Direction="Ascending"/>\r\n      </xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">      \r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="ShipCountry" VisiblePosition="0"/>\r\n      <xcdg:Column FieldName="ShipCity" VisiblePosition="1"/>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:TableView FixedColumnCount="2" UseDefaultHeadersFooters="False">\r\n        <xcdg:TableView.FixedHeaders>\r\n          <DataTemplate>\r\n            <xcdg:GroupByControl AllowSort="False" AllowGroupingModification="False"/>\r\n          </DataTemplate>\r\n          <DataTemplate>\r\n            <xcdg:ColumnManagerRow AllowSort="False" AllowColumnReorder="False"/>\r\n          </DataTemplate>\r\n        </xcdg:TableView.FixedHeaders>\r\n      </xcdg:TableView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,o.jsx)(r.h3,{id:"defining-a-default-group-configuration",children:"Defining a default group configuration"}),"\n",(0,o.jsx)(r.p,{children:"The following example demonstrates how to provide a default group configuration."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n        <xcdg:GroupConfiguration>\r\n          <xcdg:GroupConfiguration.Footers>\r\n            <DataTemplate>\r\n              <xcdg:InsertionRow/>\r\n            </DataTemplate>\r\n          </xcdg:GroupConfiguration.Footers>\r\n        </xcdg:GroupConfiguration>\r\n      </xcdg:DataGridControl.DefaultGroupConfiguration>      \r\n    </xcdg:DataGridControl> \r\n  </Grid>\n'})}),"\n",(0,o.jsx)(r.h3,{id:"programmatically-toggling-group-expansion",children:"Programmatically toggling group expansion"}),"\n",(0,o.jsxs)(r.p,{children:["The following example demonstrates how to handle the ",(0,o.jsx)(r.code,{children:"PreviewMouseLeftButtonDown"})," event on the ",(0,o.jsx)(r.code,{children:"GroupHeaderControl"})," objects contained in the headers of the child groups to toggle the expansion state of child groups using the ",(0,o.jsx)(r.code,{children:"ToggleGroupExpansion"})," method. The group whose state is to be toggled will be retrieved using the ",(0,o.jsx)(r.code,{children:"GetParentGroupFromItem"})," method."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n      <Style TargetType="{x:Type xcdg:GroupHeaderControl}">\r\n        <EventSetter Event="PreviewMouseLeftButtonDown"\r\n                    Handler="HeaderDown"/>\r\n      </Style>  \r\n  </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})}),(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:"  private void HeaderDown( object sender, MouseEventArgs e )\r\n  {\r\n    GroupHeaderControl headerControl = sender as GroupHeaderControl;\r\n    if( headerControl == null )\r\n      return;\r\n    DataGridContext context = DataGridControl.GetDataGridContext( headerControl );\r\n    object item = context.GetItemFromContainer( headerControl );\r\n    if( item != null )\r\n    {\r\n      CollectionViewGroup group = context.GetParentGroupFromItem( item );\r\n      if( group != null )\r\n      {\r\n        context.ToggleGroupExpansion( group );\r\n      }\r\n    }\r\n  }\n"})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:"  Private Sub HeaderDown( ByVal sender As Object, ByVal e As MouseButtonEventArgs )\r\n    Dim headerControl As GroupHeaderControl = TryCast( sender, GroupHeaderControl );\r\n    If headerControl Is Nothing Then\r\n      Return\r\n    End If\r\n    Dim context As DataGridContext = DataGridControl.GetDataGridContext( headerControl )\r\n    Dim item As Object = context.GetItemFromContainer( headerControl ) )\r\n    If Not item Is Nothing Then\r\n      Dim group As CollectionViewGroup = context.GetParentGroupFromItem( item )\r\n      If Not group Is Nothing\r\n        context.ToggleGroupExpansion( group )\r\n      End If\r\n    End If\r\n  End Sub\n"})})})]}),"\n",(0,o.jsx)(r.h3,{id:"custom-grouping",children:"Custom grouping"}),"\n",(0,o.jsxs)(r.p,{children:["This example demonstrates how to create a custom group description by deriving from the ",(0,o.jsx)(r.code,{children:"DataGridGroupDescription"})," class and overriding the ",(0,o.jsx)(r.code,{children:"GroupNameFromItem"})," method. The custom group description will group items according to the first letter in the value received as a parameter. The example results in the group being present at initial loading; also, when removing and re-adding the group, the custom group description is not triggered. See below for an alternative approach to avoid this."]}),"\n",(0,o.jsxs)(r.p,{children:["The implementation for the custom sort comparer assigned to the group description's ",(0,o.jsx)(r.code,{children:"SortComparer"})," property is provided below."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:"  using System;\r\n  using System.Collections.Generic;\r\n  using System.Text;\r\n  using Xceed.Wpf.DataGrid;\r\n  using System.Collections;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    public class AlphabeticalGroupDescription : DataGridGroupDescription\r\n    {\r\n      public AlphabeticalGroupDescription()\r\n        : base()\r\n      {\r\n      }\r\n      public AlphabeticalGroupDescription( string propertyName )\r\n        : base( propertyName )\r\n      {\r\n      }\r\n    \r\n      public override object GroupNameFromItem( object item, int level,\r\n                                                System.Globalization.CultureInfo culture )\r\n      {\r\n        object value = base.GroupNameFromItem( item, level, culture );\r\n        try\r\n        {\r\n          string content = Convert.ToString( value );\r\n          value = content.ToUpper().Substring( 0, 1 );\r\n        }\r\n        catch( InvalidCastException )\r\n        {\r\n        }\r\n        return value;\r\n      }\r\n    }\r\n  }\n"})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:"  Imports System\r\n  Imports System.Collections.Generic\r\n  Imports System.Text\r\n  Imports Xceed.Wpf.DataGrid\r\n  Imports System.Collections\r\n  Imports System.Globalization;\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class AlphabeticalGroupDescription\r\n          Inherits DataGridGroupDescription\r\n      Public Sub New()\r\n        MyBase.New()\r\n      End Sub\r\n      Public Sub New(ByVal propertyName As String)\r\n      MyBase.New(propertyName)\r\n      End Sub\r\n      Public Overrides Function GroupNameFromItem(ByVal item As Object, _\r\n                                                  ByVal level As Integer, _\r\n                                                  ByVal culture As CultureInfo) As Object\r\n        Dim value As Object = MyBase.GroupNameFromItem(item, level, culture)\r\n        Try\r\n          Dim content As String = Convert.ToString(value)\r\n          value = content.ToUpper().Substring(0, 1)\r\n        Catch e1 As InvalidCastException\r\n        End Try\r\n        Return value\r\n      End Function\r\n    End Class\r\n  End Namespace\n"})})})]}),"\n",(0,o.jsxs)(r.p,{children:["The following code demonstrates how to use the custom group description by adding it to the DataGridCollectionViewSource's ",(0,o.jsx)(r.code,{children:"GroupDescriptions"})," property."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>     \r\n      <local:ConsonantVowelComparer x:Key="consonantVowelComparer"/>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding\r\n                                                  Source={x:Static Application.Current},\r\n                                                  Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <local:AlphabeticalGroupDescription PropertyName="ShipCountry"\r\n                                  SortComparer="{StaticResource consonantVowelComparer}"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})}),(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:'  DataGridCollectionView collectionView = new DataGridCollectionView( Orders );\r\n  AlphabeticalGroupDescription groupDescription = new AlphabeticalGroupDescription( "ShipCountry" );\r\n  groupDescription.SortComparer = new ConsonantVowelComparer();\r\n  collectionView.GroupDescriptions.Add( groupDescription );\r\n  dataGridControl.ItemsSource = collectionView;\n'})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:'  Dim collectionView As New DataGridCollectionView( Orders )\r\n  Dim groupDescription As New AlphabeticalGroupDescription( "ShipCountry" )\r\n  groupDescription.SortComparer = New ConsonantVowelComparer()\r\n  collectionView.GroupDescriptions.Add( groupDescription )\r\n  dataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,o.jsx)(r.p,{children:"The following code provides the implementation for the custom sort comparer that is used to sort, by vowels then consonants, the group descriptions create above."}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'  <Window.Resources>\r\n      <local:DateGroupDescription x:Key="myDateGroupDescription"\r\n                                  PropertyName="DateTimeFieldName" />\r\n  </Window.Resources>\r\n\r\n  [...]\r\n\r\n  <xcdg:DataGridControl.Columns>\r\n    <xcdg:Column FieldName="DateTimeFieldName"\r\n                GroupDescription="{StaticResource myDateGroupDescription}" />\r\n  </xcdg:DataGridControl.Columns>\n'})})}),(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:'  using System;\r\n  using System.Collections.Generic;\r\n  using System.Text;\r\n  using System.Collections;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    public class ConsonantVowelComparer : IComparer\r\n    {\r\n      public ConsonantVowelComparer()\r\n      {\r\n      }\r\n      public int Compare( object x, object y )\r\n      {\r\n        if( ( x is string ) && ( y is string ) )\r\n        {\r\n          string xString = x.ToString().ToLowerInvariant();\r\n          string yString = y.ToString().ToLowerInvariant();\r\n          bool isXVowel = m_vowels.Contains( xString );\r\n          bool isYVowel = m_vowels.Contains( yString );\r\n          if( isXVowel ^ isYVowel )\r\n            return isXVowel ? -1 : 1;\r\n          return String.Compare( xString, yString );      \r\n        }\r\n        throw new ArgumentException();\r\n      }\r\n      private const string m_vowels = "aeiouy";\r\n    }\r\n  }\n'})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:'  Imports System\r\n  Imports System.Collections.Generic\r\n  Imports System.Text\r\n  Imports System.Collections\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class ConsonantVowelComparer\r\n      Implements IComparer\r\n      Public Sub New()\r\n      End Sub\r\n\r\n      Public Function Compare(ByVal x As Object, _\r\n                              ByVal y As Object) As Integer Implements IComparer.Compare\r\n        If (TypeOf x Is String) AndAlso (TypeOf y Is String) Then\r\n          Dim xString As String = x.ToString().ToLowerInvariant()\r\n          Dim yString As String = y.ToString().ToLowerInvariant()\r\n          Dim isXVowel As Boolean = m_vowels.Contains(xString)\r\n          Dim isYVowel As Boolean = m_vowels.Contains(yString)\r\n          If isXVowel Xor isYVowel Then\r\n            If isXVowel Then\r\n              Return -1\r\n            Else\r\n              Return 1\r\n            End If\r\n          End If\r\n          Return String.Compare(xString, yString)\r\n        End If\r\n        Throw New ArgumentException()\r\n      End Function\r\n      Private Const m_vowels As String = "aeiouy"\r\n    End Class\r\n  End Namespace\n'})})})]}),"\n",(0,o.jsx)(r.h3,{id:"changing-the-group-header-text",children:"Changing the group-header text"}),"\n",(0,o.jsxs)(r.p,{children:["The following example demonstrates how to change the information displayed in each ",(0,o.jsx)(r.code,{children:"GroupHeaderControl"})," by creating an implicit ",(0,o.jsx)(r.code,{children:"DataTemplate"})," targeting the Group data type."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n    <DataTemplate DataType="{x:Type xcdg:Group}">\r\n      <StackPanel Orientation="Horizontal">\r\n        <TextBlock Text="The "/>\r\n        <TextBlock Text="{Binding Value}"/>\r\n        <TextBlock Text=" group contains "/>\r\n        <TextBlock Text="{Binding Items.Count}"/>\r\n        <TextBlock Text=" items."/>\r\n      </StackPanel>\r\n    </DataTemplate>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})}),"\n",(0,o.jsx)(r.h3,{id:"providing-a-group-configuration-selector",children:"Providing a group-configuration selector"}),"\n",(0,o.jsx)(r.p,{children:"The following example demonstrates how to provide a FieldNameGroupConfigurationSelector that will apply the defined group configuration to all groups that are created from the values of the column corresponding to the specified field name."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry" />\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity" />\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.GroupConfigurationSelector>\r\n      <xcdg:FieldNameGroupConfigurationSelector>\r\n        <xcdg:FieldNameGroupConfigurationSelectorItem FieldName="ShipCity">\r\n          <xcdg:FieldNameGroupConfigurationSelectorItem.GroupConfiguration>\r\n            <xcdg:GroupConfiguration>\r\n              <xcdg:GroupConfiguration.Footers>\r\n                <DataTemplate>\r\n                  <xcdg:InsertionRow />\r\n                </DataTemplate>\r\n              </xcdg:GroupConfiguration.Footers>\r\n            </xcdg:GroupConfiguration>\r\n          </xcdg:FieldNameGroupConfigurationSelectorItem.GroupConfiguration>                \r\n        </xcdg:FieldNameGroupConfigurationSelectorItem>\r\n      </xcdg:FieldNameGroupConfigurationSelector>\r\n    </xcdg:DataGridControl.GroupConfigurationSelector>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,o.jsx)(r.h3,{id:"creating-a-group-configuration-selector",children:"Creating a group-configuration selector"}),"\n",(0,o.jsxs)(r.p,{children:["The following example demonstrates how to create a custom group-configuration selector that will return the appropriate group configuration depending on the number of items in a group. The implementation of the ",(0,o.jsx)(r.code,{children:"ItemCountGroupConfigurationSelector"})," is provided below."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>              \r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCity" />\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.GroupConfigurationSelector>\r\n        <local:ItemCountGroupConfigurationSelector MinItemCount="10" />\r\n      </xcdg:DataGridControl.GroupConfigurationSelector>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:'  DataGridCollectionView collectionView = new DataGridCollectionView( Orders );      \r\n  collectionView.GroupDescriptions.Add( new DataGridGroupDescription( "ShipCity" ) );\r\n  dataGridControl.GroupConfigurationSelector = new ItemCountGroupConfigurationSelector( 10 );\r\n  dataGridControl.ItemsSource = collectionView;\n'})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:'  Dim collectionView As New DataGridCollectionView( Orders )\r\n  collectionView.GroupDescriptions.Add( New DataGridGroupDescription( "ShipCity" ) )\r\n  dataGridControl.GroupConfigurationSelector = New ItemCountGroupConfigurationSelector( 10 )\r\n  dataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,o.jsxs)(r.p,{children:["The following code provides the implementation of the ",(0,o.jsx)(r.code,{children:"ItemCountGroupConfigurationSelector"}),"."]}),"\n",(0,o.jsxs)(i.A,{children:[(0,o.jsx)(a.A,{value:"csharp",label:"C#",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-csharp",children:"    public class ItemCountGroupConfigurationSelector : GroupConfigurationSelector\r\n      {\r\n        public ItemCountGroupConfigurationSelector()\r\n        {\r\n        } \r\n        public ItemCountGroupConfigurationSelector( int minItemCount )\r\n        :base()\r\n        {\r\n          this.MinItemCount = minItemCount;\r\n        } \r\n      public override GroupConfiguration SelectGroupConfiguration( int groupLevel,\r\n                      System.Windows.Data.CollectionViewGroup collectionViewGroup,\r\n                      System.ComponentModel.GroupDescription groupDescription )\r\n      {\r\n        if( collectionViewGroup == null )\r\n          return base.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription );\r\n        GroupConfiguration groupConfiguration = new GroupConfiguration();\r\n        Style style = new Style( typeof( Xceed.Wpf.DataGrid.DataRow ) );\r\n        if( collectionViewGroup.ItemCount <= m_minItemCount ) // red\r\n        {\r\n          style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) );       \r\n        }\r\n        else // green\r\n        {\r\n          style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) );       \r\n        }\r\n        groupConfiguration.ItemContainerStyle = style;\r\n        return groupConfiguration;\r\n      }\r\n        private int m_minItemCount = 0;\r\n        public int MinItemCount\r\n        {\r\n          get\r\n          {\r\n            return m_minItemCount;\r\n          }\r\n          set\r\n          {\r\n            if( value != m_minItemCount )\r\n              m_minItemCount = value;\r\n          }\r\n        }\r\n      }\n"})})}),(0,o.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-vbnet",children:"    Public Class ItemCountGroupConfigurationSelector\r\n                  Inherits GroupConfigurationSelector\r\n        Public Sub New\r\n        End Sub\r\n        Public Sub New( minItemCount As Integer )\r\n          Me.MinItemCount = minItemCount\r\n        End Sub\r\n        Public Overrides Function SelectGroupConfiguration( ByVal groupLevel As Integer, _\r\n                        ByVal collectionViewGroup As System.Windows.Data.CollectionViewGroup, _\r\n                        ByVal groupDescription As System.ComponentModel.GroupDescription ) As GroupConfiguration\r\n          If collectionViewGroup Is Nothing Then\r\n            Return MyBase.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription )\r\n          End If\r\n          Dim groupConfiguration As New GroupConfiguration()\r\n          Dim style As New Style( GetType( Xceed.Wpf.DataGrid.DataRow ) )\r\n          If collectionViewGroup.ItemCount <= m_minItemCount Then ' red\r\n            style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) )\r\n          Else ' green\r\n            style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) )\r\n          End If\r\n          groupConfiguration.ItemContainerStyle = style\r\n          Return groupConfiguration\r\n        End Function\r\n        Private m_minItemCount As Integer = 0\r\n        Public Property MinItemCount As Integer\r\n          Get\r\n            Return m_minItemCount\r\n          End Get\r\n          Set\r\n            m_minItemCount = value\r\n        End Property\r\n      End Class\n"})})})]})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>a});n(6540);var o=n(4164);const t={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:r,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,o.A)(t.tabItem,a),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>w});var o=n(6540),t=n(4164),i=n(3104),a=n(6347),l=n(205),c=n(7485),s=n(1682),d=n(679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:n}=e;return(0,o.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:o,default:t}}=e;return{value:r,label:n,attributes:o,default:t}}))}(n);return function(e){const r=(0,s.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:n}=e;const t=(0,a.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,c.aZ)(i),(0,o.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(t.location.search);r.set(i,e),t.replace({...t.location,search:r.toString()})}),[i,t])]}function h(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,i=p(e),[a,c]=(0,o.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:r,tabValues:i}))),[s,u]=m({queryString:n,groupId:t}),[h,x]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,i]=(0,d.Dv)(n);return[t,(0,o.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:t}),C=(()=>{const e=s??h;return g({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{C&&c(C)}),[C]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),x(e)}),[u,x,i]),tabValues:i}}var x=n(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var G=n(4848);function S(e){let{className:r,block:n,selectedValue:o,selectValue:a,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),d=e=>{const r=e.currentTarget,n=c.indexOf(r),t=l[n].value;t!==o&&(s(r),a(t))},u=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;r=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;r=c[n]??c[c.length-1];break}}r?.focus()};return(0,G.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,G.jsx)("li",{role:"tab",tabIndex:o===r?0:-1,"aria-selected":o===r,ref:e=>c.push(e),onKeyDown:u,onClick:d,...i,className:(0,t.A)("tabs__item",C.tabItem,i?.className,{"tabs__item--active":o===r}),children:n??r},r)}))})}function D(e){let{lazy:r,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===i));return e?(0,o.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,G.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,o.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function f(e){const r=h(e);return(0,G.jsxs)("div",{className:(0,t.A)("tabs-container",C.tabList),children:[(0,G.jsx)(S,{...r,...e}),(0,G.jsx)(D,{...r,...e})]})}function w(e){const r=(0,x.A)();return(0,G.jsx)(f,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var o=n(6540);const t={},i=o.createContext(t);function a(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);