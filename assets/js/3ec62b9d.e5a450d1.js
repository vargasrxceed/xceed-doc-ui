"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[3631],{6655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var r=n(4848),i=n(8453),a=n(1470),s=n(9365);const o={},l="Inserting Data",d={id:"datagrid/manipulating-data/providing-inserting-removing/03",title:"Inserting Data",description:"The DataGridCollectionView and DataGridCollectionViewSource classes expose events (see Table 1) that are triggered during key stages of inserting a new item into an underlying data source. These events provide full control over the insertion process and make it possible to insert items into a source that does not implement the IBindingList interface.",source:"@site/docs/datagrid/manipulating-data/providing-inserting-removing/03.md",sourceDirName:"datagrid/manipulating-data/providing-inserting-removing",slug:"/datagrid/manipulating-data/providing-inserting-removing/03",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/03",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Virtualization",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/02"},next:{title:"Removing Data",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/providing-inserting-removing/04"}},c={},u=[{value:"Examples",id:"examples",level:2}];function h(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"inserting-data",children:"Inserting Data"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"DataGridCollectionView"})," and ",(0,r.jsx)(t.code,{children:"DataGridCollectionViewSource"})," classes expose events (see Table 1) that are triggered during key stages of inserting a new item into an underlying data source. These events provide full control over the insertion process and make it possible to insert items into a source that does not implement the ",(0,r.jsx)(t.code,{children:"IBindingList"})," interface."]}),"\n",(0,r.jsx)(t.p,{children:"Table 1: Insertion events"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Event"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"CreatingNewItem"})}),(0,r.jsxs)(t.td,{children:["Raised when the ",(0,r.jsx)(t.code,{children:"AddNew"})," method has been called to signal that a new item is about to be created."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"InitializingNewItem"})}),(0,r.jsxs)(t.td,{children:["Raised after the ",(0,r.jsx)(t.code,{children:"CreatingNewItem"})," event to allow the new item to be initialized."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"NewItemCreated"})}),(0,r.jsxs)(t.td,{children:["Raised after the ",(0,r.jsx)(t.code,{children:"CreatingNewItem"})," and ",(0,r.jsx)(t.code,{children:"InitializingNewItem"})," events to signal that a new item has been created."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"CommittingNewItem"})}),(0,r.jsxs)(t.td,{children:["Raised when the ",(0,r.jsx)(t.code,{children:"CommitNew"})," method has been called to signal that a new item is about to be committed to the underlying data source."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"NewItemCommitted"})}),(0,r.jsxs)(t.td,{children:["Raised after the ",(0,r.jsx)(t.code,{children:"CommittingNewItem"})," event to signal that a new item has been committed to the underlying data source."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"CancelingNewItem"})}),(0,r.jsxs)(t.td,{children:["Raised when the ",(0,r.jsx)(t.code,{children:"CancelNew"})," method has been called to signal that the insertion process of a new item is about to be canceled."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"NewItemCanceled"})}),(0,r.jsxs)(t.td,{children:["Raised after the ",(0,r.jsx)(t.code,{children:"CancelingNewItem"})," event to signal that the insertion process of a new item has been canceled."]})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"CreatingNewItem"})," and ",(0,r.jsx)(t.code,{children:"InitializingNewItem"})," events are raised sequentially by the AddNew method to signal that a new item is about to be created and may need to be initialized. In the ",(0,r.jsx)(t.code,{children:"CreatingNewItem"})," event, if the insertion of new items is to be handled manually, a new item must be provided and the ",(0,r.jsx)(t.strong,{children:"Handled"})," property set to true to indicate that the process will be handled manually. If a new item is provided but the ",(0,r.jsx)(t.strong,{children:"Handled"})," property was not set or was set to false, the item will be ignored and an attempt will be made by the DataGridCollectionView to create a new item."]}),"\n",(0,r.jsxs)(t.p,{children:["If a new item is provided in the ",(0,r.jsx)(t.code,{children:"CreatingNewItem"})," event, its values can be initialized either there or in the ",(0,r.jsx)(t.code,{children:"InitializingNewItem"})," event. If the item was automatically created by the DataGridCollectionView, its values can only be initialized in the ",(0,r.jsx)(t.code,{children:"InitializingNewItem"})," event."]}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["An ",(0,r.jsx)(t.strong,{children:"InvalidOperationException"})," will be thrown if the ",(0,r.jsx)(t.strong,{children:"Handled"})," property is set to true but a new item is not provided."]})}),"\n",(0,r.jsxs)(t.p,{children:["Once the item has been created and initialized, the ",(0,r.jsx)(t.strong,{children:"NewItemCreated"})," event will be raised to signal that the new item has been created. If the creation of the new item is canceled (e.g., the ",(0,r.jsx)(t.strong,{children:"ESC"})," key is pressed or ",(0,r.jsx)(t.strong,{children:"CancelNew"})," is called), the CancelingNewItem event will be raised followed by the ",(0,r.jsx)(t.strong,{children:"NewItemCanceled"})," event."]}),"\n",(0,r.jsxs)(t.p,{children:["When manually handling the item-insertion process, the ",(0,r.jsx)(t.strong,{children:"ComittingNewItem"})," will be raised by the CommitNew method to signal that the new item is about to be committed to the underlying data source. In this event\u2014not the ",(0,r.jsx)(t.strong,{children:"CreatingNewItem"})," event\u2014the new item can be added to the underlying data source using custom-defined logic. Once the new item is successfully committed to the underlying data source, the Index and NewCount properties received as event parameters must be set to the required values. Regardless, the ",(0,r.jsx)(t.strong,{children:"Handled"})," property must be set to true to indicate that the process was handled (see Example 1)."]}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["Manually ",(0,r.jsx)(t.strong,{children:"handling"})," the insertion of new items requires that the ",(0,r.jsx)(t.code,{children:"CreatingNewItem"}),", ",(0,r.jsx)(t.code,{children:"CommitingNewItem"}),", and ",(0,r.jsx)(t.code,{children:"CancelingNewItem"})," events must all be handled; otherwise, an ",(0,r.jsx)(t.strong,{children:"InvalidOperationException"})," will be throw"]})}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database or a collection of Person objects, unless stated otherwise."}),"\n",(0,r.jsx)(t.p,{children:"Example 1: Manually handling the insertion process"}),"\n",(0,r.jsx)(t.p,{children:"The following example demonstrates how to manually handle the insertion process of a new item into a collection."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"xml",label:"XAML",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_persons"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=PersonList}"\r\n                                        CreatingNewItem="CollectionView_CreatingNewItem"\r\n                                        CommittingNewItem="CollectionView_CommittingNewItem"\r\n                                        CancelingNewItem="CollectionView_CancelingNewItem"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="PersonsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_persons}}">\r\n      <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n            <xcdg:TableView.FixedHeaders>\r\n                <DataTemplate>\r\n                  <xcdg:InsertionRow/>\r\n                </DataTemplate>\r\n            </xcdg:TableView.FixedHeaders>\r\n          </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,r.jsx)(s.A,{value:"csharp",label:"C#",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"private void CollectionView_CreatingNewItem( object sender, DataGridCreatingNewItemEventArgs e )\r\n{\r\n  e.NewItem = new Person( Person.AutoIncrementID, string.Empty, string.Empty, -1 );\r\n  e.Handled = true;\r\n}\r\nprivate void CollectionView_CommittingNewItem( object sender, DataGridCommittingNewItemEventArgs e )\r\n{\r\n  List<Person> source = e.CollectionView.SourceCollection as List<Person>;\r\n  source.Add( ( Person )e.Item );\r\n  Person.AutoIncrementID = Person.AutoIncrementID + 1;\r\n  // the new item is always added at the end of the list.    \r\n  e.Index = source.Count - 1;\r\n  e.NewCount = source.Count;\r\n  e.Handled = true;\r\n}\r\nprivate void CollectionView_CancelingNewItem( object sender, DataGridItemHandledEventArgs e )\r\n{\r\n  // Manually handling the insertion of new items requires that the CreatingNewItem,\r\n  // CommitingNewItem, and CancelingNewItem events must all be handled even if nothing\r\n  // is done in the event.\r\n  e.Handled = true;\r\n}\n"})})}),(0,r.jsx)(s.A,{value:"vbnet",label:"Visual Basic .NET",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-vbnet",children:"Private Sub CollectionView_CreatingNewItem( ByVal sender As Object, _\r\n                                      ByVal e As DataGridCreatingNewItemEventArgs )\r\n  e.NewItem = New Person( Person.AutoIncrementID, String.Empty, String.Empty, -1 )\r\n  e.Handled = True\r\nEnd Sub\r\nPrivate Sub CollectionView_CommittingNewItem( ByVal sender As Object, _\r\n                                              ByVal e As DataGridCommittingNewItemEventArgs )\r\n  Dim source As List( Of Person ) = CType( e.CollectionView.SourceCollection, List( Of Person ) )\r\n  source.Add( CType( e.Item, Person ) )\r\n  Person.AutoIncrementID = Person.AutoIncrementID + 1\r\n  ' the new item is always added at the end of the list.\r\n  e.Index = source.Count - 1\r\n  e.NewCount = source.Count\r\n  e.Handled = True\r\nEnd Sub\r\nPrivate Sub CollectionView_CancelingNewItem( ByVal sender As Object, _\r\n                                            ByVal e As DataGridItemHandledEventArgs )\r\n  ' Manually handling the insertion of new items requires that the CreatingNewItem,\r\n  ' CommitingNewItem, and CancelingNewItem events must all be handled even if nothing\r\n  ' is done in the event.\r\n  e.Handled = True\r\nEnd Sub\n"})})})]})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);var r=n(4164);const i={tabItem:"tabItem_Ymn6"};var a=n(4848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>I});var r=n(6540),i=n(4164),a=n(3104),s=n(6347),o=n(205),l=n(7485),d=n(1682),c=n(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const i=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function p(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=h(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[d,u]=g({queryString:n,groupId:i}),[p,w]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,c.Dv)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),x=(()=>{const e=d??p;return m({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),w(e)}),[u,w,a]),tabValues:a}}var w=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function v(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),i=o[n].value;i!==r&&(d(t),s(i))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:u,onClick:c,...a,className:(0,i.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function f(e){const t=p(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,{...t,...e}),(0,b.jsx)(j,{...t,...e})]})}function I(e){const t=(0,w.A)();return(0,b.jsx)(f,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);