"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7313],{9846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var i=t(4848),r=t(8453),a=t(1470),o=t(9365);const l={},s="Customizing Multi-surface Themes",d={id:"code-snippets/09",title:"Customizing Multi-surface Themes",description:"The following page provides a list of examples that demonstrate how to customize multi-surface themes.",source:"@site/datagrid/code-snippets/09.md",sourceDirName:"code-snippets",slug:"/code-snippets/09",permalink:"/xceed-doc-ui/datagrid/code-snippets/09",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Customizing Table Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/08"},next:{title:"Defining Detail Descriptions",permalink:"/xceed-doc-ui/datagrid/code-snippets/10"}},c={},u=[{value:"Providing surface configurations",id:"providing-surface-configurations",level:3},{value:"Providing a default region configuration",id:"providing-a-default-region-configuration",level:3},{value:"Defining region configurations",id:"defining-region-configurations",level:3},{value:"Setting a multi-surface theme",id:"setting-a-multi-surface-theme",level:3},{value:"Changing a title-region position",id:"changing-a-title-region-position",level:3},{value:"Providing new gradient colors",id:"providing-new-gradient-colors",level:3},{value:"Creating a custom surface configuration and multi-surface theme",id:"creating-a-custom-surface-configuration-and-multi-surface-theme",level:3}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"customizing-multi-surface-themes",children:"Customizing Multi-surface Themes"})}),"\n",(0,i.jsx)(n.p,{children:"The following page provides a list of examples that demonstrate how to customize multi-surface themes."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"All examples in this topic assume that the grid is bound to the Employees table of the Northwind database, unless stated otherwise."})}),"\n",(0,i.jsx)(n.h3,{id:"providing-surface-configurations",children:"Providing surface configurations"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to provide an image and title surface configuration that will be applied to the center surface and a title surface configuration that will be applied to the left and right side cards."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                              Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n    <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="LastName"\r\n                    IsMainColumn="True"/>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:CardflowView3D>\r\n          <xcdg:CardflowView3D.Theme>\r\n            <xcdg:ElementalBlackTheme>\r\n                <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                  \x3c!-- Because an attempt is made to automatically detect an image in the data\r\n                        item, there is no need to specify the name of the field that contains\r\n                        the image in the surface configuration\'s ImageRegionConfiguration.\r\n                      \r\n                        If a data item contains more than one image you can set the FieldNames\r\n                        property of the ImageRegionConfiguration to the name of the field that\r\n                        contains the desired image. --\x3e\r\n                  <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>\r\n                \r\n                  \x3c!-- By default, the value of the main column will be displayed in the title regions. --\x3e\r\n                  <xcdg:TitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right"/>\r\n                </xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n            </xcdg:ElementalBlackTheme>\r\n          </xcdg:CardflowView3D.Theme>\r\n      </xcdg:CardflowView3D>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'dataGridControl.Columns[ "LastName" ].IsMainColumn = true;\r\nCardflowView3D view = new CardflowView3D();\r\nElementalBlackTheme theme = new ElementalBlackTheme();\r\n// Because an attempt is made to automatically detect an image in the data\r\n// item, there is no need to specify the name of the field that contains\r\n// the image in the surface configuration\'s ImageRegionConfiguration.\r\n                      \r\n// If a data item contains more than one image you can set the FieldNames\r\n// property of the ImageRegionConfiguration to the name of the field that\r\n// contains the desired image.\r\nImageAndTitleSurfaceConfiguration imageAndTitleSurfaceConfiguration = new ImageAndTitleSurfaceConfiguration();\r\nimageAndTitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Center );\r\n// By default, the value of the main column will be displayed in the title regions.\r\nTitleSurfaceConfiguration titleSurfaceConfiguration = new TitleSurfaceConfiguration();\r\ntitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Left | CardflowView3DSurfaces.Right );\r\ntheme.SurfaceConfigurations.Add( imageAndTitleSurfaceConfiguration );\r\ntheme.SurfaceConfigurations.Add( titleSurfaceConfiguration );\r\nview.Theme = theme;\r\ndataGridControl.View = view;\n'})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-vbnet",children:"dataGridControl.Columns( \"LastName\" ).IsMainColumn = True\r\nDim view As New CardflowView3D()\r\nDim theme As New ElementalBlackTheme()\r\n' Because an attempt is made to automatically detect an image in the data\r\n' item, there is no need to specify the name of the field that contains\r\n' the image in the surface configuration's ImageRegionConfiguration.\r\n\r\n' If a data item contains more than one image you can set the FieldNames\r\n' property of the ImageRegionConfiguration to the name of the field that\r\n' contains the desired image.\r\nDim imageAndTitleSurfaceConfiguration As new ImageAndTitleSurfaceConfiguration()\r\nimageAndTitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Center )\r\n' By default, the value of the main column will be displayed in the title regions.\r\nDim titleSurfaceConfiguration As New TitleSurfaceConfiguration()\r\ntitleSurfaceConfiguration.SetValue( CardflowView3D.SurfacesProperty, CardflowView3DSurfaces.Left And CardflowView3DSurfaces.Right )\r\ntheme.SurfaceConfigurations.Add( imageAndTitleSurfaceConfiguration )\r\ntheme.SurfaceConfigurations.Add( titleSurfaceConfiguration )\r\nview.Theme = theme\r\ndataGridControl.View = view\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"providing-a-default-region-configuration",children:"Providing a default region configuration"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to provide a default title-region configuration that will be used by all surfaces that display a title."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n   <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                   Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n \r\n  </Grid.Resources>\r\n \r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n \r\n   <xcdg:DataGridControl.View>\r\n      <xcdg:CardflowView3D>\r\n         <xcdg:CardflowView3D.Theme>\r\n            <xcdg:ElementalBlackTheme>\r\n              \x3c!-- The DefaultTitleRegionConfiguration will be applied to all title regions in all surfaces\r\n                   for which a RegionConfiguration has not been explicitly provided. --\x3e\r\n              <xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n                 <xcdg:RegionConfiguration FieldNames="TitleOfCourtesy, FirstName, LastName, Title"\r\n                                           ReadOnly="True">\r\n                    <xcdg:RegionConfiguration.Template>\r\n                       <DataTemplate>\r\n                          <Viewbox>\r\n                             <StackPanel>\r\n                                <StackPanel Orientation="Horizontal"\r\n                                            HorizontalAlignment="Center">\r\n                                   <StackPanel.Resources>\r\n                                      <Style TargetType="{x:Type xcdg:DataCell}">\r\n                                         <Setter Property="Margin"\r\n                                                 Value="0, 0, 3, 0"/>\r\n                                      </Style>\r\n                                   </StackPanel.Resources>\r\n                                   <xcdg:DataCell FieldName="TitleOfCourtesy"/>\r\n                                   <xcdg:DataCell FieldName="FirstName"/>\r\n                                   <xcdg:DataCell FieldName="LastName"/>\r\n                                </StackPanel>\r\n                                <xcdg:DataCell FieldName="Title"\r\n                                               TextElement.FontSize="10"\r\n                                               HorizontalContentAlignment="Center"/>\r\n                             </StackPanel>\r\n                          </Viewbox>\r\n                       </DataTemplate>\r\n                    </xcdg:RegionConfiguration.Template>\r\n                 </xcdg:RegionConfiguration>\r\n              </xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n            </xcdg:ElementalBlackTheme>\r\n         </xcdg:CardflowView3D.Theme>\r\n      </xcdg:CardflowView3D>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"defining-region-configurations",children:"Defining region configurations"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to define default and explicit region configurations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n     <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                     Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"\r\n                                        AutoCreateItemProperties="False">\r\n        <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n           \x3c!--Will be explicitly positioned in the default "Title" region.--\x3e\r\n           <xcdg:DataGridItemProperty Name="Title"/>\r\n           <xcdg:DataGridItemProperty Name="FirstName"/>\r\n           <xcdg:DataGridItemProperty Name="LastName"/>\r\n           <xcdg:DataGridItemProperty Name="TitleOfCourtesy"/>\r\n           \x3c!--Will be automatically detected as containing an image and displayed in the "Image" region.--\x3e\r\n           <xcdg:DataGridItemProperty Name="Photo"/>\r\n           \x3c!--Will appear in the "Data" region. There is no need to explicitly position them as, by default,\r\n                the "Data" region displays information from the fields that have not been explicitly\r\n                assigned to another region.--\x3e\r\n           <xcdg:DataGridItemProperty Name="EmployeeID"\r\n                                      Title="Employee Identification #"/>\r\n           <xcdg:DataGridItemProperty Name="Address"/>\r\n           <xcdg:DataGridItemProperty Name="City"/>\r\n           <xcdg:DataGridItemProperty Name="Country"/>\r\n           <xcdg:DataGridItemProperty Name="PostalCode"\r\n                                      Title="Postal Code"/>\r\n           <xcdg:DataGridItemProperty Name="HomePhone"\r\n                                      Title="Home Phone Number"/>\r\n           <xcdg:DataGridItemProperty Name="BirthDate"\r\n                                      Title="Date of Birth"/>\r\n        </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n     </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n     <xcdg:DataGridControl.View>\r\n        <xcdg:CardflowView3D>\r\n           <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ElementalBlackTheme>\r\n                \x3c!-- The DefaultTitleRegionConfiguration will be applied to all title regions in all surfaces\r\n                     for which a RegionConfiguration has not been explicitly provided. --\x3e\r\n                <xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n                   <xcdg:RegionConfiguration FieldNames="TitleOfCourtesy, FirstName, LastName, Title"\r\n                                             ReadOnly="True">\r\n                      <xcdg:RegionConfiguration.Template>\r\n                         <DataTemplate>\r\n                            <Viewbox>\r\n                               <StackPanel>\r\n                                  <StackPanel Orientation="Horizontal"\r\n                                              HorizontalAlignment="Center">\r\n                                     <StackPanel.Resources>\r\n                                        <Style TargetType="{x:Type xcdg:DataCell}">\r\n                                           <Setter Property="Margin"\r\n                                                   Value="0, 0, 3, 0"/>\r\n                                        </Style>\r\n                                     </StackPanel.Resources>\r\n                                     <xcdg:DataCell FieldName="TitleOfCourtesy"/>\r\n                                     <xcdg:DataCell FieldName="FirstName"/>\r\n                                     <xcdg:DataCell FieldName="LastName"/>\r\n                                  </StackPanel>\r\n                                  <xcdg:DataCell FieldName="Title"\r\n                                                 TextElement.FontSize="10"\r\n                                                 HorizontalContentAlignment="Center"/>\r\n                               </StackPanel>\r\n                            </Viewbox>\r\n                         </DataTemplate>\r\n                      </xcdg:RegionConfiguration.Template>\r\n                   </xcdg:RegionConfiguration>\r\n                </xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n                <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                   \x3c!-- Because an attempt is made to automatically detect an image in the data\r\n                        item, there is no need to specify the name of the field that contains\r\n                        the image in the surface configuration\'s ImageRegionConfiguration.\r\n                       \r\n                        If a data item contains more than one image you can set the FieldNames\r\n                        property of the ImageRegionConfiguration to the name of the field that\r\n                        contains the desired image. --\x3e\r\n                   <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>\r\n                   \x3c!-- Explicitly define a new template for the TitleRegionConfiguration since\r\n                        we want to use one that is different from the one provided in the\r\n                        DefaultTitleRegionConfiguration. In this situation, the names of the\r\n                        fields to display in the title region must be provided. --\x3e\r\n                   <xcdg:TitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right">\r\n                      <xcdg:TitleSurfaceConfiguration.TitleRegionConfiguration>\r\n                         <xcdg:RegionConfiguration FieldNames="FirstName, LastName"\r\n                                                   ReadOnly="True">\r\n                            <xcdg:RegionConfiguration.Template>\r\n                               <DataTemplate>                                    \r\n                                   \x3c!--In this example, a fixed font size is not ideal since we don\'t\r\n                                        know the final size of a card and we want the font size of the Title\r\n                                        to vary along with the card size; therefore, we will place everything\r\n                                        in a Viewbox, which will handle everything.--\x3e\r\n                                   <Viewbox>\r\n                                      \x3c!-- Using a Viewbox will stretch each title according to its\r\n                                           content resulting in titles that can be of various sizes.\r\n                                           This result may not always be esthetically pleasing and can\r\n                                           also produce perspective problems (optical illusions).\r\n                                           Giving the root element of the Viewbox an arbitrary width\r\n                                           will correct this undesirable behavior. This size of 100 was\r\n                                           determined by trial and error using our data source and it may\r\n                                           be appropriate to change it according to the data.--\x3e\r\n                                      <Grid Width="100">\r\n                                         \x3c!--This grid is used to center the title when its desired\r\n                                              width is less than 100.--\x3e\r\n                                         <Grid.ColumnDefinitions>\r\n                                            <ColumnDefinition Width="*"/>\r\n                                            <ColumnDefinition Width="Auto"/>\r\n                                            <ColumnDefinition Width="*"/>\r\n                                         </Grid.ColumnDefinitions>\r\n                                        <StackPanel Orientation="Horizontal"\r\n                                                    Grid.Column="1">\r\n                                           <xcdg:DataCell FieldName="FirstName"\r\n                                                          Margin="0, 0, 3, 0"/>\r\n                                           <xcdg:DataCell FieldName="LastName"/>\r\n                                        </StackPanel>                       \r\n                                     </Grid>\r\n                                   </Viewbox> \r\n                              </DataTemplate>\r\n                            </xcdg:RegionConfiguration.Template>\r\n                         </xcdg:RegionConfiguration>\r\n                      </xcdg:TitleSurfaceConfiguration.TitleRegionConfiguration>\r\n                   </xcdg:TitleSurfaceConfiguration>\r\n                   \x3c!-- In this surface configuration there is no need to specify the field names to use since:\r\n                          - the image field is automatically detected and used in the image region\r\n                          - the fields used in the title region are specified in the\r\n                            DefaultTitleRegionConfiguration\r\n                          - the fields that have not been explicitly assigned to a specific region will\r\n                            automatically be placed in the default "Data" region. --\x3e\r\n                   <xcdg:CompleteSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Back"/>\r\n                </xcdg:ElementalBlackTheme.SurfaceConfigurations>  \r\n             </xcdg:ElementalBlackTheme>\r\n           </xcdg:CardflowView3D.Theme>\r\n        </xcdg:CardflowView3D>\r\n     </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>     \r\n</Grid>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setting-a-multi-surface-theme",children:"Setting a multi-surface theme"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to set a multi-surface theme using property element syntax."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n<Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n</Grid.Resources>\r\n<xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n  <xcdg:DataGridControl.View>\r\n      <xcdg:CardflowView3D>\r\n        <xcdg:CardflowView3D.Theme>\r\n            <xcdg:ChameleonTheme/>\r\n        </xcdg:CardflowView3D.Theme>\r\n      </xcdg:CardflowView3D>\r\n  </xcdg:DataGridControl.View>\r\n</xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"CardflowView3D view = new CardflowView3D();\r\nview.Theme = new ChameleonTheme();\r\ndataGridControl.View = view;\n"})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-vbnet",children:"Dim view As New CardflowView3D()\r\nview.Theme = New ChameleonTheme()\r\ndataGridControl.View = view\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"changing-a-title-region-position",children:"Changing a title-region position"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to change the position of the title-surface configuration's title region."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n     <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                   Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n     <xcdg:DataGridControl.View>\r\n        <xcdg:CardflowView3D>  \r\n         <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ElementalBlackTheme>\r\n                 \x3c!-- The DefaultTitleRegionConfiguration will be applied to all title regions in all surfaces\r\n                      for which a RegionConfiguration has not been explicitly provided. --\x3e\r\n                 <xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n                    <xcdg:RegionConfiguration FieldNames="FirstName, LastName"\r\n                                              ShowCellTitles="False"\r\n                                              ReadOnly="True">\r\n                       <xcdg:RegionConfiguration.Template>\r\n                          <DataTemplate>\r\n                             \x3c!-- In this example, a fixed font size is not ideal since we don\'t\r\n                                  know the final size of a card and we want the font size of the Title\r\n                                  to vary along with the card size; therefore, we will place everything\r\n                                  in a Viewbox, which will handle everything. --\x3e\r\n                             <Viewbox>\r\n                                \x3c!-- Using a Viewbox will stretch each title according to its\r\n                                     content resulting in titles that can be of various sizes.\r\n                                     This result may not always be esthetically pleasing and can\r\n                                     also produce perspective problems (optical illusions).\r\n                                     Giving the root element of the Viewbox an arbitrary width\r\n                                     will correct this undesirable behavior. This size of 125 was\r\n                                     determined by trial and error using our data source and it may\r\n                                     be appropriate to change it according to the data. --\x3e\r\n                                <Grid Width="125">\r\n                                   \x3c!-- This grid is used to center the title when its desired\r\n                                        width is less than 100. --\x3e\r\n                                   <Grid.ColumnDefinitions>\r\n                                      <ColumnDefinition Width="*"/>\r\n                                      <ColumnDefinition Width="Auto"/>\r\n                                      <ColumnDefinition Width="*"/>\r\n                                   </Grid.ColumnDefinitions>\r\n                                   <StackPanel Orientation="Horizontal"\r\n                                               Grid.Column="1">\r\n                                      <xcdg:DataCell FieldName="FirstName"\r\n                                                     Margin="0, 0, 3, 0"/>\r\n                                      <xcdg:DataCell FieldName="LastName"/>\r\n                                   </StackPanel>\r\n                                </Grid>\r\n                             </Viewbox>\r\n                          </DataTemplate>\r\n                       </xcdg:RegionConfiguration.Template>\r\n                    </xcdg:RegionConfiguration>\r\n                 </xcdg:ElementalBlackTheme.DefaultTitleRegionConfiguration>\r\n                 <xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n                    \x3c!-- Because an attempt is made to automatically detect an image in the data \r\n                         item, there is no need to specify the name of the field that contains \r\n                         the image in the surface configuration\'s ImageRegionConfiguration. --\x3e\r\n                    <xcdg:ImageAndTitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Center"/>               \r\n                   \x3c!-- This surface will use the DefaultTitleRegionConfiguration; however, it will display\r\n                        its title region in the middle oft he surface rather than the bottom (default).\r\n                        \r\n                        It is important to note that themes decide what title-region positions they support\r\n                        and for which surface configuration. --\x3e\r\n                   <xcdg:TitleSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Left, Right"\r\n                                                   xcdg:ElementalBlackTheme.TitleRegionPosition="Middle"/>\r\n                    \x3c!--In this surface configuration there is no need to specify the field names to use since:\r\n                           - the image field is automatically detected and used in the image region\r\n                           - the fields used in the title region are specified in the \r\n                             DefaultTitleRegionConfiguration\r\n                           - the fields that have not been explicitly assigned to a specific region will \r\n                             automatically be placed in the default "Data" region.--\x3e\r\n                    <xcdg:CompleteSurfaceConfiguration xcdg:CardflowView3D.Surfaces="Back"/>\r\n                 </xcdg:ElementalBlackTheme.SurfaceConfigurations>\r\n              </xcdg:ElementalBlackTheme>\r\n           </xcdg:CardflowView3D.Theme>\r\n        </xcdg:CardflowView3D>\r\n     </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"providing-new-gradient-colors",children:"Providing new gradient colors"}),"\n",(0,i.jsx)(n.p,{children:"The following example demonstrates how to change the gradient applied to the card surfaces when using the Chameleon theme."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"GradientColors",src:t(3864).A+"",width:"325",height:"237"})}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                  Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="LastName" IsMainColumn="True"/>\r\n          <xcdg:Column FieldName="Notes" Visible="False"/>\r\n          <xcdg:Column FieldName="ReportsTo" Visible="False"/>\r\n          <xcdg:Column FieldName="StillEmployed" Visible="False"/>\r\n          <xcdg:Column FieldName="TitleOfCourtesy" Visible="False"/>\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.View>\r\n          <xcdg:CardflowView3D>\r\n            <xcdg:CardflowView3D.Theme>\r\n              <xcdg:ChameleonTheme GradientLightColor="Pink"\r\n                                    GradientDarkColor="Purple">\r\n                \r\n              </xcdg:ChameleonTheme>                 \r\n            </xcdg:CardflowView3D.Theme>\r\n          </xcdg:CardflowView3D>\r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'  dataGridControl.Columns[ "LastName" ].IsMainColumn = true;\r\n  dataGridControl.Columns[ "Notes" ].Visible= false;\r\n  dataGridControl.Columns[ "ReportsTo" ].Visible = false;\r\n  dataGridControl.Columns[ "StillEmployed" ].Visible = false;\r\n  dataGridControl.Columns[ "TitleOfCourtesy" ].Visible = false;\r\n  ChameleonTheme theme = new ChameleonTheme();\r\n  theme.GradientLightColor = Brushes.Pink.Color;\r\n  theme.GradientDarkColor = Brushes.Purple.Color;\r\n  CardflowView3D view = new CardflowView3D();\r\n  view.Theme = theme;\r\n  dataGridControl.View = view;\n'})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-vbnet",children:'  dataGridControl.Columns( "LastName" ).IsMainColumn = True\r\n  dataGridControl.Columns( "Notes" ).Visible= False\r\n  dataGridControl.Columns( "ReportsTo" ).Visible = False\r\n  dataGridControl.Columns( "StillEmployed" ).Visible = False\r\n  dataGridControl.Columns( "TitleOfCourtesy" ).Visible = False\r\n  Dim theme As New ChameleonTheme()\r\n  theme.GradientLightColor = Brushes.Pink.Color\r\n  theme.GradientDarkColor = Brushes.Purple.Color\r\n  Dim view As New CardflowView3D()\r\n  view.Theme = theme\r\n  dataGridControl.View = view\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-custom-surface-configuration-and-multi-surface-theme",children:"Creating a custom surface configuration and multi-surface theme"}),"\n",(0,i.jsx)(n.p,{children:"Because creating a custom surface configuration and multi-surface theme requires more than a code snippet to demonstrate, links to the required classes are provided below:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. ImageAndDoubleTitleSurfaceConfiguration Class"})}),"\n",(0,i.jsxs)(n.p,{children:['Provides the implementation, in code, of a surface configuration that derives from the ImageAndTitleSurfaceConfiguration class and adds a new RegionConfiguration property named "SecondTitleRegionConfiguration". The TargetRegionPresenterName attribute, which specifies the name of the corresponding RegionPresenter in the ',(0,i.jsx)(n.strong,{children:"ControlTemplate"}),' ("REGION_SecondTitle"), has also been set on the new property.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. ElementalPinkTheme Class"})}),"\n",(0,i.jsxs)(n.p,{children:['Provides the implementation, in code, of a theme that derives from the ElementalBlackTheme class and adds a new RegionConfiguration property named "DefaultSecondTitleRegionConfiguration". The TargetRegionPresenterName attribute, which specifies the name of the corresponding RegionPresenter in the ',(0,i.jsx)(n.strong,{children:"ControlTemplate"}),' ("REGION_SecondTitle"), has also been set on the new property.']}),"\n",(0,i.jsxs)(n.p,{children:["The TargetSurfaceConfiguration attribute has also been set on the ",(0,i.jsx)(n.code,{children:"ElementalPinkTheme"})," class to include the ",(0,i.jsx)(n.code,{children:"ImageAndDoubleTitleSurfaceConfiguration"})," class as a targeted surface configuration."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. CardflowView3D.Elemental.Pink.xaml Resource Dictionary"})}),"\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.strong,{children:"CardflowView3D.Elemental.Black"})," resource dictionary, this dictionary provides the pink color scheme for the Elemental Pink theme as well as the modified ",(0,i.jsx)(n.strong,{children:"ControlTemplate"}),' that contains the second title region identified as "REGION_SecondTitle".']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Elemental.Resources.xaml Resource Dictionary"})}),"\n",(0,i.jsxs)(n.p,{children:["Exact copy of Xceed's Elemental.Resources resource dictionary, which provides the templates and styles required by the ",(0,i.jsx)(n.strong,{children:"CardflowView3D.Elemental.Pink"})," resource dictionary."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. generic.xaml Resource Dictionary"})}),"\n",(0,i.jsxs)(n.p,{children:["The theme-level resource dictionary for the ",(0,i.jsx)(n.strong,{children:"Elemental Pink"})," theme, which must be placed in a themes folder at the root of the project that contains the theme."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var a=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,o),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>D});var i=t(6540),r=t(4164),a=t(3104),o=t(6347),l=t(205),s=t(7485),d=t(1682),c=t(679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=m(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[d,u]=h({queryString:t,groupId:r}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),p=(()=>{const e=d??f;return g({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{p&&s(p)}),[p]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=t(2303);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=t(4848);function w(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=s.indexOf(n),r=l[t].value;r!==i&&(d(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,C.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>s.push(e),onKeyDown:u,onClick:c,...a,className:(0,r.A)("tabs__item",p.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function T(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=f(e);return(0,C.jsxs)("div",{className:(0,r.A)("tabs-container",p.tabList),children:[(0,C.jsx)(w,{...n,...e}),(0,C.jsx)(T,{...n,...e})]})}function D(e){const n=(0,x.A)();return(0,C.jsx)(y,{...e,children:u(e.children)},String(n))}},3864:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/GradientColors_thumb-b6b93bce1946d30c4b49de6fa4453e02.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);