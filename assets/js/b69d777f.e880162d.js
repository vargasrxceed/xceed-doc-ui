"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[9457],{9820:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>d,metadata:()=>l,toc:()=>u});var a=n(4848),t=n(8453),i=n(1470),o=n(9365);const d={},s="Customizing Card Views",l={id:"code-snippets/07",title:"Customizing Card Views",description:"The following page provides a list of examples that demonstrate how to customize the appearance of card views.",source:"@site/datagrid/code-snippets/07.md",sourceDirName:"code-snippets",slug:"/code-snippets/07",permalink:"/xceed-doc-ui/datagrid/code-snippets/07",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Customizing Cardflow 3D Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/06"},next:{title:"Customizing Table Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/08"}},c={},u=[{value:"Adding an InsertionRow to the fixed headers",id:"adding-an-insertionrow-to-the-fixed-headers",level:3},{value:"Clearing a fixed header section",id:"clearing-a-fixed-header-section",level:3},{value:"Changing the main (primary) column",id:"changing-the-main-primary-column",level:3},{value:"Adding separator lines",id:"adding-separator-lines",level:3},{value:"Recreating the default card-view header",id:"recreating-the-default-card-view-header",level:3},{value:"Applying a grid background brush",id:"applying-a-grid-background-brush",level:3},{value:"Applying a card background brush",id:"applying-a-card-background-brush",level:3}];function h(e){const r={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"customizing-card-views",children:"Customizing Card Views"})}),"\n",(0,a.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to customize the appearance of card views."}),"\n",(0,a.jsxs)(r.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,a.jsx)(r.em,{children:"Orders"})," table of the Northwind database, unless stated otherwise."]}),"\n",(0,a.jsx)(r.h3,{id:"adding-an-insertionrow-to-the-fixed-headers",children:"Adding an InsertionRow to the fixed headers"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to add an InsertionRow to the fixed header section of a grid."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                     Source="{Binding Source={x:Static Application.Current},\r\n                                                       Path=Orders}"/>\r\n   </Grid.Resources>\r\n   <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                         ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n         <xcdg:TableView>\r\n\r\n           <xcdg:TableView.FixedHeaders>\r\n              <DataTemplate>\r\n                 <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n           </xcdg:TableView.FixedHeaders>\r\n         </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n   </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,a.jsx)(r.h3,{id:"clearing-a-fixed-header-section",children:"Clearing a fixed header section"}),"\n",(0,a.jsxs)(r.p,{children:["The following example demonstrates how to clear the content of all header and footer sections of a grid using its view's ",(0,a.jsx)(r.strong,{children:"UseDefaultHeadersFooters"})," property."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:CardView UseDefaultHeadersFooters="False"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"  CardView view = new CardView();\r\n  view.UseDefaultHeadersFooters = false;\r\n  dataGridControl.View = view;\n"})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  Dim view As New CardView()\r\n  view.UseDefaultHeadersFooters = False\r\n  dataGridControl.View = view\n"})})})]}),"\n",(0,a.jsx)(r.h3,{id:"changing-the-main-primary-column",children:"Changing the main (primary) column"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to set the ShipName column as a grid's main column."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                          View="CardView">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ShipName" IsMainColumn="True"/>\r\n        </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'  dataGridControl.Columns[ "ShipName" ].IsMainColumn = true;\n'})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:'  dataGridControl.Columns( "ShipName" ).IsMainColumn = True\n'})})})]}),"\n",(0,a.jsx)(r.h3,{id:"adding-separator-lines",children:"Adding separator lines"}),"\n",(0,a.jsx)(r.p,{children:'The following examples demonstrates how to add separator lines between card "columns".'}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:CardView>\r\n\r\n            <xcdg:CardView.SeparatorLinePen>\r\n              <Pen Thickness="1.5" Brush="Orange"\r\n                    DashStyle="{x:Static DashStyles.DashDotDot}"/>\r\n            </xcdg:CardView.SeparatorLinePen>\r\n          </xcdg:CardView>\r\n        </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"  Pen pen = new Pen();\r\n  pen.Thickness = 1.5;\r\n  pen.Brush = Brushes.Orange;\r\n  pen.DashStyle = DashStyles.DashDotDot;\r\n\r\n  CardView view = new CardView();\r\n  view.SeparatorLinePen = pen;\r\n\r\n  dataGridControl.View = view;\n"})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  Dim pen As New Pen()\r\n  pen.Thickness = 1.5\r\n  pen.Brush = Brushes.Orange\r\n  pen.DashStyle = DashStyles.DashDotDot\r\n\r\n  Dim view As New CardView()\r\n  view.SeparatorLinePen = pen\r\n\r\n  dataGridControl.View = view\n"})})})]}),"\n",(0,a.jsx)(r.h3,{id:"recreating-the-default-card-view-header",children:"Recreating the default card-view header"}),"\n",(0,a.jsxs)(r.p,{children:["The following example demonstrates how to recreate the default card-view header, which contains a ",(0,a.jsx)(r.code,{children:"ColumnManagerRow"})," to the right of a ",(0,a.jsx)(r.code,{children:"GroupByControl"}),"."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:CardView UseDefaultHeadersFooters="False">\r\n        <xcdg:CardView.FixedHeaders>\r\n         <DataTemplate>\r\n           <DockPanel>\r\n             \x3c!-- OneWay binding is used because we want the ColumnManagerRow\'s height to\r\n                  follow what is defined by the GroupByControl. A FallbackValue\r\n                  is specified so the initial measure pass has an acceptable minimal\r\n                  value.--\x3e\r\n             <xcdg:ColumnManagerRow DockPanel.Dock="Right"\r\n                                    Height="{Binding ElementName=groupByControl,\r\n                                                     Path=ActualHeight,\r\n                                                     Mode=OneWay,\r\n                                                     FallbackValue=60}"/>\r\n             <xcdg:GroupByControl x:Name="groupByControl"/>\r\n           </DockPanel>\r\n         </DataTemplate>\r\n        </xcdg:CardView.FixedHeaders>\r\n      </xcdg:CardView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,a.jsx)(r.h3,{id:"applying-a-grid-background-brush",children:"Applying a grid background brush"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to apply a one of the custom background brushes (provided by Xceed) to a grid's background."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n        \r\n      </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}"\r\n                          Background="{x:Static xcdg:DataGridControlBackgroundBrushes.AuroraRed}">     \r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="ProductName"\r\n                        IsMainColumn="True"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n            \x3c!-- In Cardflow 3D view, if a theme is not explicitly specified,\r\n                the Elemental Black theme will be used. --\x3e\r\n            <xcdg:CardflowView3D CardHeightToViewportRatio="0.5"/>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,a.jsx)(o.A,{value:"csharp",label:"C#",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:"  dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed;\n"})})}),(0,a.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-vbnet",children:"  dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed\n"})})})]}),"\n",(0,a.jsx)(r.h3,{id:"applying-a-card-background-brush",children:"Applying a card background brush"}),"\n",(0,a.jsx)(r.p,{children:"The following example demonstrates how to apply one of the custom background brushes (provided by Xceed) cards (i.e., data rows) by creating an implicit style that targets DataRow and that sets the background property."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n       <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                    Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n      <Style TargetType="{x:Type xcdg:DataRow}">\r\n         <Setter Property="Background"\r\n                 Value="{x:Static xcdg:CardBackgroundBrushes.Retro}"/>\r\n      </Style>  \r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}">\r\n       <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ProductName"\r\n                       IsMainColumn="True"/>\r\n       </xcdg:DataGridControl.Columns>\r\n       <xcdg:DataGridControl.View>\r\n          <xcdg:CardflowView3D CardHeightToViewportRatio="0.5">\r\n             <xcdg:CardflowView3D.Theme>\r\n                <xcdg:ChameleonTheme/>\r\n             </xcdg:CardflowView3D.Theme>\r\n          </xcdg:CardflowView3D>           \r\n       </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n </Grid>\n'})})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var a=n(4164);const t={tabItem:"tabItem_Ymn6"};var i=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>D});var a=n(6540),t=n(4164),i=n(3104),o=n(6347),d=n(205),s=n(7485),l=n(1682),c=n(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:r,children:n}=e;return(0,a.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:a,default:t}}=e;return{value:r,label:n,attributes:a,default:t}}))}(n);return function(e){const r=(0,l.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function x(e){let{queryString:r=!1,groupId:n}=e;const t=(0,o.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,s.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(t.location.search);r.set(i,e),t.replace({...t.location,search:r.toString()})}),[i,t])]}function p(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,i=h(e),[o,s]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:r,tabValues:i}))),[l,u]=x({queryString:n,groupId:t}),[p,m]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,i]=(0,c.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:t}),w=(()=>{const e=l??p;return g({value:e,tabValues:i})?e:null})();(0,d.A)((()=>{w&&s(w)}),[w]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),m(e)}),[u,m,i]),tabValues:i}}var m=n(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function C(e){let{className:r,block:n,selectedValue:a,selectValue:o,tabValues:d}=e;const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const r=e.currentTarget,n=s.indexOf(r),t=d[n].value;t!==a&&(l(r),o(t))},u=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;r=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;r=s[n]??s[s.length-1];break}}r?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:d.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===r?0:-1,"aria-selected":a===r,ref:e=>s.push(e),onKeyDown:u,onClick:c,...i,className:(0,t.A)("tabs__item",w.tabItem,i?.className,{"tabs__item--active":a===r}),children:n??r},r)}))})}function b(e){let{lazy:r,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function v(e){const r=p(e);return(0,f.jsxs)("div",{className:(0,t.A)("tabs-container",w.tabList),children:[(0,f.jsx)(C,{...r,...e}),(0,f.jsx)(b,{...r,...e})]})}function D(e){const r=(0,m.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var a=n(6540);const t={},i=a.createContext(t);function o(e){const r=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);