"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[1283],{1986:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var t=n(4848),a=n(8453),i=n(1470),o=n(9365);const l={},d="Providing, Inserting, and Removing Data",s={id:"code-snippets/23",title:"Providing, Inserting, and Removing Data",description:"The following page provides a list of examples that demonstrate how to provide data to a grid.",source:"@site/datagrid/code-snippets/23.md",sourceDirName:"code-snippets",slug:"/code-snippets/23",permalink:"/xceed-doc-ui/datagrid/code-snippets/23",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Providing a Detail Configuration Item-container Style",permalink:"/xceed-doc-ui/datagrid/code-snippets/22"},next:{title:"Retrieving Child Contexts",permalink:"/xceed-doc-ui/datagrid/code-snippets/24"}},c={},m=[];function u(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"providing-inserting-and-removing-data",children:"Providing, Inserting, and Removing Data"})}),"\n",(0,t.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to provide data to a grid."}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsxs)(r.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,t.jsx)(r.em,{children:"Orders"})," table of the Northwind database, unless stated otherwise."]})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to a data table"}),(0,t.jsxs)(r.p,{children:['This first code example demonstrates how to create a connection to the Access version of the Northwind database and create a property named "Orders" to which the grid will be bound. The code should be placed in the ',(0,t.jsx)(r.strong,{children:"App.xaml.cs"})," file."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>      \r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  public partial class App : Application\r\n    {\r\n      public DataSet Data\r\n      {\r\n        get; set;\r\n      }\r\n      public DataTable Orders\r\n      {\r\n        get; set;\r\n      }\r\n      protected override void OnStartup( StartupEventArgs e )\r\n      {\r\n        // Set the licence key\r\n        Xceed.Wpf.DataGrid.Licenser.LicenseKey = "Enter your license key here";\r\n        Data = Xceed.Wpf.DataGrid.Samples.SampleData.DataProvider.GetNorthwindDataSet();\r\n        Orders = Data.Tables[ "Orders" ];\r\n        base.OnStartup( e );\r\n      }\r\n    }\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'    Public Partial Class App\r\n        Inherits Application\r\n        Public Property Data As DataSet\r\n        Public Property Orders As DataTable\r\n        Protected Overrides Sub OnStartup(ByVal e As StartupEventArgs)\r\n            \' Set the licence key\r\n            Xceed.Wpf.DataGrid.Licenser.LicenseKey = "Enter your license key here"\r\n            Data = Xceed.Wpf.DataGrid.Samples.SampleData.DataProvider.GetNorthwindDataSet()\r\n            Orders = Data.Tables("Orders")\r\n            MyBase.OnStartup(e)\r\n        End Sub\r\n    End Class\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to an array"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to an array defined in the resources of the containing grid."}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:s="clr-namespace:System;assembly=mscorlib"\r\n        xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">                     \r\n    <Grid.Resources>\r\n    <x:Array x:Key="data_list" Type="{x:Type s:String}">\r\n      <s:String>Sunday</s:String>\r\n      <s:String>Monday</s:String>\r\n      <s:String>Tuesday</s:String>\r\n      <s:String>Wednesday</s:String>\r\n      <s:String>Thursday</s:String>\r\n      <s:String>Friday</s:String>\r\n      <s:String>Saturday</s:String>\r\n    </x:Array>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{StaticResource data_list}"/>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  string[] data = new string[ 7 ];\r\n  data[ 0 ] = "Sunday";\r\n  data[ 1 ] = "Monday";\r\n  data[ 2 ] = "Tuesday";\r\n  data[ 3 ] = "Wednesday";\r\n  data[ 4 ] = "Thursday";\r\n  data[ 5 ] = "Friday";\r\n  data[ 6 ] = "Saturday";\r\n  dataGridControl.ItemsSource = data;\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Dim data() As New String( 6 )\r\n  data( 0 ) = "Sunday"\r\n  data( 1 ) = "Monday"\r\n  data( 2 ) = "Tuesday"\r\n  data( 3 ) = "Wednesday"\r\n  data( 4 ) = "Thursday"\r\n  data( 5 ) = "Friday"\r\n  data( 6 ) = "Saturday"\r\n  dataGridControl.ItemsSource = data\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Retrieving values from the current item"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to retrieve the value of the ",(0,t.jsx)(r.em,{children:"ShipCountry"})," and ",(0,t.jsx)(r.em,{children:"ShipCity"})," properties of the current item and display them in ",(0,t.jsx)(r.strong,{children:"TextBlocks"})," located above the grid. Note that an item in a grid must be current in order for the information to be displayed."]}),(0,t.jsx)(i.A,{children:(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <DockPanel>   \r\n        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">\r\n          <TextBlock Text="{Binding ElementName=OrdersGrid, Path=CurrentItem[ShipCountry]}"/>\r\n          <TextBlock Text=" - "/> \r\n          <TextBlock Text="{Binding ElementName=OrdersGrid, Path=CurrentItem[ShipCity]}"/>\r\n        </StackPanel>    \r\n        <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                              ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                              DockPanel.Dock="Bottom">\r\n        </xcdg:DataGridControl>\r\n    </DockPanel>\r\n  </Grid>\n'})})})})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Initializing an insertion row"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to initialize the values of the ",(0,t.jsx)(r.em,{children:"ShipCountry"}),", ",(0,t.jsx)(r.em,{children:"ShipCity"}),", and ",(0,t.jsx)(r.em,{children:"ShipVia"})," columns in an insertion row located in the fixed headers. The handler for the ",(0,t.jsx)(r.code,{children:"InitializingInsertionRow"})," event is defined in the code-behind class."]}),(0,t.jsxs)(r.p,{children:["The columns that are contained in the grid will be limited to those specified in the ",(0,t.jsx)(r.code,{children:"ItemProperties"})," of the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"}),"."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Orders}"\r\n                                      AutoCreateItemProperties="False">\r\n        <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n          <xcdg:DataGridItemProperty Name="ShipCountry" Title="Country"/>\r\n          <xcdg:DataGridItemProperty Name="ShipCity" Title="City"/>\r\n          <xcdg:DataGridItemProperty Name="ShipVia" Title="Ship With"/>\r\n        </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                          InitializingInsertionRow="InitInsertion">\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:CardView>\r\n            <xcdg:CardView.FixedHeaders>\r\n                <DataTemplate>\r\n                  <xcdg:InsertionRow/>\r\n                </DataTemplate>\r\n            </xcdg:CardView.FixedHeaders>\r\n          </xcdg:CardView>\r\n        </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid> \n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  private void InitInsertion( object sender, InitializingInsertionRowEventArgs e )\r\n  {\r\n    e.InsertionRow.Cells[ "ShipCountry" ].Content = \r\n          this.ParseCountry( System.Globalization.CultureInfo.CurrentCulture.DisplayName );\r\n    e.InsertionRow.Cells[ "ShipCity" ].Content = "Enter City Here";\r\n    e.InsertionRow.Cells[ "ShipVia" ].Content = "1";\r\n  }\r\n  private string ParseCountry( string name )\r\n  {\r\n    int startIndex = name.IndexOf( "(" );\r\n    return name.Substring( startIndex + 1, name.Length - startIndex - 2 );\r\n  } \n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Private Sub InitInertion( ByVal sender As Object, ByVal e As InitializingInsertionRowEventArgs )\r\n    e.InsertionRow.Cells( "ShipCountry" ).Content = \r\n                Me.ParseCountry( System.Globalization.CultureInfo.CurrentCulture.DisplayName )\r\n    e.InsertionRow.Cells( "ShipCity" ).Content = "Enter City Here"\r\n    e.InsertionRow.Cells( "ShipVia" ).Content = 1\r\n  End Sub\r\n  Private Function ParseCountry( ByVal name As String ) As String\r\n    Dim startIndex As Integer = name.IndexOf( "(" )\r\n    Return name.SubString( startIndex + 1, name.Length - startIndex - 2 )\r\n  End Function\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Providing unbound data"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to add ",(0,t.jsx)(r.strong,{children:"Person"})," data to a custom ",(0,t.jsx)(r.code,{children:"ObservableCollection"})," of ",(0,t.jsx)(r.strong,{children:"Person"})," objects."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation"\r\n        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">\r\n    <Grid.Resources>\r\n    <local:PersonObservableCollection x:Key="personData">\r\n      <local:Person FirstName="Jenny"\r\n                    LastName="Beland"\r\n                    Occupation="Writer"/>\r\n      <local:Person FirstName="Francois"\r\n                    LastName="Carignan"\r\n                    Occupation="Developer"/>\r\n      <local:Person FirstName="Pascal"\r\n                    LastName="Bourque"\r\n                    Occupation="Developer"/>\r\n      <local:Person FirstName="Michel"\r\n                    LastName="Fortin"\r\n                    Occupation="Developer"/>\r\n      <local:Person FirstName="Marc"\r\n                    LastName="Laroche"\r\n                    Occupation="Developer"/>\r\n      <local:Person FirstName="Pierre-Luc"\r\n                    LastName="Ledoux"\r\n                    Occupation="Developer"/>\r\n      <local:Person FirstName="Mathieu"\r\n                    LastName="Drimonakos"\r\n                    Occupation="TechnicalSupport"/>\r\n      <local:Person FirstName="Catherine"\r\n                    LastName="Sauzede"\r\n                    Occupation="Infograph"/>\r\n    </local:PersonObservableCollection>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_person"\r\n                                        ItemType="{x:Type local:Person}"\r\n                                        Source="{StaticResource personData}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="Occupation"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n          <scm:SortDescription PropertyName="Occupation"\r\n                                Direction="Ascending"/>\r\n        </xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="PersonGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_person}}"/>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  ObservableCollection<Person> people = new ObservableCollection<Person>();\r\n  people.Add( new Person( "Jenny", "Beland" ) );\r\n  people.Add( new Person( "Francois", "Carignan" ) );\r\n  people.Add( new Person( "Jacques", "Bourque" ) );\r\n  people.Add( new Person( "Pascal", "Bourque" ) );\r\n  people.Add( new Person( "Marc", "Laroche" ) );\r\n  people.Add( new Person( "Pierre-Luc", "Ledoux" ) );\r\n  people.Add( new Person( "Catherine", "Sauzede" ) );\r\n  people.Add( new Person( "Christian", "Nadeau" ) );\r\n  DataGridCollectionView collectionView = new DataGridCollectionView( people, typeof( Person ) );\r\n  dataGridControl.ItemsSource = collectionView;\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Dim people As New ObservableCollection( Of Person )()\r\n  people.Add( New Person( "Jenny", "Beland" ) )\r\n  people.Add( New Person( "Francois", "Carignan" ) )\r\n  people.Add( New Person( "Jacques", "Bourque" ) )\r\n  people.Add( New Person( "Pascal", "Bourque" ) )\r\n  people.Add( New Person( "Marc", "Laroche" ) )\r\n  people.Add( New Person( "Pierre-Luc", "Ledoux" ) )\r\n  people.Add( New Person( "Catherine", "Sauzede" ) )\r\n  people.Add( New Person( "Christian", "Nadeau" ) )\r\n  Dim collectionView As New DataGridCollectionView( people, GetType( Person ) )\r\n  dataGridControl.ItemsSource = collectionView\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to a LINQ table"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to bind a grid to a LINQ table and submit any modifications made to the data items using the ",(0,t.jsx)(r.code,{children:"SubmitChanges"})," method."]}),(0,t.jsxs)(r.p,{children:["This example assumes that a new LINQ to SQL Classes item named Northwind.dbml has been added to the project and that it contains the ",(0,t.jsx)(r.em,{children:"Orders"}),", ",(0,t.jsx)(r.em,{children:"Customers"}),", and ",(0,t.jsx)(r.em,{children:"Shippers"})," tables. The ",(0,t.jsx)(r.code,{children:"Northwind.designer.cs"})," that is created at the same time represents the NorthwindDataContext and should automatically contain all the relevant members. It also assumes that a property named ",(0,t.jsx)(r.code,{children:"LinqDataContext"})," that returns a new instance of the NorthwindDataContext exists in the ",(0,t.jsx)(r.strong,{children:"App.xaml.cs"})," code-behind file."]}),(0,t.jsx)(r.p,{children:"For more information on LINQ, refer to The LINQ Project Web site."}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=LinqDataContext.Orders}"/>\r\n      <DataTemplate DataType="{x:Type local:Shipper}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Customer}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Employee}">\r\n        <StackPanel Orientation="Horizontal">\r\n          <TextBlock Text="{Binding FirstName}"/>\r\n          <TextBlock Text=" " />\r\n          <TextBlock Text="{Binding LastName}"/>\r\n        </StackPanel>\r\n      </DataTemplate>\r\n      <xcdg:CellEditor x:Key="employeeEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current}, \r\n                                            Path=LinqDataContext.Employees}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="customerEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current},\r\n                                            Path=LinqDataContext.Customers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="shipperEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current}, Path=LinqDataContext.Shippers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n    </Grid.Resources>\r\n    <DockPanel>\r\n      <Button Content="Save Modifications"\r\n              Click="SaveModifications"\r\n              DockPanel.Dock="Top" />\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="OrderID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="EmployeeID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Employee"\r\n                      CellEditor="{StaticResource employeeEditor}"/>\r\n          <xcdg:Column FieldName="CustomerID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Customer"\r\n                      CellEditor="{StaticResource customerEditor}"\r\n                      Title="Company Name"/>\r\n          <xcdg:Column FieldName="ShipVia"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Shipper"\r\n                      CellEditor="{StaticResource shipperEditor}"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n            <xcdg:TableView.FixedFooters>\r\n              <DataTemplate>\r\n                <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n            </xcdg:TableView.FixedFooters>\r\n          </xcdg:TableView>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n    </DockPanel>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"  private void SaveModifications( object sender, RoutedEventArgs e )\r\n  {     \r\n    App.LinqDataContext.SubmitChanges();\r\n  }\n"})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"  Private Sub SaveModifications( sender As Object, e As RoutedEventArgs )\r\n    App.LinqDataContext.SubmitChanges()\r\n  End Sub\n"})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to a LINQ query (SQL)"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to bind a grid to an SQL LINQ query and submit any modifications made to the data items using the ",(0,t.jsx)(r.code,{children:"SubmitChanges"})," method."]}),(0,t.jsxs)(r.p,{children:["Although existing data items can be modified and the changes committed, it is not possible to insert new data items.\r\nThis example assumes that a new LINQ to SQL Classes item named Northwind.dbml has been added to the project and that it contains the ",(0,t.jsx)(r.em,{children:"Orders"}),", ",(0,t.jsx)(r.em,{children:"Customers"}),", and ",(0,t.jsx)(r.em,{children:"Shippers"})," tables. The ",(0,t.jsx)(r.code,{children:"Northwind.designer.cs"})," that is created at the same time represents the NorthwindDataContext and should automatically contain all the relevant members. It also assumes that a property named ",(0,t.jsx)(r.em,{children:"OrdersQuery"})," that returns a new new query based on the value selected in the combo box."]}),(0,t.jsxs)(r.p,{children:["The Window1 class implements INotifyPropertyChanged so that the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," can be notified when the query changes in order to refresh its content."]}),(0,t.jsx)(r.p,{children:"For more information on LINQ, refer to The LINQ Project Web site."}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=LinqDataContext.Orders}"/>\r\n      <DataTemplate DataType="{x:Type local:Shipper}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Customer}">\r\n        <TextBlock Text="{Binding CompanyName}"/>\r\n      </DataTemplate>\r\n      <DataTemplate DataType="{x:Type local:Employee}">\r\n        <StackPanel Orientation="Horizontal">\r\n          <TextBlock Text="{Binding FirstName}"/>\r\n          <TextBlock Text=" " />\r\n          <TextBlock Text="{Binding LastName}"/>\r\n        </StackPanel>\r\n      </DataTemplate>\r\n      <xcdg:CellEditor x:Key="employeeEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current}, \r\n                                            Path=LinqDataContext.Employees}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="customerEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current},\r\n                                            Path=LinqDataContext.Customers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n      <xcdg:CellEditor x:Key="shipperEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n            <ComboBox ItemsSource="{Binding Source={x:Static Application.Current}, Path=LinqDataContext.Shippers}"\r\n                      SelectedItem="{xcdg:CellEditorBinding}"/>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n      </xcdg:CellEditor>\r\n    </Grid.Resources>\r\n    <DockPanel>\r\n      <Button Content="Save Modifications"\r\n              Click="SaveModifications"\r\n              DockPanel.Dock="Top" />\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="OrderID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="EmployeeID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Employee"\r\n                      CellEditor="{StaticResource employeeEditor}"/>\r\n          <xcdg:Column FieldName="CustomerID"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Customer"\r\n                      CellEditor="{StaticResource customerEditor}"\r\n                      Title="Company Name"/>\r\n          <xcdg:Column FieldName="ShipVia"\r\n                      Visible="False"/>\r\n          <xcdg:Column FieldName="Shipper"\r\n                      CellEditor="{StaticResource shipperEditor}"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n            <xcdg:TableView.FixedFooters>\r\n              <DataTemplate>\r\n                <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n            </xcdg:TableView.FixedFooters>\r\n          </xcdg:TableView>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n    </DockPanel>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'namespace Xceed.Wpf.Documentation\r\n{\r\n  public partial class Window1 : Window, INotifyPropertyChanged\r\n  {\r\n    public Window1()\r\n    {\r\n      InitializeComponent();    \r\n    }\r\n    private IEnumerable m_query = null;\r\n    public IEnumerable OrdersQuery\r\n    {\r\n      get\r\n      {\r\n        if( m_query == null )\r\n        {\r\n          m_query = from orders in App.LinqDataContext.Orders\r\n                    select orders;\r\n        }\r\n        return m_query;\r\n      }\r\n      set\r\n      {\r\n        m_query = value;\r\n        this.OnPropertyChanged( new PropertyChangedEventArgs( "OrdersQuery" ) );\r\n      }\r\n    }\r\n    private void ShipperSelectionChanged( object sender, SelectionChangedEventArgs e )\r\n    {\r\n      this.OrdersQuery = from orders in App.LinqDataContext.Orders\r\n                  where orders.Shipper.CompanyName == ( ( Shipper )this.ShipperCombo.SelectedValue ).CompanyName\r\n                  select orders;\r\n    }\r\n    private void SaveModifications( object sender, RoutedEventArgs e )\r\n    {    \r\n      App.LinqDataContext.SubmitChanges();\r\n    }\r\n    public event PropertyChangedEventHandler PropertyChanged;\r\n    private void OnPropertyChanged( PropertyChangedEventArgs e )\r\n    {\r\n      if( this.PropertyChanged == null )\r\n        return;\r\n      this.PropertyChanged( this, e );\r\n    }\r\n  }\r\n}\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Namespace Xceed.Wpf.Documentation\r\n  Public Partial Class Window1\r\n      Inherits Window\r\n      Implements INotifyPropertyChanged\r\n      Public Sub New()\r\n        InitializeComponent()\r\n      End Sub\r\n      Private m_query As IEnumerable = Nothing\r\n      Public Property OrdersQuery() As IEnumerable\r\n        Get\r\n          If m_query Is Nothing Then\r\n            m_query = From orders In App.LinqDataContext.Orders _\r\n                      Select orders\r\n          End If\r\n          Return m_query\r\n        End Get\r\n        Set\r\n          m_query = Value\r\n          Me.OnPropertyChanged(New PropertyChangedEventArgs("OrdersQuery"))\r\n        End Set\r\n      End Property\r\n      Private Sub ShipperSelectionChanged(ByVal sender As Object, ByVal e As SelectionChangedEventArgs)\r\n        Me.OrdersQuey = From orders In App.LinqDataContext.Orders _\r\n                  Where orders.Shipper.CompanyName = CTYpe( Me.ShipperCombo.SelectedValue, Shipper).CompanyName _\r\n                  Select orders\r\n      End Sub\r\n      Private Sub SaveModifications(ByVal sender As Object, ByVal e As RoutedEventArgs)\r\n        App.LinqDataContext.SubmitChanges()\r\n      End Sub\r\n      Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\r\n      Private Sub OnPropertyChanged(ByVal e As PropertyChangedEventArgs)\r\n        If Me.PropertyChangedEvent Is Nothing Then\r\n          Return\r\n        End If\r\n        RaiseEvent PropertyChanged(Me, e)\r\n      End Sub\r\n    End Class\r\n  End Namespace\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to a LINQ query (XML)"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to an XML query on an XDocument that loads the XML version of the Orders table of the Northwind database."}),(0,t.jsx)(r.p,{children:"The content of the resulting grid will not be editable."}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                    Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}},\r\n                                    Path=XmlData}"/>\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  public IEnumerable XmlData\r\n  {\r\n    get\r\n    {\r\n      XDocument document = App.NorthwindDocument;\r\n      IEnumerable data = from order in document.Element( "dataroot" ).Descendants( "Orders" )\r\n                          select new\r\n                          {\r\n                            ShipCountry = order.Element( "ShipCountry" ).Value,\r\n                            ShipCity = order.Element( "ShipCity" ).Value,\r\n                            ShipAddress = order.Element( "ShipAddress" ).Value,\r\n                            ShipName = order.Element( "ShipName" ).Value,\r\n                            ShipVia = order.Element( "ShipVia" ).Value,\r\n                            Freight = order.Element( "Freight" ).Value\r\n                          };\r\n      return data;\r\n    }\r\n  }\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Public ReadOnly Property XmlData() As IEnumerable\r\n  Get\r\n    Dim document As XDocument = App.NorthwindDocument\r\n    Dim data As IEnumerable = From order In document.Element("dataroot").Descendants("Orders") _\r\n                              Select New With {.ShipCountry = order.Element("ShipCountry").Value, _\r\n                                .ShipCity = order.Element("ShipCity").Value, _\r\n                                .ShipAddress = order.Element("ShipAddress").Value, _\r\n                                .ShipName = order.Element("ShipName").Value, _\r\n                                .Freight = order.Element("Freight").Value}\r\n    Return data\r\n  End Get\r\nEnd Property\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to a master/detail data table"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to a DataTable that contains DataRelations that will be displayed as child and grandchild detail data."}),(0,t.jsx)(r.p,{children:'The code below demonstrates how to create a connection to the Access version of the Northwind database and create a property named "Employees" that retrieves its values from the Employees data table and to which a child and grandchild detail are added.'}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                            Path=Employees}"/>   \r\n        <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />\r\n      \r\n        <Style x:Key="alternatingDataRowStyle" TargetType="{x:Type xcdg:DataRow}">\r\n            <Style.Triggers>\r\n              <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                      Path=(xcdg:DataGridVirtualizingPanel.ItemIndex),\r\n                                      Converter={StaticResource rowIndexConverter}}"\r\n                            Value="True">\r\n                  <Setter Property="Background" Value="AliceBlue"/>                   \r\n              </DataTrigger>\r\n            </Style.Triggers>\r\n        </Style>\r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        AutoCreateDetailConfigurations="True">  \r\n          <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="Photo"\r\n                          Visible="False" />\r\n          </xcdg:DataGridControl.Columns>\r\n          <xcdg:DataGridControl.DetailConfigurations>\r\n            <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                      Title="Employee Orders"\r\n                                      ItemContainerStyle="{StaticResource alternatingDataRowStyle}">\r\n                <xcdg:DetailConfiguration.Columns>\r\n                  <xcdg:Column FieldName="EmployeeID"\r\n                                Visible="False" />\r\n                </xcdg:DetailConfiguration.Columns>\r\n                <xcdg:DetailConfiguration.DetailConfigurations>\r\n                  <xcdg:DetailConfiguration RelationName="Order_OrderDetails"\r\n                                            Title="Order Details"/>                   \r\n                </xcdg:DetailConfiguration.DetailConfigurations>\r\n            </xcdg:DetailConfiguration>\r\n          </xcdg:DataGridControl.DetailConfigurations>       \r\n      </xcdg:DataGridControl>\r\n  </Grid> \n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'static App()\r\n{\r\n  DataSet dataSet = new DataSet();\r\n  string mdbFile = @"Data\\Northwind.mdb";\r\n  string connString = String.Format( "Provider=Microsoft.ACE.OLEDB.12.0; Data Source={0}", mdbFile );\r\n  OleDbConnection conn = new OleDbConnection( connString );\r\n  m_adapter = new OleDbDataAdapter();\r\n  m_adapter.SelectCommand = new OleDbCommand( "SELECT * FROM Employees;", conn );\r\n  m_adapter.Fill( dataSet, "Employees" );\r\n  m_employees = dataSet.Tables[ "Employees" ];    \r\n    m_adapter = new OleDbDataAdapter();\r\n    m_adapter.SelectCommand = new OleDbCommand( "SELECT * FROM Orders;", conn );\r\n    m_adapter.Fill( dataSet, "Orders" );\r\n    m_orders = dataSet.Tables[ "Orders" ];\r\n  \r\n    m_adapter = new OleDbDataAdapter();\r\n    m_adapter.SelectCommand = new OleDbCommand( "SELECT * FROM [Order Details];", conn );\r\n    m_adapter.Fill( dataSet, "Order Details" );\r\n    m_orderDetails = dataSet.Tables[ "Order Details" ];\r\n  m_employees.ChildRelations.Add( new DataRelation( "Employee_Orders", m_employees.Columns[ "EmployeeID" ], m_orders.Columns[ "EmployeeID" ] ) );\r\n  m_orders.ChildRelations.Add( new DataRelation( "Order_OrderDetails", m_orders.Columns[ "OrderID" ], m_orderDetails.Columns[ "OrderID" ] ) );  \r\n}\r\npublic static DataTable Employees\r\n{\r\n  get\r\n  {\r\n    return m_employees;\r\n  }\r\n}\r\nprivate static DataTable m_employees;\r\nprivate static DataTable m_orders;\r\nprivate static DataTable m_orderDetails;\r\nprivate static OleDbDataAdapter m_adapter = null;\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Shared Sub New()\r\n    Dim dataSet As New DataSet()\r\n    Dim mdbfile As String = "Data\\Northwind.mdb"\r\n    Dim connString As String = String.Format("Provider=Microsoft.ACE.OLEDB.12.0; Data Source={0}", mdbfile)\r\n    Dim conn As New OleDbConnection(connString)\r\n    Dim adapter As New OleDbDataAdapter()\r\n    m_adapter = New OleDbDataAdapter()\r\n    m_adapter.SelectCommand = New OleDbCommand( "SELECT * FROM Employees;", conn )\r\n    m_adapter.Fill( dataSet, "Employees" )\r\n    m_employees = dataSet.Tables( "Employees" )\r\n    m_adapter = New OleDbDataAdapter()\r\n    m_adapter.SelectCommand = New OleDbCommand( "SELECT * FROM Orders;", conn )\r\n    m_adapter.Fill( dataSet, "Orders" )\r\n    m_orders = dataSet.Tables( "Orders" )\r\n  \r\n    m_adapter = New OleDbDataAdapter()\r\n    m_adapter.SelectCommand = New OleDbCommand( "SELECT * FROM [Order Details];", conn )\r\n    m_adapter.Fill( dataSet, "Order Details" )\r\n    m_orderDetails = dataSet.Tables( "Order Details" )\r\n    m_employees.ChildRelations.Add( New DataRelation( "Employee_Orders", m_employees.Columns( "EmployeeID" ), m_orders.Columns( "EmployeeID" ) ) )\r\n    m_orders.ChildRelations.Add( New DataRelation( "Order_OrderDetails", m_orders.Columns( "OrderID" ), m_orderDetails.Columns( "OrderID" ) ) )\r\n  End Sub\r\n  Public Shared ReadOnly Property Employees As DataTable\r\n    Get\r\n      Return m_employees\r\n    End Get\r\n  End Property\r\n  Private Shared m_employees As DataTable\r\n  Private Shared m_orders As DataTable\r\n  Private Shared m_orderDetails As DataTable\r\n  Private Shared m_adapter As OleDbDataAdapter = Nothing\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Defining detail descriptions"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to explicitly define detail descriptions for the DataRelations found in the ",(0,t.jsx)(r.strong,{children:"DataTable"})," to which the grid is bound and how to calculate statistical functions for a detail description whose results will be displayed in the StatRows contained in the footer sections of the details to which the description's corresponding detail configuration will be applied."]}),(0,t.jsx)(i.A,{children:(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Employees}"/>   \r\n      <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />\r\n    \r\n      <Style x:Key="alternatingDataRowStyle" TargetType="{x:Type xcdg:DataRow}">\r\n          <Style.Triggers>\r\n            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                    Path=(xcdg:DataGridVirtualizingPanel.ItemIndex),\r\n                                    Converter={StaticResource rowIndexConverter}}"\r\n                          Value="True">\r\n                <Setter Property="Background" Value="AliceBlue"/>                   \r\n            </DataTrigger>\r\n          </Style.Triggers>\r\n      </Style>\r\n    </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        AutoCreateDetailConfigurations="True">  \r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="Photo"\r\n                      Visible="False" />\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n        <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                  Title="Employee Orders"\r\n                                  ItemContainerStyle="{StaticResource alternatingDataRowStyle}">\r\n            <xcdg:DetailConfiguration.Columns>\r\n              <xcdg:Column FieldName="EmployeeID"\r\n                            Visible="False" />\r\n            </xcdg:DetailConfiguration.Columns>\r\n            <xcdg:DetailConfiguration.DetailConfigurations>\r\n              <xcdg:DetailConfiguration RelationName="Order_OrderDetails"\r\n                                        Title="Order Details"/>                   \r\n            </xcdg:DetailConfiguration.DetailConfigurations>\r\n        </xcdg:DetailConfiguration>\r\n      </xcdg:DataGridControl.DetailConfigurations>       \r\n  </xcdg:DataGridControl>\r\n  </Grid> \n'})})})})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Manually handling the insertion process"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to manually handle the insertion process of a new item into a collection."}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_persons"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=PersonList}"\r\n                                        CreatingNewItem="CollectionView_CreatingNewItem"\r\n                                        CommittingNewItem="CollectionView_CommittingNewItem"\r\n                                        CancelingNewItem="CollectionView_CancelingNewItem"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="PersonsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_persons}}">\r\n      <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n            <xcdg:TableView.FixedHeaders>\r\n                <DataTemplate>\r\n                  <xcdg:InsertionRow/>\r\n                </DataTemplate>\r\n            </xcdg:TableView.FixedHeaders>\r\n          </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"  private void CollectionView_CreatingNewItem( object sender, DataGridCreatingNewItemEventArgs e )\r\n  {\r\n    e.NewItem = new Person( Person.AutoIncrementID, string.Empty, string.Empty, -1 );\r\n    e.Handled = true;\r\n  }\r\n  private void CollectionView_CommittingNewItem( object sender, DataGridCommittingNewItemEventArgs e )\r\n  {\r\n    List<Person> source = e.CollectionView.SourceCollection as List<Person>;\r\n    source.Add( ( Person )e.Item );\r\n    Person.AutoIncrementID = Person.AutoIncrementID + 1;\r\n    // the new item is always added at the end of the list.     \r\n    e.Index = source.Count - 1;\r\n    e.NewCount = source.Count;\r\n    e.Handled = true;\r\n  }\r\n    private void CollectionView_CancelingNewItem( object sender, DataGridItemHandledEventArgs e )\r\n    {\r\n    // Manually handling the insertion of new items requires that the CreatingNewItem,\r\n    // CommitingNewItem, and CancelingNewItem events must all be handled even if nothing\r\n    // is done in the event.\r\n    e.Handled = true;\r\n  }\n"})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"  Private Sub CollectionView_CreatingNewItem( ByVal sender As Object, _\r\n                                              ByVal e As DataGridCreatingNewItemEventArgs )\r\n    e.NewItem = New Person( Person.AutoIncrementID, String.Empty, String.Empty, -1 )\r\n    e.Handled = True\r\n  End Sub\r\n  Private Sub CollectionView_CommittingNewItem( ByVal sender As Object, _\r\n                                                ByVal e As DataGridCommittingNewItemEventArgs )\r\n    Dim source As List( Of Person ) = CType( e.CollectionView.SourceCollection, List( Of Person ) )\r\n    source.Add( CType( e.Item, Person ) )\r\n    Person.AutoIncrementID = Person.AutoIncrementID + 1\r\n    ' the new item is always added at the end of the list.\r\n    e.Index = source.Count - 1\r\n    e.NewCount = source.Count\r\n    e.Handled = True\r\n  End Sub\r\n  Private Sub CollectionView_CancelingNewItem( ByVal sender As Object, _\r\n                                              ByVal e As DataGridItemHandledEventArgs )\r\n    ' Manually handling the insertion of new items requires that the CreatingNewItem,\r\n    ' CommitingNewItem, and CancelingNewItem events must all be handled even if nothing\r\n    ' is done in the event.\r\n    e.Handled = True\r\n  End Sub\n"})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Deleting selected items"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to delete the selected items and handle the ",(0,t.jsx)(r.code,{children:"DeletingSelectedItemError"})," and ",(0,t.jsx)(r.code,{children:"DeletingSelectedItems"})," events."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                          Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />      \r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                          IsDeleteCommandEnabled="True"\r\n                          DeletingSelectedItemError="OrdersGrid_DeletingSelectedItemError"\r\n                          DeletingSelectedItems="OrdersGrid_DeletingSelectedItems"/>       \r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'  private void OrdersGrid_DeletingSelectedItemError( object sender, DeletingSelectedItemErrorRoutedEventArgs e )\r\n  {    \r\n    MessageBoxResult result = System.Windows.MessageBox.Show( "The following error occurred while attempting to delete an item: " +\r\n                                              e.Exception.Message + " Do you want to attempt to continue?", "Error", MessageBoxButton.YesNoCancel );\r\n    // If "No", the item would be skipped. Since "Skip" is the default action,\r\n    // there is no need to verify it.\r\n    if( result == MessageBoxResult.Yes )\r\n    {\r\n      if( this.OrdersGrid.IsBeingEdited )\r\n      {\r\n        try\r\n        {\r\n          this.OrdersGrid.CancelEdit();\r\n          e.Action = DeletingSelectedItemErrorAction.Retry;\r\n        }\r\n        catch\r\n        {\r\n          e.Action = DeletingSelectedItemErrorAction.Skip;\r\n        }        \r\n      }\r\n    }\r\n    if( result == MessageBoxResult.Cancel )\r\n    {\r\n      e.Action = DeletingSelectedItemErrorAction.Abort;\r\n    }\r\n    }\r\n    private void OrdersGrid_DeletingSelectedItems( object sender, CancelRoutedEventArgs e )\r\n    {\r\n    MessageBoxResult result = System.Windows.MessageBox.Show( "Are you certain you want to delete the selected rows?", "Confirm Delete", MessageBoxButton.YesNo );\r\n    if( result == MessageBoxResult.No )\r\n    {\r\n      e.Cancel = true;\r\n    }     \r\n  }\n'})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'  Private Sub OrdersGrid_DeletingSelectedItemError( ByVal sender As Object, ByVal e As DeletingSelectedItemErrorRoutedEventArgs )\r\n    Dim result As MessageBoxResult = System.Windows.MessageBox.Show( "The following error occurred while attempting to delete an item: " & _\r\n                                              e.Exception.Message & " Do you want to attempt to continue?", "Error", MessageBoxButton.YesNoCancel )\r\n    \' If "No", the item would be skipped. Since "Skip" is the default action,\r\n    \' there is no need to verify it.\r\n    If result = MessageBoxResult.Yes Then\r\n      If Me.OrdersGrid.IsBeingEdited Then\r\n        Try\r\n          Me.OrdersGrid.CancelEdit()\r\n          e.Action = DeletingSelectedItemErrorAction.Retry\r\n        Catch\r\n          e.Action = DeletingSelectedItemErrorAction.Skip\r\n        End Try\r\n      End If\r\n    End If\r\n    If result = MessageBoxResult.Cancel Then\r\n      e.Action = DeletingSelectedItemErrorAction.Abort\r\n    End If\r\n  End Sub\r\n  Private Sub OrdersGrid_DeletingSelectedItems( ByVal sender As Object, ByVal e As CancelRoutedEventArgs )\r\n    Dim result As MessageBoxResult = System.Windows.MessageBox.Show( "Are you certain you want to delete the selected rows?", _\r\n                                                                  "Confirm Delete", MessageBoxButton.YesNo )\r\n    If result = MessageBoxResult.No Then\r\n      e.Cancel = True\r\n    End If\r\n  End Sub\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Binding to an IQueryable source"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to bind to a data source that implements ",(0,t.jsx)(r.code,{children:"IQueryable"})," (LINQ DataContext) and allow items to be edited, deleted, inserted, and refreshed."]}),(0,t.jsxs)(i.A,{children:[(0,t.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridVirtualizingQueryableCollectionViewSource x:Key="cvs_queryableSource"\r\n                                                              QueryableSource="{Binding Path=QueryableSource}"\r\n                                                              CommitMode="EditCommitted"\r\n                                                              CreatingNewItem="DataGridVirtualizingQueryableCollectionViewSource_CreatingNewItem"\r\n                                                              CommittingNewItem="DataGridVirtualizingQueryableCollectionViewSource_CommittingNewItem"\r\n                                                              CancelingNewItem="DataGridVirtualizingQueryableCollectionViewSource_CancelingNewItem"\r\n                                                              CommitItems="DataGridVirtualizingQueryableCollectionViewSource_CommitItems"\r\n                                                              RemovingItem="DataGridVirtualizingQueryableCollectionViewSource_RemovingItem" />\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_queryableSource}}"\r\n                          ItemScrollingBehavior="Deferred"\r\n                          MaxGroupLevels="2"\r\n                          MaxSortLevels="2"\r\n                          IsDeleteCommandEnabled="True"\r\n                          IsRefreshCommandEnabled="True">\r\n        <xcdg:DataGridControl.Resources>\r\n          <Style TargetType="{x:Type xcdg:Row}"\r\n                  x:Key="RowHeightStyle">\r\n              <Setter Property="Height"\r\n                      Value="27" />\r\n          </Style>\r\n          <Style TargetType="{x:Type xcdg:DataRow}"\r\n                  BasedOn="{StaticResource RowHeightStyle}" />\r\n          <Style TargetType="{x:Type xcdg:InsertionRow}"\r\n                  BasedOn="{StaticResource RowHeightStyle}" />\r\n        </xcdg:DataGridControl.Resources>\r\n        <xcdg:DataGridControl.View>\r\n          <xcdg:TableView>\r\n              <xcdg:TableView.FixedHeaders>\r\n                <DataTemplate>\r\n                    <xcdg:InsertionRow />\r\n                </DataTemplate>\r\n              </xcdg:TableView.FixedHeaders>\r\n          </xcdg:TableView>\r\n        </xcdg:DataGridControl.View>\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="ProductID"\r\n                        AllowSort="False"\r\n                        AllowGroup="False" />\r\n        </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,t.jsx)(o.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"  public partial class Window1 : Window\r\n  {\r\n    public Window1()\r\n    {\r\n      this.DataContext = this;\r\n      InitializeComponent();\r\n    }\r\n    // QUERYABLE SOURCE\r\n    public IQueryable QueryableSource\r\n    {\r\n      get\r\n      {\r\n        if( m_queryable == null )\r\n        {\r\n          m_northwind = new NorthwindDataContext();\r\n          m_queryable = m_northwind.Products;\r\n        }\r\n        return m_queryable;\r\n      }\r\n    }\r\n    private NorthwindDataContext m_northwind;\r\n    private IQueryable m_queryable;\r\n    // QUERYABLE INSERTION SUPPORT\r\n    private void DataGridVirtualizingQueryableCollectionViewSource_CreatingNewItem( object sender, DataGridCreatingNewItemEventArgs e )\r\n    {\r\n      Product productToInsert = new Product();\r\n      e.NewItem = productToInsert;\r\n      m_northwind.Products.InsertOnSubmit( productToInsert );\r\n      e.Handled = true;\r\n    }\r\n    private void DataGridVirtualizingQueryableCollectionViewSource_CommittingNewItem( object sender, DataGridCommittingNewItemEventArgs e )\r\n    {\r\n      try\r\n      {\r\n        m_northwind.SubmitChanges();\r\n      }\r\n      catch\r\n      {\r\n        e.Cancel = true;\r\n      }\r\n      e.Handled = true;\r\n    }\r\n    private void DataGridVirtualizingQueryableCollectionViewSource_CancelingNewItem( object sender, DataGridItemHandledEventArgs e )\r\n    {\r\n      m_northwind.GetChangeSet().Inserts.Clear();\r\n      e.Handled = true;\r\n    }\r\n    // QUERYABLE EDIT SUPPORT\r\n    private void DataGridVirtualizingQueryableCollectionViewSource_CommitItems( object sender, CommitItemsEventArgs e )\r\n    {\r\n      try\r\n      {\r\n        m_northwind.SubmitChanges();\r\n      }\r\n      catch\r\n      {\r\n        m_northwind.GetChangeSet().Updates.Clear();\r\n      }\r\n      finally\r\n      {\r\n        e.AsyncCommitInfo.EndCommit();\r\n      }\r\n    }\r\n    // QUERYABLE DELETE SUPPORT\r\n    private void DataGridVirtualizingQueryableCollectionViewSource_RemovingItem( object sender, DataGridRemovingItemEventArgs e )\r\n    {\r\n      try\r\n      {\r\n        m_northwind.Products.DeleteOnSubmit( e.Item as Product );\r\n        m_northwind.SubmitChanges();\r\n      }\r\n      catch\r\n      {\r\n        m_northwind.GetChangeSet().Deletes.Clear();\r\n        e.Cancel = true;\r\n      }\r\n      e.Handled = true;\r\n    }\r\n  }\n"})})}),(0,t.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"    Public Partial Class Window1\r\n                        Inherits Window\r\n      Public Sub New\r\n        Me.DataContext = Me\r\n        InitializeComponent()\r\n      End Sub\r\n      ' QUERYABLE SOURCE\r\n      Public ReadOnly Property QueryableSource As IQueryable\r\n        Get\r\n          If m_queryable Is Nothing Then\r\n            m_northwind = New NorthwindDataContext()\r\n            m_queryable = m_northwind.Products\r\n          End If\r\n          Return m_queryable\r\n        End Get\r\n      End Property\r\n      Private m_northwind As NorthwindDataContext\r\n      Private m_queryable As IQueryable\r\n      ' QUERYABLE INSERTION SUPPORT\r\n      Private Sub DataGridVirtualizingQueryableCollectionViewSource_CreatingNewItem( sender As Object, e As DataGridCreatingNewItemEventArgs )\r\n        Dim productToInsert As New Product()\r\n        e.NewItem = productToInsert\r\n        m_northwind.Products.InsertOnSubmit( productToInsert )\r\n        e.Handled = True\r\n      End Sub\r\n      Private Sub DataGridVirtualizingQueryableCollectionViewSource_CommittingNewItem( sender As Object, e As DataGridCommittingNewItemEventArgs )\r\n        Try\r\n          m_northwind.SubmitChanges()\r\n        Catch e As Exception\r\n          e.Cancel = True\r\n        End try\r\n        e.Handled = True\r\n      End Sub\r\n      Private Sub DataGridVirtualizingQueryableCollectionViewSource_CancelingNewItem( sender As Object, e As DataGridItemHandledEventArgs )\r\n        m_northwind.GetChangeSet().Inserts.Clear()\r\n        e.Handled = True\r\n      End Sub\r\n      ' QUERYABLE EDIT SUPPORT\r\n      Private Sub DataGridVirtualizingQueryableCollectionViewSource_CommitItems( sender As Object, e As CommitItemsEventArgs )\r\n        Try\r\n          m_northwind.SubmitChanges()\r\n        Catch e As Exception\r\n          m_northwind.GetChangeSet().Updates.Clear()\r\n        Finally\r\n          e.AsyncCommitInfo.EndCommit()\r\n        End Try\r\n      End Sub\r\n      ' QUERYABLE DELETE SUPPORT\r\n      Private Sub DataGridVirtualizingQueryableCollectionViewSource_RemovingItem( sender As Object, e as DataGridRemovingItemEventArgs )\r\n        Try\r\n          m_northwind.Products.DeleteOnSubmit( TryCast( e.Item, Product ) )\r\n          m_northwind.SubmitChanges()\r\n        Catch e As Exception\r\n          m_northwind.GetChangeSet().Deletes.Clear()\r\n          e.Cancel = True\r\n        End Try\r\n        e.Handled = True\r\n      End Sub\r\n    End Class\n"})})})]})]})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var t=n(4164);const a={tabItem:"tabItem_Ymn6"};var i=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>w});var t=n(6540),a=n(4164),i=n(3104),o=n(6347),l=n(205),d=n(7485),s=n(1682),c=n(679);function m(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return m(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:a}}=e;return{value:r,label:n,attributes:t,default:a}}))}(n);return function(e){const r=(0,s.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function p(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function h(e){let{queryString:r=!1,groupId:n}=e;const a=(0,o.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,d.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(a.location.search);r.set(i,e),a.replace({...a.location,search:r.toString()})}),[i,a])]}function g(e){const{defaultValue:r,queryString:n=!1,groupId:a}=e,i=u(e),[o,d]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:i}))),[s,m]=h({queryString:n,groupId:a}),[g,x]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,i]=(0,c.Dv)(n);return[a,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),C=(()=>{const e=s??g;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{C&&d(C)}),[C]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),m(e),x(e)}),[m,x,i]),tabValues:i}}var x=n(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var S=n(4848);function b(e){let{className:r,block:n,selectedValue:t,selectValue:o,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const r=e.currentTarget,n=d.indexOf(r),a=l[n].value;a!==t&&(s(r),o(a))},m=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;r=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;r=d[n]??d[d.length-1];break}}r?.focus()};return(0,S.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,S.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>d.push(e),onKeyDown:m,onClick:c,...i,className:(0,a.A)("tabs__item",C.tabItem,i?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function D(e){let{lazy:r,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,S.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function y(e){const r=g(e);return(0,S.jsxs)("div",{className:(0,a.A)("tabs-container",C.tabList),children:[(0,S.jsx)(b,{...r,...e}),(0,S.jsx)(D,{...r,...e})]})}function w(e){const r=(0,x.A)();return(0,S.jsx)(y,{...e,children:m(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(6540);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);