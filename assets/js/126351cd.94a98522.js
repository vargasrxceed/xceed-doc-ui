"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7684],{2526:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=r(4848),a=r(8453),i=r(1470),o=r(9365);const l={},d="Detail Configurations",s={id:"fundamentals/providing-inserting-remove/master-detail/detail-configuration",title:"Detail Configurations",description:"The appearance of each detail in a grid or detail is defined by detail configurations that can be automatically created and/or explicitly provided through a grid or detail's DetailConfigurations property. Each detail configuration is identified by its RelationName property, which must correspond to the name of one of the detail descriptions defined in the parent DataGridCollectionView, DataGridCollectionViewSource, or DataGridDetailDescription (see Example 3).",source:"@site/datagrid/fundamentals/providing-inserting-remove/master-detail/detail-configuration.md",sourceDirName:"fundamentals/providing-inserting-remove/master-detail",slug:"/fundamentals/providing-inserting-remove/master-detail/detail-configuration",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/detail-configuration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Data-grid Contexts",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/datagrid-contexts"},next:{title:"View Properties",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/view-properties"}},c={},u=[{value:"Customizing Detail Configurations",id:"customizing-detail-configurations",level:2},{value:"Default Detail Configurations",id:"default-detail-configurations",level:2},{value:"Examples",id:"examples",level:2}];function g(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"detail-configurations",children:"Detail Configurations"})}),"\n",(0,n.jsxs)(t.p,{children:["The appearance of each detail in a grid or detail is defined by detail configurations that can be automatically created and/or explicitly provided through a grid or detail's ",(0,n.jsx)(t.code,{children:"DetailConfigurations"})," property. Each detail configuration is identified by its RelationName property, which must correspond to the name of one of the detail descriptions defined in the parent ",(0,n.jsx)(t.code,{children:"DataGridCollectionView"}),", ",(0,n.jsx)(t.code,{children:"DataGridCollectionViewSource"}),", or ",(0,n.jsx)(t.code,{children:"DataGridDetailDescription"})," (see Example 3)."]}),"\n",(0,n.jsxs)(t.p,{children:["To automatically create detail configurations, a grid or detail's AutoCreateDetailConfigurations property must be set to ",(0,n.jsx)(t.strong,{children:"true"})," (by default, ",(0,n.jsx)(t.strong,{children:"false"})," at the grid level and ",(0,n.jsx)(t.strong,{children:"true"})," for detail configurations)."]}),"\n",(0,n.jsx)(t.h2,{id:"customizing-detail-configurations",children:"Customizing Detail Configurations"}),"\n",(0,n.jsxs)(t.p,{children:["Each explicitly defined detail configurations provide a customized configuration that will be applied to all details created from the configuration's corresponding detail description. Like group configurations, detail configurations expose header and footer sections through which the ",(0,n.jsx)(t.strong,{children:"DataTemplates"})," representing the items that will be contained in the header and footer section of each resulting same-level detail are provided."]}),"\n",(0,n.jsxs)(t.p,{children:["By default, detail configurations contain a ",(0,n.jsx)(t.code,{children:"ColumnManagerRow"})," and a ",(0,n.jsx)(t.strong,{children:"TextBlock"})," that displays the detail configuration's Title in their header section. In XAML, the content of a header or footer section can be cleared by setting the ",(0,n.jsx)(t.code,{children:"UseDefaultHeadersFooters"})," property of a detail configuration to ",(0,n.jsx)(t.strong,{children:"false"}),". If left to true, any items that are added to a header or footer section will be added after the default headers and footers."]}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Setting the UseDefaultHeadersFooters property to false will exclude the default header and footer items from all header and footer sections."})}),"\n",(0,n.jsxs)(t.p,{children:["In code, the collections can be cleared by calling the ",(0,n.jsx)(t.code,{children:"Clear"})," method."]}),"\n",(0,n.jsxs)(t.admonition,{type:"note",children:[(0,n.jsxs)(t.p,{children:["Non-row items that are added to a header or footer section of a detail configuration will not be indented. In order to indent and align them with any row-based items contained in a header or footer section, a ",(0,n.jsx)(t.code,{children:"HierarchicalGroupLevelIndicatorPane"})," must be contained as the first item of the DataTemplate that represents the non-row item (see Example 2)."]}),(0,n.jsxs)(t.p,{children:["If group indentation is also to be followed, a ",(0,n.jsx)(t.code,{children:"GroupLevelIndicatorPane"})," whose Indented property is set to false must be provided after the ",(0,n.jsx)(t.code,{children:"HierarchicalGroupLevelIndicatPane"}),"."]})]}),"\n",(0,n.jsxs)(t.p,{children:["Through the ",(0,n.jsx)(t.code,{children:"ItemContainerStyle"})," and ",(0,n.jsx)(t.code,{children:"ItemContainerStyleSelector"})," properties, different styles can be applied to the data items in the details to which the configuration is applied (see Example 1). Styles for the data items in a detail's groups can also be defined through the ",(0,n.jsx)(t.code,{children:"ItemContainerStyle"})," and ",(0,n.jsx)(t.code,{children:"ItemContainerStyleSelector"})," properties of the group configuration defined by the configuration's DefaultGroupConfiguration property or returned by its the GroupConfigurationSelector (see ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/grouping/grouping-configuration",children:"Group Configurations"})," topic)."]}),"\n",(0,n.jsxs)(t.p,{children:["A detail configuration's corresponding detail description determines which columns will be displayed in the details to which the configuration will be applied. If a configuration's ",(0,n.jsx)(t.code,{children:"AutoCreateColumns"})," property is set to false (by default, ",(0,n.jsx)(t.strong,{children:"true"}),"), the columns that will appear in the details must be manually provided through its Columns collection. All visible columns (those whose Visible property is set to ",(0,n.jsx)(t.strong,{children:"true"}),") can be retrieved through ",(0,n.jsx)(t.code,{children:"VisibleColumns"})," collection."]}),"\n",(0,n.jsxs)(t.p,{children:["End users can be prevented from toggling the expansion state of the resulting details by setting the configuration's ",(0,n.jsx)(t.code,{children:"AllowDetailToggle"})," property to false."]}),"\n",(0,n.jsx)(t.h2,{id:"default-detail-configurations",children:"Default Detail Configurations"}),"\n",(0,n.jsxs)(t.p,{children:["By default, if an explicit detail configuration is not provided, the built-in configuration will be applied to all details; however, a custom default detail configuration that provides a generic subset of properties whose values can be applied to any details in a grid and any descendant details can be provided through a grid or detail's ",(0,n.jsx)(t.code,{children:"DefaultDetailConfiguration"})," property (see Example 4)."]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Employees table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 1: Providing a detail configuration item-container style"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to provide an item-container style for the ",(0,n.jsx)(t.em,{children:"Employee_Orders"})," data relation."]}),(0,n.jsx)(i.A,{children:(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                Path=Employees}"/>           \r\n    \r\n      <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />\r\n    \r\n      <Style x:Key="alternatingDataRowStyle" TargetType="{x:Type xcdg:DataRow}">\r\n        <Style.Triggers>\r\n          <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                  Path=(xcdg:DataGridVirtualizingPanel.ItemIndex),\r\n                                  Converter={StaticResource rowIndexConverter}}"\r\n                        Value="True">\r\n              <Setter Property="Background" Value="AliceBlue"/>                    \r\n          </DataTrigger>\r\n        </Style.Triggers>\r\n      </Style>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                    ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                    AutoCreateDetailConfigurations="True">   \r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n        <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                  Title="Employee Orders"\r\n                                  ItemContainerStyle="{StaticResource alternatingDataRowStyle}"/>                        \r\n      </xcdg:DataGridControl.DetailConfigurations>      \r\n    </xcdg:DataGridControl>\r\n  </Grid> \n'})})})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 2: Indenting a non-row item in a detail configuration header"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to add a non-row item that will act as a detail separator to the header section of a detail configuration whose indentation will correspond to detail and group levels in which it is contained."}),(0,n.jsx)(i.A,{children:(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                  Path=Employees}"/>\r\n  \r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                          AutoCreateDetailConfigurations="True">  \r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="Photo"\r\n                      Visible="False" />\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n          <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                    Title="Employee Orders"\r\n                                    UseDefaultHeadersFooters="False">\r\n            <xcdg:DetailConfiguration.Headers>\r\n                <DataTemplate>\r\n                  <DockPanel>                                   \r\n                      <xcdg:HierarchicalGroupLevelIndicatorPane  xcdg:GroupLevelIndicatorPane.ShowIndicators="False"\r\n                                                                xcdg:TableView.CanScrollHorizontally="False"\r\n                                                                  DockPanel.Dock="Left" />\r\n                      <Border Height="24"\r\n                              xcdg:TableView.CanScrollHorizontally="False"\r\n                              Background="AliceBlue"/>\r\n                  </DockPanel>\r\n                </DataTemplate> \r\n              <DataTemplate>\r\n                  <xcdg:ColumnManagerRow />\r\n                </DataTemplate>\r\n            </xcdg:DetailConfiguration.Headers>\r\n          </xcdg:DetailConfiguration>\r\n      </xcdg:DataGridControl.DetailConfigurations>       \r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 3: Defining detail descriptions"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to explicitly define detail descriptions for the ",(0,n.jsx)(t.code,{children:"DataRelations"})," found in the ",(0,n.jsx)(t.code,{children:"DataTable"})," to which the grid is bound and how to calculate statistical functions for a detail description whose results will be displayed in the StatRows contained in the footer sections of the details to which the description's corresponding detail configuration will be applied."]}),(0,n.jsx)(i.A,{children:(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid>\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Employees}">\r\n        <xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n            <xcdg:DataRelationDetailDescription RelationName="Employee_Orders"\r\n                                                Title="Employee Orders">\r\n              <xcdg:DataRelationDetailDescription.DetailDescriptions>\r\n                  <xcdg:DataRelationDetailDescription RelationName="Order_OrderDetails"\r\n                                                      Title="Order Details">\r\n                    <xcdg:DataRelationDetailDescription.ItemProperties>\r\n                        <xcdg:DataGridItemProperty Name="UnitPrice" />\r\n                        <xcdg:DataGridItemProperty Name="Quantity" />\r\n                        <xcdg:DataGridItemProperty Name="Discount" />\r\n                    </xcdg:DataRelationDetailDescription.ItemProperties>\r\n                    <xcdg:DataRelationDetailDescription.StatFunctions>                         \r\n                        <xcdg:SumFunction ResultPropertyName="sum_quantity"\r\n                                          SourcePropertyName="Quantity" />\r\n                        <xcdg:AverageFunction ResultPropertyName="average_unitprice"\r\n                                              SourcePropertyName="UnitPrice" />\r\n                    </xcdg:DataRelationDetailDescription.StatFunctions>\r\n                  </xcdg:DataRelationDetailDescription>\r\n              </xcdg:DataRelationDetailDescription.DetailDescriptions>\r\n            </xcdg:DataRelationDetailDescription>\r\n        </xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        ItemsSourceName="Employee Information"\r\n                        AutoCreateDetailConfigurations="True">\r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n        <xcdg:DetailConfiguration RelationName="Employee_Orders">\r\n            <xcdg:DetailConfiguration.DetailConfigurations>\r\n              <xcdg:DetailConfiguration RelationName="Order_OrderDetails">\r\n                  <xcdg:DetailConfiguration.Footers>\r\n                    <DataTemplate>\r\n                        <xcdg:StatRow Background="AliceBlue">\r\n                          <xcdg:StatCell FieldName="UnitPrice"\r\n                                          ResultPropertyName="average_unitprice"\r\n                                          ResultConverterParameter="f2" />\r\n                          <xcdg:StatCell FieldName="Quantity"\r\n                                          ResultPropertyName="sum_quantity" />                            \r\n                        </xcdg:StatRow>\r\n                    </DataTemplate>\r\n                  </xcdg:DetailConfiguration.Footers>\r\n              </xcdg:DetailConfiguration>\r\n            </xcdg:DetailConfiguration.DetailConfigurations>\r\n        </xcdg:DetailConfiguration>\r\n      </xcdg:DataGridControl.DetailConfigurations> \r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 4: Providing a default detail configuration"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to provide a default detail configuration that will be applied to all details in a grid and ",(0,n.jsx)(t.strong,{children:"any descendant details"})," for which an explicit detail configuration has not been provided."]}),(0,n.jsx)(i.A,{children:(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid>\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current}, Path=Employees}" />\r\n    \r\n      <xcdg:IndexToOddConverter x:Key="rowIndexConverter" />\r\n    \r\n      <Style x:Key="alternatingDataRowStyle"\r\n              TargetType="{x:Type xcdg:DataRow}">\r\n          <Style.Triggers>\r\n            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                              Path=(xcdg:DataGridVirtualizingPanel.ItemIndex),\r\n                              Converter={StaticResource rowIndexConverter}}"\r\n                          Value="True">\r\n                <Setter Property="Background"\r\n                        Value="AliceBlue" />\r\n            </DataTrigger>\r\n          </Style.Triggers>\r\n      </Style>\r\n  \r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        ItemsSourceName="Employee Information"\r\n                        AutoCreateDetailConfigurations="True">\r\n      <xcdg:DataGridControl.DefaultDetailConfiguration>\r\n        <xcdg:DefaultDetailConfiguration UseDefaultHeadersFooters="False"\r\n                                          ItemContainerStyle="{StaticResource alternatingDataRowStyle}"\r\n                                          xcdg:TableView.ShowFixedColumnSplitter="False">\r\n            <xcdg:DefaultDetailConfiguration.DefaultGroupConfiguration>\r\n              <xcdg:GroupConfiguration InitiallyExpanded="False" />\r\n            </xcdg:DefaultDetailConfiguration.DefaultGroupConfiguration>\r\n            <xcdg:DefaultDetailConfiguration.Headers>\r\n              <DataTemplate>\r\n                  <DockPanel>\r\n                    <xcdg:HierarchicalGroupLevelIndicatorPane  xcdg:GroupLevelIndicatorPane.ShowIndicators="False"\r\n                                                                xcdg:TableView.CanScrollHorizontally="False"\r\n                                                                DockPanel.Dock="Left" />\r\n                    <ContentPresenter Content="{Binding RelativeSource={RelativeSource Self},\r\n                                      Path=(xcdg:DataGridControl.DataGridContext).SourceDetailConfiguration.Title}"\r\n                              ContentTemplate="{Binding RelativeSource={RelativeSource Self},\r\n                              Path=(xcdg:DataGridControl.DataGridContext).SourceDetailConfiguration.TitleTemplate}" />\r\n                  </DockPanel>\r\n              </DataTemplate>\r\n              <DataTemplate>\r\n                  <xcdg:ColumnManagerRow AllowColumnReorder="False"\r\n                                        AllowSort="False" />\r\n              </DataTemplate>\r\n            </xcdg:DefaultDetailConfiguration.Headers>\r\n            <xcdg:DefaultDetailConfiguration.Footers>\r\n              <DataTemplate>\r\n                  <xcdg:InsertionRow Background="Cornsilk" />\r\n              </DataTemplate>\r\n            </xcdg:DefaultDetailConfiguration.Footers>\r\n            <xcdg:DefaultDetailConfiguration.DetailIndicatorStyle>\r\n              <Style TargetType="{x:Type xcdg:DetailIndicator}">\r\n                  <Setter Property="Background"\r\n                          Value="AliceBlue" />\r\n              </Style>\r\n            </xcdg:DefaultDetailConfiguration.DetailIndicatorStyle>\r\n        </xcdg:DefaultDetailConfiguration>\r\n      </xcdg:DataGridControl.DefaultDetailConfiguration>\r\n  </xcdg:DataGridControl>\r\n  </Grid>\n'})})})})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>o});r(6540);var n=r(4164);const a={tabItem:"tabItem_Ymn6"};var i=r(4848);function o(e){let{children:t,hidden:r,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,o),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>b});var n=r(6540),a=r(4164),i=r(3104),o=r(6347),l=r(205),d=r(7485),s=r(1682),c=r(679);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}(r);return function(e){const t=(0,s.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function p(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const a=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,d.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,i=g(e),[o,d]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,u]=h({queryString:r,groupId:a}),[f,m]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Dv)(r);return[a,(0,n.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:a}),x=(()=>{const e=s??f;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{x&&d(x)}),[x]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),m(e)}),[u,m,i]),tabValues:i}}var m=r(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var D=r(4848);function y(e){let{className:t,block:r,selectedValue:n,selectValue:o,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const t=e.currentTarget,r=d.indexOf(t),a=l[r].value;a!==n&&(s(t),o(a))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=d.indexOf(e.currentTarget)+1;t=d[r]??d[0];break}case"ArrowLeft":{const r=d.indexOf(e.currentTarget)-1;t=d[r]??d[d.length-1];break}}t?.focus()};return(0,D.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},t),children:l.map((e=>{let{value:t,label:r,attributes:i}=e;return(0,D.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>d.push(e),onKeyDown:u,onClick:c,...i,className:(0,a.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function C(e){let{lazy:t,children:r,selectedValue:i}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,D.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=f(e);return(0,D.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,D.jsx)(y,{...t,...e}),(0,D.jsx)(C,{...t,...e})]})}function b(e){const t=(0,m.A)();return(0,D.jsx)(v,{...e,children:u(e.children)},String(t))}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(6540);const a={},i=n.createContext(a);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);