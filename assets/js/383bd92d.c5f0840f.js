"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[6074],{1468:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var t=o(4848),n=o(8453),a=o(1470),i=o(9365);const l={},d="Group Configurations",c={id:"datagrid/manipulating-data/grouping-data/02",title:"Group Configurations",description:"Group configurations define how same-level groups in the grid or detail are configured. By default, all group configurations contain a GroupHeaderControl in their header sections; however, the default configuration can be modified by providing a new group configuration to a grid or detail configuration's DefaultGroupConfiguration property (see Example 1). A group configuration can also be provided on either a DataGridGroupDescription or column and will be applied to all groups that are created from the values of the column.",source:"@site/docs/datagrid/manipulating-data/grouping-data/02.md",sourceDirName:"datagrid/manipulating-data/grouping-data",slug:"/datagrid/manipulating-data/grouping-data/02",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/02",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Grouping Data",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/01"},next:{title:"Custom Group-configuration Selectors",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/03"}},s={},u=[{value:"Headers and Footers",id:"headers-and-footers",level:2},{value:"Group-configuration Selectors",id:"group-configuration-selectors",level:2},{value:"Collapsing and Expanding",id:"collapsing-and-expanding",level:2},{value:"Examples",id:"examples",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components},{Details:o}=r;return o||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"group-configurations",children:"Group Configurations"})}),"\n",(0,t.jsxs)(r.p,{children:["Group configurations define how same-level groups in the grid or detail are configured. By default, all group configurations contain a ",(0,t.jsx)(r.code,{children:"GroupHeaderControl"})," in their header sections; however, the ",(0,t.jsx)(r.strong,{children:"default"})," configuration can be modified by providing a new group configuration to a grid or detail configuration's DefaultGroupConfiguration property (see Example 1). A group configuration can also be provided on either a ",(0,t.jsx)(r.code,{children:"DataGridGroupDescription"})," or column and will be applied to all groups that are created from the values of the column."]}),"\n",(0,t.jsxs)(r.p,{children:["Through the ",(0,t.jsx)(r.code,{children:"ItemContainerStyle"})," and ",(0,t.jsx)(r.code,{children:"ItemContainerStyleSelector"})," properties, different styles can be applied to the data items in the groups to which the configuration is applied. The style of the group-level indicators for the groups to which the configuration will be applied can be defined through a group configuration's ",(0,t.jsx)(r.code,{children:"GroupLevelIndicatorStyle"})," property."]}),"\n",(0,t.jsx)(r.h2,{id:"headers-and-footers",children:"Headers and Footers"}),"\n",(0,t.jsxs)(r.p,{children:["Each item that is added to the header or footer sections of a group configuration must be added as ",(0,t.jsx)(r.strong,{children:"DataTemplates"})," or ",(0,t.jsx)(r.code,{children:"GroupHeaderFooterItemTemplates"}),", which must have a ",(0,t.jsx)(r.strong,{children:"DataTemplate"})," as an immediate child and whose ",(0,t.jsx)(r.code,{children:"VisibleWhenCollapsed"})," property can be set to true (by default false) to keep the item visible when its containing group is collapsed. A group configuration's ",(0,t.jsx)(r.code,{children:"InitiallyExpanded"})," property can also be set to provide an initial expansion state for all groups to which the configuration will be applied."]}),"\n",(0,t.jsxs)(r.p,{children:["By default, group configurations contain a GroupHeaderControl in their header section that allow groups to be collapsed and expanded. In XAML, the content of a header or footer section can be cleared by setting the ",(0,t.jsx)(r.code,{children:"UseDefaultHeadersFooters"})," property of a group configuration to false. If left to true, any items that are added to a header or footer section will be added after the default headers and footers."]}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsx)(r.p,{children:"Setting the UseDefaultHeadersFooters property to false will exclude the default header and footer items from all header and footer sections.\r\nIn code, the collections can be cleared by calling the Clear method."})}),"\n",(0,t.jsxs)(r.p,{children:["Each template that is added to a header or footer section will create a container for itself in every individual group. A specific container can be identified through the use of a ",(0,t.jsx)(r.code,{children:"GroupHeaderFooterItem"}),", which is created from the ",(0,t.jsx)(r.strong,{children:"CollectionViewGroup"})," in which the container is located and the template that was used to create it."]}),"\n",(0,t.jsx)(r.h2,{id:"group-configuration-selectors",children:"Group-configuration Selectors"}),"\n",(0,t.jsxs)(r.p,{children:["Unlike a default group configuration, which applies to all groups, group-configuration selectors, such as the built-in ",(0,t.jsx)(r.code,{children:"FieldNameGroupConfigurationSelector"})," and ",(0,t.jsx)(r.code,{children:"LevelGroupConfigurationSelector"}),", can be used to select the appropriate configuration for a group based on its information and/or content using their respective ",(0,t.jsx)(r.code,{children:"FieldNameGroupConfigurationSelectorItem"})," and ",(0,t.jsx)(r.code,{children:"LevelGroupConfigurationSelectorItem"}),", which provide a group configuration and indicate for what specific field name or level that configuration applies (see Example 4).\r\nCustom group-configuration selectors can also be created (with or without corresponding selector items) and assigned to a grid or detail configuration's ",(0,t.jsx)(r.code,{children:"GroupConfigurationSelector"})," property (see ",(0,t.jsx)(r.a,{href:"03",children:"Custom Group-configuration Selectors topic"}),")."]}),"\n",(0,t.jsx)(r.h2,{id:"collapsing-and-expanding",children:"Collapsing and Expanding"}),"\n",(0,t.jsxs)(r.p,{children:["A group configuration's ",(0,t.jsx)(r.code,{children:"InitiallyExpanded"})," property can also be set to provide an ",(0,t.jsx)(r.strong,{children:"initial"})," expansion state for all groups to which the configuration will be applied. The value of this property (by default, ",(0,t.jsx)(r.strong,{children:"true"}),") will be used by all groups to which the configuration applies when they are created or when grouping modifications are made. The expansion state of a group can be changed programmatically using the ",(0,t.jsx)(r.code,{children:"CollapseGroup"}),", ",(0,t.jsx)(r.code,{children:"ExpandGroup"}),", or ",(0,t.jsx)(r.code,{children:"ToggleGroupExpansion"})," methods, which are defined on both the ",(0,t.jsx)(r.strong,{children:"DataGridControl"})," and ",(0,t.jsx)(r.code,{children:"DataGridContext"})," classes (see Example 2).\r\nAt any time, the ",(0,t.jsx)(r.code,{children:"IsGroupExpanded"})," method can be queried to retrieve the actual state of a group regardless of its parent's state. For example, if the group is expanded but contained in a parent group that is collapsed, ",(0,t.jsx)(r.code,{children:"IsGroupExpanded"})," will return ",(0,t.jsx)(r.strong,{children:"true"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Example 1: Defining a default group configuration"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to provide a default group configuration."}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                  Source="{Binding Source={x:Static Application.Current},\r\n                                                    Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.DefaultGroupConfiguration>\r\n      <xcdg:GroupConfiguration>\r\n        <xcdg:GroupConfiguration.Footers>\r\n          <DataTemplate>\r\n            <xcdg:InsertionRow/>\r\n          </DataTemplate>\r\n        </xcdg:GroupConfiguration.Footers>\r\n      </xcdg:GroupConfiguration>\r\n    </xcdg:DataGridControl.DefaultGroupConfiguration>     \r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})]}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Example 2: Programmatically toggling group expansion"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to handle the ",(0,t.jsx)(r.code,{children:"PreviewMouseLeftButtonDown"})," event on the ",(0,t.jsx)(r.code,{children:"GroupHeaderControl"})," objects contained in the headers of the child groups to toggle the expansion state of child groups using the ",(0,t.jsx)(r.code,{children:"ToggleGroupExpansion"})," method. The group whose state is to be toggled will be retrieved using the ",(0,t.jsx)(r.code,{children:"GetParentGroupFromItem"})," method."]}),(0,t.jsxs)(a.A,{children:[(0,t.jsx)(i.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n    <Style TargetType="{x:Type xcdg:GroupHeaderControl}">\r\n      <EventSetter Event="PreviewMouseLeftButtonDown"\r\n                  Handler="HeaderDown"/>\r\n    </Style>  \r\n</Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})}),(0,t.jsx)(i.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"private void HeaderDown( object sender, MouseEventArgs e )\r\n{\r\n  GroupHeaderControl headerControl = sender as GroupHeaderControl;\r\n  if( headerControl == null )\r\n    return;\r\n  DataGridContext context = DataGridControl.GetDataGridContext( headerControl );\r\n  object item = context.GetItemFromContainer( headerControl );\r\n  if( item != null )\r\n  {\r\n    CollectionViewGroup group = context.GetParentGroupFromItem( item );\r\n    if( group != null )\r\n    {\r\n      context.ToggleGroupExpansion( group );\r\n    }\r\n  }\r\n}\n"})})}),(0,t.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"Private Sub HeaderDown( ByVal sender As Object, ByVal e As MouseButtonEventArgs )\r\n  Dim headerControl As GroupHeaderControl = TryCast( sender, GroupHeaderControl );\r\n  If headerControl Is Nothing Then\r\n    Return\r\n  End If\r\n  Dim context As DataGridContext = DataGridControl.GetDataGridContext( headerControl )\r\n  Dim item As Object = context.GetItemFromContainer( headerControl ) )\r\n  If Not item Is Nothing Then\r\n    Dim group As CollectionViewGroup = context.GetParentGroupFromItem( item )\r\n    If Not group Is Nothing\r\n      context.ToggleGroupExpansion( group )\r\n    End If\r\n  End If\r\nEnd Sub\n"})})})]})]}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Example 3: Changing the group-header text"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to change the information displayed in each ",(0,t.jsx)(r.code,{children:"GroupHeaderControl"})," by creating an implicit DataTemplate targeting the ",(0,t.jsx)(r.strong,{children:"Group"})," data type."]}),(0,t.jsx)(a.A,{children:(0,t.jsx)(i.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid>\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n    <DataTemplate DataType="{x:Type xcdg:Group}">\r\n      <StackPanel Orientation="Horizontal">\r\n        <TextBlock Text="The "/>\r\n        <TextBlock Text="{Binding Value}"/>\r\n        <TextBlock Text=" group contains "/>\r\n        <TextBlock Text="{Binding Items.Count}"/>\r\n        <TextBlock Text=" items."/>\r\n      </StackPanel>\r\n    </DataTemplate>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})})})})]}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)("summary",{children:"Example 4: Providing a group-configuration selector"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to provide a ",(0,t.jsx)(r.code,{children:"FieldNameGroupConfigurationSelector"})," that will apply the defined group configuration to all groups that are created from the values of the column corresponding to the specified field name."]}),(0,t.jsx)(a.A,{children:(0,t.jsx)(i.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry" />\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity" />\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.GroupConfigurationSelector>\r\n      <xcdg:FieldNameGroupConfigurationSelector>\r\n        <xcdg:FieldNameGroupConfigurationSelectorItem FieldName="ShipCity">\r\n          <xcdg:FieldNameGroupConfigurationSelectorItem.GroupConfiguration>\r\n            <xcdg:GroupConfiguration>\r\n              <xcdg:GroupConfiguration.Footers>\r\n                <DataTemplate>\r\n                  <xcdg:InsertionRow />\r\n                </DataTemplate>\r\n              </xcdg:GroupConfiguration.Footers>\r\n            </xcdg:GroupConfiguration>\r\n          </xcdg:FieldNameGroupConfigurationSelectorItem.GroupConfiguration>                \r\n        </xcdg:FieldNameGroupConfigurationSelectorItem>\r\n      </xcdg:FieldNameGroupConfigurationSelector>\r\n    </xcdg:DataGridControl.GroupConfigurationSelector>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})})})]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},9365:(e,r,o)=>{o.d(r,{A:()=>i});o(6540);var t=o(4164);const n={tabItem:"tabItem_Ymn6"};var a=o(4848);function i(e){let{children:r,hidden:o,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(n.tabItem,i),hidden:o,children:r})}},1470:(e,r,o)=>{o.d(r,{A:()=>j});var t=o(6540),n=o(4164),a=o(3104),i=o(6347),l=o(205),d=o(7485),c=o(1682),s=o(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:o}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:o,attributes:t,default:n}}=e;return{value:r,label:o,attributes:t,default:n}}))}(o);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,o])}function h(e){let{value:r,tabValues:o}=e;return o.some((e=>e.value===r))}function g(e){let{queryString:r=!1,groupId:o}=e;const n=(0,i.W6)(),a=function(e){let{queryString:r=!1,groupId:o}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:r,groupId:o});return[(0,d.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(n.location.search);r.set(a,e),n.replace({...n.location,search:r.toString()})}),[a,n])]}function x(e){const{defaultValue:r,queryString:o=!1,groupId:n}=e,a=p(e),[i,d]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=o.find((e=>e.default))??o[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:a}))),[c,u]=g({queryString:o,groupId:n}),[x,f]=function(e){let{groupId:r}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(r),[n,a]=(0,s.Dv)(o);return[n,(0,t.useCallback)((e=>{o&&a.set(e)}),[o,a])]}({groupId:n}),m=(()=>{const e=c??x;return h({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{m&&d(m)}),[m]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var f=o(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var G=o(4848);function C(e){let{className:r,block:o,selectedValue:t,selectValue:i,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),s=e=>{const r=e.currentTarget,o=d.indexOf(r),n=l[o].value;n!==t&&(c(r),i(n))},u=e=>{let r=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":{const o=d.indexOf(e.currentTarget)+1;r=d[o]??d[0];break}case"ArrowLeft":{const o=d.indexOf(e.currentTarget)-1;r=d[o]??d[d.length-1];break}}r?.focus()};return(0,G.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":o},r),children:l.map((e=>{let{value:r,label:o,attributes:a}=e;return(0,G.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>d.push(e),onKeyDown:u,onClick:s,...a,className:(0,n.A)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":t===r}),children:o??r},r)}))})}function b(e){let{lazy:r,children:o,selectedValue:a}=e;const i=(Array.isArray(o)?o:[o]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:(0,n.A)("margin-top--md",e.props.className)}):null}return(0,G.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function v(e){const r=x(e);return(0,G.jsxs)("div",{className:(0,n.A)("tabs-container",m.tabList),children:[(0,G.jsx)(C,{...r,...e}),(0,G.jsx)(b,{...r,...e})]})}function j(e){const r=(0,f.A)();return(0,G.jsx)(v,{...e,children:u(e.children)},String(r))}},8453:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>l});var t=o(6540);const n={},a=t.createContext(n);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);