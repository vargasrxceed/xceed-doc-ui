"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[4612],{7056:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var n=r(4848),a=r(8453),i=r(1470),s=r(9365);const l={},o="Chameleon Theme",d={id:"fundamentals/views-themes/themes/multisurface-themes/chamaleon-theme",title:"Chameleon Theme",description:"The Chameleon multi-surface theme, which is represented by the ChameleonTheme class, is a two-tone theme that provides full control over its gradient color scheme.",source:"@site/datagrid/fundamentals/views-themes/themes/multisurface-themes/chamaleon-theme.md",sourceDirName:"fundamentals/views-themes/themes/multisurface-themes",slug:"/fundamentals/views-themes/themes/multisurface-themes/chamaleon-theme",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/themes/multisurface-themes/chamaleon-theme",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Elemental Themes",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/themes/multisurface-themes/elemental-themes"},next:{title:"Background Brushes",permalink:"/xceed-doc-ui/datagrid/fundamentals/views-themes/background-brushes/overview"}},c={},h=[{value:"Gradient Color Scheme",id:"gradient-color-scheme",level:2},{value:"Default Surface Configurations",id:"default-surface-configurations",level:2},{value:"Title-region Positions",id:"title-region-positions",level:2},{value:"Examples",id:"examples",level:2}];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components},{Details:l}=t;return l||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"chameleon-theme",children:"Chameleon Theme"})}),"\n",(0,n.jsx)(t.p,{children:"The Chameleon multi-surface theme, which is represented by the ChameleonTheme class, is a two-tone theme that provides full control over its gradient color scheme."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Chameleon",src:r(438).A+"",width:"325",height:"237"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:[(0,n.jsx)(t.strong,{children:"Figure 1"}),": Chameleon theme with default surface configurations and color scheme"]})}),"\n",(0,n.jsx)(t.p,{children:'The Chameleon theme is contained in the "Views 3D" assembly (Xceed.Wpf.DataGrid.Views3D.dll), and like other themes, it can be set using either attribute syntax or property element syntax through a multi-surface view\'s Theme property (see Example 1).'}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Theme"}),(0,n.jsx)(t.th,{children:"Color scheme"}),(0,n.jsx)(t.th,{children:"Attribute syntax"}),(0,n.jsx)(t.th,{children:"Property element syntax"}),(0,n.jsx)(t.th,{children:"Assembly"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Chameleon"}),(0,n.jsx)(t.td,{children:"[View.]Chameleon [View.]ChameleonTheme"}),(0,n.jsx)(t.td,{children:"ChameleonTheme"}),(0,n.jsx)(t.td,{children:"CardflowView3D"}),(0,n.jsx)(t.td,{children:"Xceed.Wpf.DataGrid.Views3D"})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"gradient-color-scheme",children:"Gradient Color Scheme"}),"\n",(0,n.jsx)(t.p,{children:"Unique to the Chameleon multi-surface theme is the ability to control the colors that are used to create its gradient. Through the GradientLightColor and GradientDarkColor properties, the colors that will be blended from top to bottom, respectively, can be provided (see Example 2)."}),"\n",(0,n.jsx)(t.h2,{id:"default-surface-configurations",children:"Default Surface Configurations"}),"\n",(0,n.jsxs)(t.p,{children:["Like all multi-surface themes, the Chameleon theme provides the default ",(0,n.jsx)(t.strong,{children:"SurfaceConfigurations"})," that will be applied to a multi-surface view's surfaces (see Table 1 for a list of the default surface configurations). These default configurations can be overridden by adding surface configurations to a theme's ",(0,n.jsx)(t.strong,{children:"SurfaceConfigurations"})," collection and specifying the surfaces to which they will be applied using the Surfaces attached property defined on the multi-surface view (see Examples 1 and 3 in ",(0,n.jsx)(t.a,{href:"surface-configuration",children:"Surface Configurations"}),").\r\nIf a surface configuration is added to the SurfaceConfigurations collection but does not specify the surfaces to which it should be applied, it will be ignored. If more than one configuration specifies the same surface, the last one on which the Surfaces attached property was set will be used."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Table 1"}),": Default Chameleon surface configurations"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Multi-surface view"}),(0,n.jsx)(t.th,{children:"Surface"}),(0,n.jsx)(t.th,{children:"Default surface configuration"}),(0,n.jsx)(t.th,{children:"Index"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CardflowView3D"}),(0,n.jsx)(t.td,{children:"Left"}),(0,n.jsx)(t.td,{children:"ImageAndTitleSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"0"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CardflowView3D"}),(0,n.jsx)(t.td,{children:"Right"}),(0,n.jsx)(t.td,{children:"ImageAndTitleSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CardflowView3D"}),(0,n.jsx)(t.td,{children:"Center"}),(0,n.jsx)(t.td,{children:"CompleteSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"2"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CardflowView3D"}),(0,n.jsx)(t.td,{children:"Back"}),(0,n.jsx)(t.td,{children:"DataSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"3"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"title-region-positions",children:"Title-region Positions"}),"\n",(0,n.jsxs)(t.p,{children:["For some surface configurations, the Chameleon theme supports more than one title-region position (see Table 2). As such, it exposes a ",(0,n.jsx)(t.code,{children:"TitleRegionPosition"})," attached property that can be set on any of the supported surface configurations to change the position of the title region. The ",(0,n.jsx)(t.code,{children:"TitleRegionPosition"})," property can also be set directly on the theme to change the title-region position of all the supported surface configurations."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Table 2"}),": Possible title-region positions"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Surface configuration"}),(0,n.jsx)(t.th,{children:"Positions"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"TitleSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"Left and Right"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ImageAndTitleSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"Left and Right"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CompleteSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"Left and Right"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"TitleAndDataSurfaceConfiguration"}),(0,n.jsx)(t.td,{children:"Left and Right"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Employees table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(l,{children:[(0,n.jsx)("summary",{children:"Example 1: Using the Chameleon theme"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to set a multi-surface theme using property element syntax."}),(0,n.jsxs)(i.A,{children:[(0,n.jsx)(s.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                    Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n      <xcdg:DataGridControl.View>\r\n          <xcdg:CardflowView3D>\r\n            <xcdg:CardflowView3D.Theme>\r\n                <xcdg:ChameleonTheme/>\r\n            </xcdg:CardflowView3D.Theme>\r\n          </xcdg:CardflowView3D>\r\n      </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,n.jsx)(s.A,{value:"csharp",label:"C#",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:"  CardflowView3D view = new CardflowView3D();\r\n  view.Theme = new ChameleonTheme();\r\n  dataGridControl.View = view;\n"})})}),(0,n.jsx)(s.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-vbnet",children:"  Dim view As New CardflowView3D()\r\n  view.Theme = New ChameleonTheme()\r\n  dataGridControl.View = view\n"})})})]})]}),"\n",(0,n.jsxs)(l,{children:[(0,n.jsx)("summary",{children:"Example 2: Providing new gradient colors"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to change the gradient applied to the card surfaces when using the Chameleon theme."}),(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"GradientColors",src:r(3864).A+"",width:"325",height:"237"})}),(0,n.jsxs)(i.A,{children:[(0,n.jsx)(s.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                    Source="{Binding Source={x:Static Application.Current}, Path=EmployeesTable}"/>\r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_employees}}">\r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="LastName" IsMainColumn="True"/>\r\n            <xcdg:Column FieldName="Notes" Visible="False"/>\r\n            <xcdg:Column FieldName="ReportsTo" Visible="False"/>\r\n            <xcdg:Column FieldName="StillEmployed" Visible="False"/>\r\n            <xcdg:Column FieldName="TitleOfCourtesy" Visible="False"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n            <xcdg:CardflowView3D>\r\n              <xcdg:CardflowView3D.Theme>\r\n                <xcdg:ChameleonTheme GradientLightColor="Pink"\r\n                                      GradientDarkColor="Purple">\r\n                  \r\n                </xcdg:ChameleonTheme>                 \r\n              </xcdg:CardflowView3D.Theme>\r\n            </xcdg:CardflowView3D>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,n.jsx)(s.A,{value:"csharp",label:"C#",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'  dataGridControl.Columns[ "LastName" ].IsMainColumn = true;\r\n  dataGridControl.Columns[ "Notes" ].Visible= false;\r\n  dataGridControl.Columns[ "ReportsTo" ].Visible = false;\r\n  dataGridControl.Columns[ "StillEmployed" ].Visible = false;\r\n  dataGridControl.Columns[ "TitleOfCourtesy" ].Visible = false;\r\n  ChameleonTheme theme = new ChameleonTheme();\r\n  theme.GradientLightColor = Brushes.Pink.Color;\r\n  theme.GradientDarkColor = Brushes.Purple.Color;\r\n  CardflowView3D view = new CardflowView3D();\r\n  view.Theme = theme;\r\n  dataGridControl.View = view;\n'})})}),(0,n.jsx)(s.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-vbnet",children:'  dataGridControl.Columns( "LastName" ).IsMainColumn = True\r\n  dataGridControl.Columns( "Notes" ).Visible= False\r\n  dataGridControl.Columns( "ReportsTo" ).Visible = False\r\n  dataGridControl.Columns( "StillEmployed" ).Visible = False\r\n  dataGridControl.Columns( "TitleOfCourtesy" ).Visible = False\r\n  Dim theme As New ChameleonTheme()\r\n  theme.GradientLightColor = Brushes.Pink.Color\r\n  theme.GradientDarkColor = Brushes.Purple.Color\r\n  Dim view As New CardflowView3D()\r\n  view.Theme = theme\r\n  dataGridControl.View = view\n'})})})]})]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>s});r(6540);var n=r(4164);const a={tabItem:"tabItem_Ymn6"};var i=r(4848);function s(e){let{children:t,hidden:r,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,s),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>v});var n=r(6540),a=r(4164),i=r(3104),s=r(6347),l=r(205),o=r(7485),d=r(1682),c=r(679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}(r);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const a=(0,s.W6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,o.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function x(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,i=u(e),[s,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[d,h]=f({queryString:r,groupId:a}),[x,p]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Dv)(r);return[a,(0,n.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:a}),g=(()=>{const e=d??x;return m({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),p(e)}),[h,p,i]),tabValues:i}}var p=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=r(4848);function b(e){let{className:t,block:r,selectedValue:n,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const t=e.currentTarget,r=o.indexOf(t),a=l[r].value;a!==n&&(d(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;t=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;t=o[r]??o[o.length-1];break}}t?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},t),children:l.map((e=>{let{value:t,label:r,attributes:i}=e;return(0,C.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>o.push(e),onKeyDown:h,onClick:c,...i,className:(0,a.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function w(e){let{lazy:t,children:r,selectedValue:i}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function j(e){const t=x(e);return(0,C.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,C.jsx)(b,{...t,...e}),(0,C.jsx)(w,{...t,...e})]})}function v(e){const t=(0,p.A)();return(0,C.jsx)(j,{...e,children:h(e.children)},String(t))}},438:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/Chameleon_thumb-4a40cd08edfd6f9e6b39996caa4a55ad.png"},3864:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/GradientColors_thumb-b6b93bce1946d30c4b49de6fa4453e02.png"},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>l});var n=r(6540);const a={},i=n.createContext(a);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);