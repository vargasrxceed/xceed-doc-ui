"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[2202],{1155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var s=n(4848),r=n(8453),i=n(1470),a=n(9365);const l={},d="Persist Settings",o={id:"fundamentals/persist-settings",title:"Persist Settings",description:"The settings of a grid and its elements can be persisted and re-applied using the SaveUserSettings and LoadUserSettings methods, respectively. By default, column widths, visibilities, positions, and fixed-column counts as well as grouping and sorting criteria are persisted; merged columns, their positions, and their visibilities can also be persisted. However, these settings can be modified when calling the SaveUserSettings and LoadUserSettings methods (see Table 1).",source:"@site/datagrid/fundamentals/persist-settings.md",sourceDirName:"fundamentals",slug:"/fundamentals/persist-settings",permalink:"/xceed-doc-ui/datagrid/fundamentals/persist-settings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"MVVM Support",permalink:"/xceed-doc-ui/datagrid/fundamentals/mvvm-support"},next:{title:"Printing and Using print Preview",permalink:"/xceed-doc-ui/datagrid/fundamentals/printing-exporting-to-xps"}},c={},u=[{value:"Application Settings",id:"application-settings",level:2},{value:"Examples",id:"examples",level:2}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{Details:l}=t;return l||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"persist-settings",children:"Persist Settings"})}),"\n",(0,s.jsxs)(t.p,{children:["The settings of a grid and its elements can be persisted and re-applied using the ",(0,s.jsx)(t.code,{children:"SaveUserSettings"})," and ",(0,s.jsx)(t.code,{children:"LoadUserSettings"})," methods, respectively. By default, column widths, visibilities, positions, and fixed-column counts as well as grouping and sorting criteria are persisted; merged columns, their positions, and their visibilities can also be persisted. However, these settings can be modified when calling the ",(0,s.jsx)(t.code,{children:"SaveUserSettings"})," and LoadUserSettings methods (see Table 1)."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Table 1"}),": Persisted setting values"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"None"}),(0,s.jsx)(t.td,{children:"No settings are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ColumnTitle"}),(0,s.jsx)(t.td,{children:"Column titles are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ColumnWidths"}),(0,s.jsx)(t.td,{children:"Column widths are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ColumnPositions"}),(0,s.jsx)(t.td,{children:"Column positions are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ColumnVisibilities"}),(0,s.jsx)(t.td,{children:"Column visibilities are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ColumnStringFormat"}),(0,s.jsx)(t.td,{children:"Column string formats are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"FixedColumnCounts"}),(0,s.jsx)(t.td,{children:"Fixed-column counts are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Sorting"}),(0,s.jsx)(t.td,{children:"Sorting criteria are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Grouping"}),(0,s.jsx)(t.td,{children:"Grouping criteria are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"FilterCriteria"}),(0,s.jsx)(t.td,{children:"The filter-criteria are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"FilterCriteriaMode"}),(0,s.jsx)(t.td,{children:"The filter-criteria modes is persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CardsWidths"}),(0,s.jsx)(t.td,{children:"Card widths are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MergedColumns"}),(0,s.jsx)(t.td,{children:"The list of child columns associated with merged column headers is persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MergedColumnPositions"}),(0,s.jsx)(t.td,{children:"The positions of merged column headers are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MergedColumnVisibilities"}),(0,s.jsx)(t.td,{children:"The visibility settings of merged column headers are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CellSpanningConflictResolutionMode"}),(0,s.jsx)(t.td,{children:"The SpannedCellConflictResolutionMode is persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"CellSpanningDirection"}),(0,s.jsx)(t.td,{children:"The direction in which a cell can span in order to merge with other cells is persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"StatCellFormat"}),(0,s.jsx)(t.td,{children:"StatCell formats are persisted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"All"}),(0,s.jsx)(t.td,{children:"Column widths, visibilities, positions, and fixed-column counts as well as grouping and sorting criteria are persisted. Merged columns and merged column header positions and visibilities are also persisted."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["The SettingsRepository class represents the repository to which the settings of a grid and its elements are persisted when the ",(0,s.jsx)(t.code,{children:"SaveUserSettings"})," method is called. This repository can then be serialized using an ",(0,s.jsx)(t.code,{children:"XmlSerializer"})," (see Example 1) or persisted to the application settings. When re-applying settings to a grid, a repository that contains the settings must be provided to the ",(0,s.jsx)(t.code,{children:"LoadUserSettings"})," method."]}),"\n",(0,s.jsx)(t.h2,{id:"application-settings",children:"Application Settings"}),"\n",(0,s.jsxs)(t.p,{children:["Application settings provide a built-in way to store and load settings. In order to persist the settings of a grid and its elements in the application settings, a ",(0,s.jsx)(t.code,{children:"SettingsRespository"})," must first be added to the Settings of the application:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["In the Solution Explorer, right-click on the project and select ",(0,s.jsx)(t.code,{children:"Properties"})," from the menu."]}),"\n",(0,s.jsx)(t.li,{children:"Click on the Settings tab to open the application settings."}),"\n",(0,s.jsxs)(t.li,{children:["Provide a new ",(0,s.jsx)(t.code,{children:"Xceed.Wpf.DataGrid.Settings.SettingsRespository"})," type to which the settings will be persisted to and read from (see Figure 1)."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Application_Settings(flat)",src:n(4876).A+"",width:"778",height:"477"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:[(0,s.jsx)(t.strong,{children:"Figure 1"}),": Configuring application settings"]})}),"\n",(0,s.jsxs)(t.p,{children:["Once the repository is added to the application settings, it must be loaded and saved in order to persist the settings it contains. This is usually done by calling the Reload method in the application's ",(0,s.jsx)(t.code,{children:"OnStartup"})," override and Save method in the OnExit override (see Example 2)."]}),"\n",(0,s.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(t.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,s.jsx)(t.em,{children:"Orders"})," table of the Northwind database, unless stated otherwise."]}),"\n",(0,s.jsxs)(l,{children:[(0,s.jsx)("summary",{children:"Example 1: Persisting and loading settings using an XmlSerializer"}),(0,s.jsx)(t.p,{children:"The following example demonstrates how to persist and load settings using an XML serializer."}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />\r\n  </Grid.Resources>\r\n  <DockPanel>\r\n    <StackPanel Orientation="Horizontal"\r\n                DockPanel.Dock="Top">\r\n        <Button Content="Save Settings"\r\n                Click="SaveSettings" />\r\n        <Button Content="Load Settings"\r\n                Click="LoadSettings" />\r\n    </StackPanel>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    </xcdg:DataGridControl>\r\n  </DockPanel>\r\n</Grid>\n'})})}),(0,s.jsx)(a.A,{value:"csharp",label:"C#",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'private void SaveSettings( object sender, RoutedEventArgs e )\r\n{\r\n  SettingsRepository settings = new SettingsRepository();   \r\n  this.OrdersGrid.SaveUserSettings( settings, UserSettings.All );\r\n  XmlSerializer serializer = new XmlSerializer( typeof( SettingsRepository ) );\r\n  using( FileStream stream = new FileStream( "d:\\\\settings.xml", FileMode.CreateNew ) )\r\n  {\r\n    serializer.Serialize( stream, settings );\r\n  }\r\n}\r\nprivate void LoadSettings( object sender, RoutedEventArgs e )\r\n{\r\n  SettingsRepository settings;\r\n  using( FileStream stream = new FileStream( "d:\\\\settings.xml", FileMode.Open ) )\r\n  {\r\n    XmlSerializer serializer = new XmlSerializer( typeof( SettingsRepository ) );\r\n    settings = serializer.Deserialize( stream ) as SettingsRepository;\r\n  }\r\n  this.OrdersGrid.LoadUserSettings( settings, UserSettings.All );\r\n}\n'})})}),(0,s.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-vbnet",children:'Private Sub SaveSettings( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  Dim settings As New SettingsRepository()\r\n  Me.OrdersGrid.SaveUserSettings( settings, UserSettings.All )\r\n  Dim serializer As New XmlSerializer( GetType( SettingsRepository ) )\r\n  Using stream As New FileStream( "d:\\settings.xml", FileMode.CreateNew )\r\n    serializer.Serialize( stream, settings )\r\n  End Using\r\nEnd Sub\r\nPrivate Sub LoadSettings( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  Dim settings As SettingsRespository\r\n  Using stream As New FileStream( "d:\\settings.xml", FileMode.Open )\r\n    Dim serializer As New XmlSerializer( GetType( SettingsRepository ) )\r\n    settings = TryCast( serializer.Deserialize( stream ), SettingsRepository )\r\n  End Using\r\n  Me.OrdersGrid.LoadUserSettings( settings, UserSettings.All )\r\nEnd Sub\n'})})})]})]}),"\n",(0,s.jsxs)(l,{children:[(0,s.jsx)("summary",{children:"Example 2: Persisting and loading settings through the application settings"}),(0,s.jsx)(t.p,{children:"The following example demonstrates how to persist and load settings using the application settings."}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}" />\r\n  </Grid.Resources>\r\n  <DockPanel>\r\n    <StackPanel Orientation="Horizontal"\r\n                DockPanel.Dock="Top">\r\n        <Button Content="Save Settings"\r\n                Click="SaveSettings" />\r\n        <Button Content="Load Settings"\r\n                Click="LoadSettings" />\r\n    </StackPanel>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    </xcdg:DataGridControl>\r\n  </DockPanel>\r\n</Grid>\n'})})}),(0,s.jsx)(a.A,{value:"csharp",label:"C#",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"private void SaveSettings( object sender, RoutedEventArgs e )\r\n{\r\n  if( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings == null )\r\n  {\r\n    Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings = new SettingsRepository();\r\n  }\r\n  this.OrdersGrid.SaveUserSettings( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings, UserSettings.All );\r\n}\r\nprivate void LoadSettings( object sender, RoutedEventArgs e )\r\n{\r\n  if( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings == null )\r\n    return;\r\n  this.OrdersGrid.LoadUserSettings( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings, UserSettings.All );\r\n}\n"})})}),(0,s.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-vbnet",children:"Private Sub SaveSettings( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  If Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings Is Nothing Then\r\n    Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings = New SettingsRepository()\r\n  End If\r\n  Me.OrdersGrid.SaveUserSettings( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings, UserSettings.All )\r\nEnd Sub\r\nPrivate Sub LoadSettings( ByVal sender As Object, ByVal e As RoutedEventArgs )\r\n  If Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings Is Nothing Then\r\n    Return\r\n  End If\r\n  Me.OrdersGrid.LoadUserSettings( Xceed.Wpf.Documentation.Properties.Settings.Default.GridSettings, UserSettings.All )\r\nEnd Sub\n"})})})]}),(0,s.jsx)(t.p,{children:"In addition to persisting and load the grid-specific settings to and from the resources, the application settings themselves must also be persisted using the default setting's Reload and Save methods, which are usually called in the application's OnStartup and OnExit overrides, respectively."}),(0,s.jsxs)(i.A,{children:[(0,s.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'  protected override void OnStartup( StartupEventArgs e )\r\n  {\r\n    Xceed.Wpf.DataGrid.Licenser.LicenseKey = "license_key";\r\n    base.OnStartup( e );  \r\n    Settings.Default.Reload();\r\n  }\r\n  protected override void OnExit( ExitEventArgs e )\r\n  {  \r\n    Settings.Default.Save();\r\n    base.OnExit( e );\r\n  }\n'})})}),(0,s.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-vbnet",children:'Protected Overrides Sub OnStartup( ByVal e As StartupEventArgs )\r\n  Xceed.Wpf.DataGrid.Licenser.LicenseKey = "license_key"\r\n  MyBase.OnStartup( e )\r\n  Settings.Default.Reload()\r\nEnd Sub\r\nProtected Override Sub OnExit( ByVal e As ExitEventArgs )\r\n  Settings.Default.Save()\r\n  MyBase.OnExit( e )\r\nEnd Sub\n'})})})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var s=n(4164);const r={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>y});var s=n(6540),r=n(4164),i=n(3104),a=n(6347),l=n(205),d=n(7485),o=n(1682),c=n(679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,o.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=h(e),[a,d]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[o,u]=g({queryString:n,groupId:r}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),S=(()=>{const e=o??m;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{S&&d(S)}),[S]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),x(e)}),[u,x,i]),tabValues:i}}var x=n(2303);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function j(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),r=l[n].value;r!==s&&(o(t),a(r))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>d.push(e),onKeyDown:u,onClick:c,...i,className:(0,r.A)("tabs__item",S.tabItem,i?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function b(e){const t=m(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",S.tabList),children:[(0,f.jsx)(j,{...t,...e}),(0,f.jsx)(v,{...t,...e})]})}function y(e){const t=(0,x.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(t))}},4876:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/Application_Settings(flat)_thumb-2f392a17d6c687c3b23137efea4355fa.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);