"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[8802],{5559:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var t=n(4848),i=n(8453),o=n(1470),a=n(9365);const s={},l="Sorting Data",c={id:"datagrid/manipulating-data/sorting",title:"Sorting Data",description:"Data items can be sorted by adding SortDescription objects to the SortDescriptions property of the DataGridCollectionViewSource or DataGridCollectionView to which a grid is bound, or directly through the Items property, and specifying the field name of the column by whose values to sort as well as the direction in which those values are to be sorted (see Example 1).",source:"@site/docs/datagrid/manipulating-data/sorting.md",sourceDirName:"datagrid/manipulating-data",slug:"/datagrid/manipulating-data/sorting",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/sorting",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Group-configuration Selectors",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/03"},next:{title:"Filtering Data",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/filtering"}},d={},u=[{value:"Custom Sorting",id:"custom-sorting",level:2},{value:"Sorting at Runtime",id:"sorting-at-runtime",level:2},{value:"Examples",id:"examples",level:2}];function p(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"sorting-data",children:"Sorting Data"})}),"\n",(0,t.jsxs)(r.p,{children:["Data items can be sorted by adding ",(0,t.jsx)(r.strong,{children:"SortDescription"})," objects to the ",(0,t.jsx)(r.strong,{children:"SortDescriptions"})," property of the ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," or ",(0,t.jsx)(r.code,{children:"DataGridCollectionView"})," to which a grid is bound, or directly through the Items property, and specifying the field name of the column by whose values to sort as well as the direction in which those values are to be sorted (see Example 1)."]}),"\n",(0,t.jsxs)(r.p,{children:["A column's ",(0,t.jsx)(r.strong,{children:"SortDirection"})," property can be consulted to determine the direction in which its values are sorted, while the SortIndex property indicates the index of the column in the ",(0,t.jsx)(r.strong,{children:"SortDescriptions"})," collection."]}),"\n",(0,t.jsxs)(r.p,{children:["To be notified when the ",(0,t.jsx)(r.strong,{children:"SortDescriptions"})," collection is changed, the ",(0,t.jsx)(r.code,{children:"CollectionChanged"})," event of the collection's ",(0,t.jsx)(r.code,{children:"INotifyCollectionChanged"})," interface implementation can be handled (see Example 4)."]}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsxs)(r.p,{children:["The name of the property in the data item and the value of the ",(0,t.jsx)(r.strong,{children:"FieldName"})," property must be identical in order for sorting to work."]})}),"\n",(0,t.jsx)(r.h2,{id:"custom-sorting",children:"Custom Sorting"}),"\n",(0,t.jsxs)(r.p,{children:["In addition to the default type-based sorting, custom sorting can also be applied by providing an ",(0,t.jsx)(r.code,{children:"IComparer"})," to the ",(0,t.jsx)(r.code,{children:"SortComparer"})," property of one or more item properties defined in the ",(0,t.jsx)(r.code,{children:"DataGridCollectionView"})," or ",(0,t.jsx)(r.code,{children:"DataGridCollectionViewSource"})," to which a grid is bound (see Example 5). The comparer will be used whenever the values of the item property's corresponding column are sorted (e.g., clicking on the column header)."]}),"\n",(0,t.jsx)(r.h2,{id:"sorting-at-runtime",children:"Sorting at Runtime"}),"\n",(0,t.jsxs)(r.p,{children:["When a ",(0,t.jsx)(r.strong,{children:"DataGridControl"})," is created, by default, it contains a ColumnManagerRow in its fixed headers section that contains a ",(0,t.jsx)(r.code,{children:"ColumnManagerCell"})," for each column in a grid. The content of one or more columns can be sorted by clicking in the corresponding ",(0,t.jsx)(r.code,{children:"ColumnManagerCell"})," (see Figure 1)."]}),"\n",(0,t.jsxs)(r.p,{children:["Clicking once will sort the column's values in an ascending direction, the second click will sort them in a descending direction, while the third click will remove any sorting that has been applied to the column's values. To sort the values of multiple columns, hold the SHIFT key while clicking on a ",(0,t.jsx)(r.code,{children:"ColumnManagerCell"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Any ",(0,t.jsx)(r.code,{children:"GroupByItems"})," contained in a ",(0,t.jsx)(r.code,{children:"GroupByControl"})," can also be used to sort the content of the columns which they represent (see Figure 2)."]}),"\n",(0,t.jsx)(r.p,{children:"The AllowSort property, which can be set on a column-manager row or group-by control, indicates whether the end user can sort columns. To prevent columns from being reordered (i.e., change their visible positions) when column-manager cells are dragged to another location, a column-manager row's AllowColumnReorder property can be set to false (see Example 2)."}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsxs)(r.p,{children:["These properties ",(0,t.jsx)(r.strong,{children:"only affect end-user interaction"})," and do not prevent columns from being sorted or reordered programmatically."]})}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 1: Sorting data items"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to sort the data items in an ascending direction according to the values of the ",(0,t.jsx)(r.em,{children:"ShipCountry"})," column."]}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"\r\n      xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n    <xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n      <scm:SortDescription PropertyName="ShipCountry" Direction="Ascending"/>\r\n    </xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>         \r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="ShipCountry" VisiblePosition="0"/>\r\n    </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders );\r\ncollectionView.SortDescriptions.Add( new SortDescription( "ShipCountry", ListSortDirection.Ascending ) );\r\ndataGridControl.ItemsSource = collectionView;\r\ndataGridControl.Columns[ "ShipCountry" ].VisiblePosition = 0;\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders )\r\ncollectionView.SortDescriptions.Add( New SortDescription( "ShipCountry", ListSortDirection.Ascending ) )\r\ndataGridControl.ItemsSource = collectionView\r\ndataGridControl.Columns( "ShipCountry" ).VisiblePosition = 0\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 2: Preventing sorting and grouping"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to bind a grid to the Orders table and prevent columns from being sorted and reordered and groups from being created or removed. By default, the ShipCountry and ShipCity columns will be sorted, grouped, and fixed."}),(0,t.jsx)(o.A,{children:(0,t.jsx)(a.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:d="clr-namespace:System.Windows.Data;assembly=PresentationFramework"\r\n      xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n        <scm:SortDescription PropertyName="ShipCountry" Direction="Ascending"/>\r\n        <scm:SortDescription PropertyName="ShipCity" Direction="Ascending"/>\r\n      </xcdg:DataGridCollectionViewSource.SortDescriptions>\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">     \r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="ShipCountry" VisiblePosition="0"/>\r\n      <xcdg:Column FieldName="ShipCity" VisiblePosition="1"/>\r\n    </xcdg:DataGridControl.Columns>\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:TableView FixedColumnCount="2" UseDefaultHeadersFooters="False">\r\n        <xcdg:TableView.FixedHeaders>\r\n          <DataTemplate>\r\n            <xcdg:GroupByControl AllowSort="False" AllowGroupingModification="False"/>\r\n          </DataTemplate>\r\n          <DataTemplate>\r\n            <xcdg:ColumnManagerRow AllowSort="False" AllowColumnReorder="False"/>\r\n          </DataTemplate>\r\n        </xcdg:TableView.FixedHeaders>\r\n      </xcdg:TableView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})})})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 3: Custom group sorting"}),(0,t.jsx)(r.p,{children:"This example demonstrates how to create a custom group description by deriving from the DataGridGroupDescription class and overriding the GroupNameFromItem method. The custom group description will group items according to the first letter in the value received as a parameter. The example results in the group being present at initial loading; also, when removing and re-adding the group, the custom group description is not triggered. See below for an alternative approach to avoid this."}),(0,t.jsx)(r.p,{children:"The implementation for the custom sort comparer assigned to the group description's SortComparer property is provided below."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Xceed.Wpf.DataGrid;\r\nusing System.Collections;\r\nnamespace Xceed.Wpf.Documentation\r\n{\r\n  public class AlphabeticalGroupDescription : DataGridGroupDescription\r\n  {\r\n    public AlphabeticalGroupDescription()\r\n      : base()\r\n    {\r\n    }\r\n    public AlphabeticalGroupDescription( string propertyName )\r\n      : base( propertyName )\r\n    {\r\n    }\r\n  \r\n    public override object GroupNameFromItem( object item, int level,\r\n                                              System.Globalization.CultureInfo culture )\r\n    {\r\n      object value = base.GroupNameFromItem( item, level, culture );\r\n      try\r\n      {\r\n        string content = Convert.ToString( value );\r\n        value = content.ToUpper().Substring( 0, 1 );\r\n      }\r\n      catch( InvalidCastException )\r\n      {\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"Imports System\r\nImports System.Collections.Generic\r\nImports System.Text\r\nImports Xceed.Wpf.DataGrid\r\nImports System.Collections\r\nImports System.Globalization;\r\nNamespace Xceed.Wpf.Documentation\r\n  Public Class AlphabeticalGroupDescription\r\n        Inherits DataGridGroupDescription\r\n    Public Sub New()\r\n      MyBase.New()\r\n    End Sub\r\n    Public Sub New(ByVal propertyName As String)\r\n    MyBase.New(propertyName)\r\n    End Sub\r\n    Public Overrides Function GroupNameFromItem(ByVal item As Object, _\r\n                                                ByVal level As Integer, _\r\n                                                ByVal culture As CultureInfo) As Object\r\n      Dim value As Object = MyBase.GroupNameFromItem(item, level, culture)\r\n      Try\r\n        Dim content As String = Convert.ToString(value)\r\n        value = content.ToUpper().Substring(0, 1)\r\n      Catch e1 As InvalidCastException\r\n      End Try\r\n      Return value\r\n    End Function\r\n  End Class\r\nEnd Namespace\n"})})})]}),(0,t.jsx)(r.p,{children:"The following code demonstrates how to use the custom group description by adding it to the DataGridCollectionViewSource's GroupDescriptions property."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>     \r\n      <local:ConsonantVowelComparer x:Key="consonantVowelComparer"/>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding\r\n                                                  Source={x:Static Application.Current},\r\n                                                  Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <local:AlphabeticalGroupDescription PropertyName="ShipCountry"\r\n                                  SortComparer="{StaticResource consonantVowelComparer}"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders );\r\nAlphabeticalGroupDescription groupDescription = new AlphabeticalGroupDescription( "ShipCountry" );\r\ngroupDescription.SortComparer = new ConsonantVowelComparer();\r\ncollectionView.GroupDescriptions.Add( groupDescription );\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders )\r\nDim groupDescription As New AlphabeticalGroupDescription( "ShipCountry" )\r\ngroupDescription.SortComparer = New ConsonantVowelComparer()\r\ncollectionView.GroupDescriptions.Add( groupDescription )\r\ndataGridControl.ItemsSource = collectionView\n'})})})]}),(0,t.jsx)(r.p,{children:"The following code provides the implementation for the custom sort comparer that is used to sort, by vowels then consonants, the group descriptions create above."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Window.Resources>\r\n      <local:DateGroupDescription x:Key="myDateGroupDescription"\r\n                                  PropertyName="DateTimeFieldName" />\r\n  </Window.Resources>\r\n\r\n  [...]\r\n\r\n  <xcdg:DataGridControl.Columns>\r\n    <xcdg:Column FieldName="DateTimeFieldName"\r\n                GroupDescription="{StaticResource myDateGroupDescription}" />\r\n  </xcdg:DataGridControl.Columns>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Collections;\r\nnamespace Xceed.Wpf.Documentation\r\n{\r\n  public class ConsonantVowelComparer : IComparer\r\n  {\r\n    public ConsonantVowelComparer()\r\n    {\r\n    }\r\n    public int Compare( object x, object y )\r\n    {\r\n      if( ( x is string ) && ( y is string ) )\r\n      {\r\n        string xString = x.ToString().ToLowerInvariant();\r\n        string yString = y.ToString().ToLowerInvariant();\r\n        bool isXVowel = m_vowels.Contains( xString );\r\n        bool isYVowel = m_vowels.Contains( yString );\r\n        if( isXVowel ^ isYVowel )\r\n          return isXVowel ? -1 : 1;\r\n        return String.Compare( xString, yString );      \r\n      }\r\n      throw new ArgumentException();\r\n    }\r\n    private const string m_vowels = "aeiouy";\r\n  }\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Imports System\r\nImports System.Collections.Generic\r\nImports System.Text\r\nImports System.Collections\r\nNamespace Xceed.Wpf.Documentation\r\n  Public Class ConsonantVowelComparer\r\n    Implements IComparer\r\n    Public Sub New()\r\n    End Sub\r\n\r\n    Public Function Compare(ByVal x As Object, _\r\n                            ByVal y As Object) As Integer Implements IComparer.Compare\r\n      If (TypeOf x Is String) AndAlso (TypeOf y Is String) Then\r\n        Dim xString As String = x.ToString().ToLowerInvariant()\r\n        Dim yString As String = y.ToString().ToLowerInvariant()\r\n        Dim isXVowel As Boolean = m_vowels.Contains(xString)\r\n        Dim isYVowel As Boolean = m_vowels.Contains(yString)\r\n        If isXVowel Xor isYVowel Then\r\n          If isXVowel Then\r\n            Return -1\r\n          Else\r\n            Return 1\r\n          End If\r\n        End If\r\n        Return String.Compare(xString, yString)\r\n      End If\r\n      Throw New ArgumentException()\r\n    End Function\r\n    Private Const m_vowels As String = "aeiouy"\r\n  End Class\r\nEnd Namespace\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 4: Handling collection-changed events"}),(0,t.jsxs)(r.p,{children:["The following example demonstrates how to subscribe to the CollectionChanged event of the ",(0,t.jsx)(r.code,{children:"DataGridCollectionView.SortDescriptions"})," collection's ",(0,t.jsx)(r.code,{children:"INotifyCollectionChanged"})," interface implementation to be notified when sorting applied to a grid's columns changes."]}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'protected override void OnInitialized( EventArgs e )\r\n{\r\n  base.OnInitialized( e );\r\n  DataGridCollectionView view = this.OrdersGrid.ItemsSource as DataGridCollectionView;\r\n  ( ( INotifyCollectionChanged )view.SortDescriptions ).CollectionChanged +=\r\n                                      new NotifyCollectionChangedEventHandler( this.SortCollectionChanged );\r\n}\r\nprivate void SortCollectionChanged( object sender, NotifyCollectionChangedEventArgs e )\r\n{\r\n  Debug.WriteLine( "Sort changed" );\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Protected Overrides Sub OnInitialized(ByVal e As EventArgs)\r\n  MyBase.OnInitialized(e)\r\n\r\n  Dim view As DataGridCollectionView = TryCast(Me.OrdersGrid.ItemsSource, DataGridCollectionView)\r\n  AddHandler (CType(view.SortDescriptions, INotifyCollectionChanged)).CollectionChanged,\r\n                                          AddressOf SortCollectionChanged\r\nEnd Sub\r\nPrivate Sub SortCollectionChanged(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)\r\n  Debug.WriteLine("Sort changed")\r\nEnd Sub\n'})})})]})]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Example 5: Providing a custom sort comparer"}),(0,t.jsx)(r.p,{children:"The following example demonstrates how to provide a custom sort comparer that sorts addresses. The AddressComparer class (provided below) will first sort addresses which begin with numeric values by street name and then civic number. Address that do not have a civic number will be sorted alphabetically."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n        <local:AddressComparer x:Key="addressComparer"/>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                            Path=Orders}"\r\n                                          AutoCreateItemProperties="False">\r\n          <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n              <xcdg:DataGridItemProperty Name="ShipCountry" />\r\n              <xcdg:DataGridItemProperty Name="ShipCity" />\r\n              <xcdg:DataGridItemProperty Name="ShipAddress"\r\n                                        SortComparer="{StaticResource addressComparer}"/>\r\n              <xcdg:DataGridItemProperty Name="ShipVia" />\r\n          </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n        </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>        \r\n  </Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders, typeof( System.Data.DataRow ), false, false );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipCountry", typeof( string ) ) );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipCity", typeof( string ) ) );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipVia", typeof( int ) ) );\r\nDataGridItemProperty shipAddress = new DataGridItemProperty( "ShipAddress", typeof( string ) );\r\nshipAddress.SortComparer = new AddressComparer();\r\ncollectionView.ItemProperties.Add( shipAddress );\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders, GetType( System.Data.DataRow ), False, False )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipCountry", GetType( String ) ) )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipCity", GetType( String ) ) )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipVia", GetType( Integer ) ) )\r\nDim shipAddress As New DataGridItemProperty( "ShipAddress", GetType( String ) )\r\nshipAddress.SortComparer = New AddressComparer()\r\ncollectionView.ItemProperties.Add( shipAddress )\r\ndataGridControl.ItemsSource = collectionView\n'})})})]}),(0,t.jsx)(r.p,{children:"The following code provides the implementation of the AddressComparer class."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using System;\r\nusing System.Collections;\r\nusing System.Data;\r\nnamespace Xceed.Wpf.Documentation\r\n{\r\npublic class AddressComparer: IComparer\r\n{\r\n  public AddressComparer()\r\n  {\r\n  }\r\n  int IComparer.Compare( object x, object y )\r\n  {\r\n    string stringX = ( string )x;\r\n    string stringY = ( string )y;\r\n    const string digits = "0123456789";\r\n    if( ( digits.IndexOf( stringX[ 0 ] ) >= 0 ) && ( digits.IndexOf( stringY[ 0 ] ) >= 0 ) )\r\n    {\r\n      int index = 0;\r\n      System.Text.StringBuilder xNumber = new System.Text.StringBuilder();\r\n      while( ( index < stringX.Length ) && ( digits.IndexOf( stringX[ index ] ) >= 0 ) )\r\n      {\r\n        xNumber.Append( stringX[ index ] );\r\n        index++;\r\n      }\r\n      index = 0;\r\n      System.Text.StringBuilder yNumber = new System.Text.StringBuilder();\r\n      while( ( index < stringY.Length ) && ( digits.IndexOf( stringY[ index ] ) >= 0 ) )\r\n      {\r\n        yNumber.Append( stringY[ index ] );\r\n        index++;\r\n      }\r\n      long xValue = long.Parse( xNumber.ToString() );\r\n      long yValue = long.Parse( yNumber.ToString() );\r\n      if( xValue > yValue )\r\n        return 1;\r\n      if( xValue < yValue )\r\n        return -1;\r\n      return stringX.CompareTo( stringY );\r\n    }\r\n    else\r\n    {\r\n      return stringX.CompareTo( stringY );\r\n    }\r\n  }\r\n}\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Imports System\r\nImports System.Collections\r\nImports System.Data\r\nNamespace Xceed.Wpf.Documentation\r\n  Public Class AddressComparer\r\n              Implements IComparer\r\n    Public Sub New()\r\n    End Sub\r\n    Public Function Compare( x As Object, y As Object ) As Integer Implements IComparer.Compare\r\n      Dim stringX As String = CType( x, String )\r\n      Dim stringY As String = Ctyle( y, String )\r\n      Const digits As String = "0123456789"\r\n      If( ( digits.IndexOf( stringX( 0 ) ) >= 0 ) And ( digits.IndexOf( stringY( 0 ) ) >= 0 ) ) Then\r\n        Dim index As Integer = 0\r\n        Dim xNumber As System.Text.StringBuilder = New System.Text.StringBuilder()\r\n        While( ( index < stringX.Length ) And ( digits.IndexOf( stringX( index ) ) >= 0 ) )\r\n          xNumber.Append( stringX( index ) )\r\n          index++\r\n        End While\r\n        index = 0\r\n        Dim yNumber As System.Text.StringBuilder = New System.Text.StringBuilder()\r\n        While( ( index < stringY.Length ) And ( digits.IndexOf( stringY( index ) ) >= 0 ) )\r\n          yNumber.Append( stringY( index ) )\r\n          index++\r\n        End While\r\n        Dim xValue = Long.Parse( xNumber.ToString() )\r\n        Dim yValue As Long = Long.Parse( yNumber.ToString() )\r\n        If( xValue > yValue ) Then\r\n          Return 1\r\n        End If\r\n        If( xValue < yValue ) Then\r\n          Return -1\r\n        End If\r\n        Return stringX.CompareTo( stringY )\r\n      Else\r\n        Return stringX.CompareTo( stringY )\r\n      End If\r\n    End Function\r\n  End Class\r\nEnd Namespace\n'})})})]})]})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>a});n(6540);var t=n(4164);const i={tabItem:"tabItem_Ymn6"};var o=n(4848);function a(e){let{children:r,hidden:n,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>f});var t=n(6540),i=n(4164),o=n(3104),a=n(6347),s=n(205),l=n(7485),c=n(1682),d=n(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:i}}=e;return{value:r,label:n,attributes:t,default:i}}))}(n);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function m(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function h(e){let{queryString:r=!1,groupId:n}=e;const i=(0,a.W6)(),o=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const r=new URLSearchParams(i.location.search);r.set(o,e),i.replace({...i.location,search:r.toString()})}),[o,i])]}function g(e){const{defaultValue:r,queryString:n=!1,groupId:i}=e,o=p(e),[a,l]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!m({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:o}))),[c,u]=h({queryString:n,groupId:i}),[g,x]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[i,o]=(0,d.Dv)(n);return[i,(0,t.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:i}),C=(()=>{const e=c??g;return m({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{C&&l(C)}),[C]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)}),[u,x,o]),tabValues:o}}var x=n(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var S=n(4848);function b(e){let{className:r,block:n,selectedValue:t,selectValue:a,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const r=e.currentTarget,n=l.indexOf(r),i=s[n].value;i!==t&&(c(r),a(i))},u=e=>{let r=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,S.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},r),children:s.map((e=>{let{value:r,label:n,attributes:o}=e;return(0,S.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>l.push(e),onKeyDown:u,onClick:d,...o,className:(0,i.A)("tabs__item",C.tabItem,o?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function y(e){let{lazy:r,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,S.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==o})))})}function w(e){const r=g(e);return(0,S.jsxs)("div",{className:(0,i.A)("tabs-container",C.tabList),children:[(0,S.jsx)(b,{...r,...e}),(0,S.jsx)(y,{...r,...e})]})}function f(e){const r=(0,x.A)();return(0,S.jsx)(w,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(6540);const i={},o=t.createContext(i);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);