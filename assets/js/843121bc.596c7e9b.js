"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[8233],{3621:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=n(4848),t=n(8453),a=n(1470),o=n(9365);const l={},d="Customizing Table Views",s={id:"code-snippets/08",title:"Customizing Table Views",description:"The following page provides a list of examples that demonstrate how to customize the appearance of table views.",source:"@site/datagrid/code-snippets/08.md",sourceDirName:"code-snippets",slug:"/code-snippets/08",permalink:"/xceed-doc-ui/datagrid/code-snippets/08",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Customizing Card Views",permalink:"/xceed-doc-ui/datagrid/code-snippets/07"},next:{title:"Customizing Multi-surface Themes",permalink:"/xceed-doc-ui/datagrid/code-snippets/09"}},c={},u=[{value:"Adding an InsertionRow to the fixed headers",id:"adding-an-insertionrow-to-the-fixed-headers",level:3},{value:"Clearing a fixed header section",id:"clearing-a-fixed-header-section",level:3},{value:"Adding vertical and horizontal grid lines",id:"adding-vertical-and-horizontal-grid-lines",level:3},{value:"Hiding the group-level indicator pane",id:"hiding-the-group-level-indicator-pane",level:3},{value:"Hiding the row-selector pane",id:"hiding-the-row-selector-pane",level:3},{value:"Fixing columns",id:"fixing-columns",level:3},{value:"Allowing horizontal scrolling",id:"allowing-horizontal-scrolling",level:3},{value:"Using routed view properties",id:"using-routed-view-properties",level:3},{value:"Stretching columns",id:"stretching-columns",level:3},{value:"Applying a grid background brush",id:"applying-a-grid-background-brush",level:3}];function h(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"customizing-table-views",children:"Customizing Table Views"})}),"\n",(0,i.jsx)(r.p,{children:"The following page provides a list of examples that demonstrate how to customize the appearance of table views."}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["All examples in this topic assume that the grid is bound to the ",(0,i.jsx)(r.em,{children:"Orders"})," or ",(0,i.jsx)(r.em,{children:"Employees"})," table of the Northwind database, unless stated otherwise."]})}),"\n",(0,i.jsx)(r.h3,{id:"adding-an-insertionrow-to-the-fixed-headers",children:"Adding an InsertionRow to the fixed headers"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to add an InsertionRow to the fixed header section of a grid."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                     Source="{Binding Source={x:Static Application.Current},\r\n                                                       Path=Orders}"/>\r\n   </Grid.Resources>\r\n   <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                         ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n         <xcdg:TableView>\r\n\r\n           <xcdg:TableView.FixedHeaders>\r\n              <DataTemplate>\r\n                 <xcdg:InsertionRow/>\r\n              </DataTemplate>\r\n           </xcdg:TableView.FixedHeaders>\r\n         </xcdg:TableView>\r\n      </xcdg:DataGridControl.View>\r\n   </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,i.jsx)(r.h3,{id:"clearing-a-fixed-header-section",children:"Clearing a fixed header section"}),"\n",(0,i.jsxs)(r.p,{children:["The following example demonstrates how to clear the content of all header and footer sections of a grid using its view's ",(0,i.jsx)(r.strong,{children:"UseDefaultHeadersFooters"})," property."]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:CardView UseDefaultHeadersFooters="False"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"  CardView view = new CardView();\r\n  view.UseDefaultHeadersFooters = false;\r\n  dataGridControl.View = view;\n"})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:"Dim view As New CardView()\r\nview.UseDefaultHeadersFooters = False\r\ndataGridControl.View = view\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"adding-vertical-and-horizontal-grid-lines",children:"Adding vertical and horizontal grid lines"}),"\n",(0,i.jsxs)(r.p,{children:["The following example demonstrates how to add vertical and horizontal grid lines to a grid in table-view layout. A style for the ",(0,i.jsx)(r.code,{children:"ColumnManagerRow"})," objects has been added to the resources to remove the horizontal grid line drawn above the column-manager row in the fixed headers."]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n        <Style TargetType="{x:Type xcdg:ColumnManagerRow}">\r\n          <Setter Property="BorderThickness" Value="0"/>\r\n        </Style>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>   \r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n        <xcdg:DataGridControl.View>\r\n\r\n          <xcdg:TableView HorizontalGridLineThickness="1" VerticalGridLineThickness="1">\r\n            <xcdg:TableView.HorizontalGridLineBrush>\r\n                <SolidColorBrush Color="Orange"/>\r\n            </xcdg:TableView.HorizontalGridLineBrush>\r\n            <xcdg:TableView.VerticalGridLineBrush>\r\n                <SolidColorBrush Color="Orange"/>\r\n            </xcdg:TableView.VerticalGridLineBrush>\r\n          </xcdg:TableView> \r\n        </xcdg:DataGridControl.View>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"TableView view = new TableView();\r\nview.HorizontalGridLineThickness = 1;\r\nview.VerticalGridLineThickness = 1;\r\n\r\nview.HorizontalGridLineBrush = Brushes.Orange;\r\nview.VerticalGridLineBrush = Brushes.Orange;\r\n\r\ndataGridControl.View = view;\n"})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:"Dim view As New TableView()\r\nview.HorizontalGridLineThickness = 1\r\nview.VerticalGridLineThickness = 1\r\n\r\nview.HorizontalGridLineBrush = Brushes.Orange\r\nview.VerticalGridLineBrush = Brushes.Orange\r\n\r\ndataGridControl.View = view\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"hiding-the-group-level-indicator-pane",children:"Hiding the group-level indicator pane"}),"\n",(0,i.jsxs)(r.p,{children:["The following example demonstrates how to hide the group-level indicator pane by creating a style which sets the ",(0,i.jsx)(r.code,{children:"Visibility"})," property of ",(0,i.jsx)(r.code,{children:"GroupLevelIndicatorPane"})," objects to ",(0,i.jsx)(r.strong,{children:"Collapsed"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n     <Style TargetType="{x:Type xcdg:GroupLevelIndicatorPane}">\r\n       <Setter Property="Visibility" Value="Collapsed"/>\r\n     </Style>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n</Grid>\n'})}),"\n",(0,i.jsx)(r.h3,{id:"hiding-the-row-selector-pane",children:"Hiding the row-selector pane"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to hide the row-selector pane."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView ShowRowSelectorPane="False"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"TableView view = new TableView();\r\nview.ShowRowSelectorPane = false;\r\ndataGridControl.View = view;\n"})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:"Dim view As New TableView()\r\nview.ShowRowSelectorPane = False\r\ndataGridControl.View = view\n"})})})]}),"\n",(0,i.jsx)(r.h3,{id:"fixing-columns",children:"Fixing columns"}),"\n",(0,i.jsxs)(r.p,{children:["The following example demonstrates how to fix the ",(0,i.jsx)(r.em,{children:"ShipCountry"})," and ",(0,i.jsx)(r.em,{children:"ShipCity"})," columns."]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="ShipCountry" VisiblePosition="0"/>\r\n        <xcdg:Column FieldName="ShipCity" VisiblePosition="1"/>\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView FixedColumnCount="2"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'dataGridControl.Columns[ "ShipCountry" ].VisiblePosition = 0;\r\ndataGridControl.Columns[ "ShipCity" ].VisiblePosition = 1;\r\nTableView view = new TableView();\r\nview.FixedColumnCount = 2;\r\ndataGridControl.View = view;\n'})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:'dataGridControl.Columns( "ShipCountry" ).VisiblePosition = 0\r\ndataGridControl.Columns( "ShipCity" ).VisiblePosition = 1\r\nDim view As New TableView()\r\nview.FixedColumnCount = 2\r\ndataGridControl.View = view\n'})})})]}),"\n",(0,i.jsx)(r.h3,{id:"allowing-horizontal-scrolling",children:"Allowing horizontal scrolling"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to prevent horizontal scrolling of the group-by control in the fixed header section."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                       Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.View>\r\n      <xcdg:TableView UseDefaultHeadersFooters="False">\r\n        <xcdg:TableView.FixedHeaders>\r\n          <DataTemplate>\r\n            <xcdg:GroupByControl xcdg:TableView.CanScrollHorizontally="True"/>\r\n          </DataTemplate>\r\n          <DataTemplate>\r\n            <xcdg:ColumnManagerRow/>\r\n          </DataTemplate>\r\n        </xcdg:TableView.FixedHeaders>\r\n      </xcdg:TableView>\r\n    </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,i.jsx)(r.h3,{id:"using-routed-view-properties",children:"Using routed view properties"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to set routed view properties on detail configurations to change the width of their detail indicators as well as to fix columns and remove the fixed-column splitter."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n        xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                      Path=Employees}" />\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                        AutoCreateDetailConfigurations="True">\r\n      <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="Photo"\r\n                      Visible="False" />\r\n      </xcdg:DataGridControl.Columns>\r\n      <xcdg:DataGridControl.DetailConfigurations>\r\n          <xcdg:DetailConfiguration RelationName="Employee_Orders"\r\n                                    Title="Employee Orders"\r\n                                    xcdg:TableView.DetailIndicatorWidth="50"\r\n                                    xcdg:TableView.FixedColumnCount="2">\r\n            <xcdg:DetailConfiguration.Columns>\r\n                <xcdg:Column FieldName="EmployeeID"\r\n                            Visible="False" />\r\n            </xcdg:DetailConfiguration.Columns>\r\n            <xcdg:DetailConfiguration.DetailConfigurations>\r\n                <xcdg:DetailConfiguration RelationName="Order_OrderDetails"\r\n                                          Title="Order Details"\r\n                                          xcdg:TableView.ShowFixedColumnSplitter="False"\r\n                                          xcdg:TableView.DetailIndicatorWidth="50"/>\r\n            </xcdg:DetailConfiguration.DetailConfigurations>\r\n          </xcdg:DetailConfiguration>\r\n      </xcdg:DataGridControl.DetailConfigurations>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'dataGridControl.AutoCreateDetailConfigurations = true;\r\ndataGridControl.Columns[ "Photo" ].Visible = false;\r\nDetailConfiguration detailConfiguration = new DetailConfiguration();\r\ndetailConfiguration.RelationName = "Employee_Orders";\r\ndetailConfiguration.Title = "Employee Orders";\r\ndetailConfiguration.Columns[ "EmployeeID" ].Visible = false;\r\ndetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 );\r\ndetailConfiguration.SetValue( TableView.FixedColumnCountProperty, 2 );\r\nDetailConfiguration childDetailConfiguration = new DetailConfiguration();\r\nchildDetailConfiguration.RelationName = "Order_OrderDetails";\r\nchildDetailConfiguration.Title = "Order Details";\r\nchildDetailConfiguration.SetValue( TableView.ShowFixedColumnSplitterProperty, false );\r\nchildDetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 );\r\ndetailConfiguration.DetailConfigurations.Add( childDetailConfiguration );\r\ndataGridControl.DetailConfigurations.Add( detailConfiguration );\n'})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:'dataGridControl.AutoCreateDetailConfigurations = True\r\ndataGridControl.Columns( "Photo" ).Visible = False\r\nDim detailConfiguration As New DetailConfiguration()\r\ndetailConfiguration.RelationName = "Employee_Orders"\r\ndetailConfiguration.Title = "Employee Orders"\r\ndetailConfiguration.Columns( "EmployeeID" ).Visible = False\r\ndetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 )\r\ndetailConfiguration.SetValue( TableView.FixedColumnCountProperty, 2 )\r\nDim childDetailConfiguration As New DetailConfiguration()\r\nchildDetailConfiguration.RelationName = "Order_OrderDetails"\r\nchildDetailConfiguration.Title = "Order Details"\r\nchildDetailConfiguration.SetValue( TableView.ShowFixedColumnSplitterProperty, false )\r\nchildDetailConfiguration.SetValue( TableView.DetailIndicatorWidthProperty, 50 )\r\ndetailConfiguration.DetailConfigurations.Add( childDetailConfiguration )\r\ndataGridControl.DetailConfigurations.Add( detailConfiguration )\n'})})})]}),"\n",(0,i.jsx)(r.h3,{id:"stretching-columns",children:"Stretching columns"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to stretch all the columns in a grid equally so that they occupy the full width available in the viewport."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}"\r\n                                        AutoCreateItemProperties="False">\r\n        <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n            <xcdg:DataGridItemProperty Name="ShipCountry" />\r\n            <xcdg:DataGridItemProperty Name="ShipCity" />\r\n            <xcdg:DataGridItemProperty Name="ShipRegion" />\r\n            <xcdg:DataGridItemProperty Name="ShipVia" />\r\n        </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n      </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n      <xcdg:DataGridControl.View>\r\n        <xcdg:TableView ColumnStretchMode="All"\r\n                        ColumnStretchMinWidth="100"/>\r\n      </xcdg:DataGridControl.View>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders, typeof( System.Data.DataRow ), false, false );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipCountry", typeof( string ) ) );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipCity", typeof( string ) ) );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipRegion", typeof( string ) ) );\r\ncollectionView.ItemProperties.Add( new DataGridItemProperty( "ShipVia", typeof( int) ) );\r\nTableView view = new TableView();\r\nview.ColumnStretchMode = ColumnStretchMode.All;\r\nview.ColumnStretchMinWidth = 100;\r\ndataGridControl.View = view;\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders, GetType( System.Data.DataRow ), False, False )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipCountry", GetType( String ) ) )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipCity", GetType( String ) ) )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipRegion", GetType( String ) ) )\r\ncollectionView.ItemProperties.Add( New DataGridItemProperty( "ShipVia", GetType( Integer ) ) )\r\nDim view As New TableView()\r\nview.ColumnStretchMode = ColumnStretchMode.All\r\nview.ColumnStretchMinWidth = 100\r\ndataGridControl.View = view\r\ndataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,i.jsx)(r.h3,{id:"applying-a-grid-background-brush",children:"Applying a grid background brush"}),"\n",(0,i.jsx)(r.p,{children:"The following example demonstrates how to apply a one of the custom background brushes (provided by Xceed) to a grid's background."}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=ProductsTable}"/>\r\n        \r\n      </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}"\r\n                          Background="{x:Static xcdg:DataGridControlBackgroundBrushes.AuroraRed}">     \r\n        <xcdg:DataGridControl.Columns>\r\n            <xcdg:Column FieldName="ProductName"\r\n                        IsMainColumn="True"/>\r\n        </xcdg:DataGridControl.Columns>\r\n        <xcdg:DataGridControl.View>\r\n            \x3c!-- In Cardflow 3D view, if a theme is not explicitly specified,\r\n                the Elemental Black theme will be used. --\x3e\r\n            <xcdg:CardflowView3D CardHeightToViewportRatio="0.5"/>\r\n        </xcdg:DataGridControl.View>\r\n      </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,i.jsx)(o.A,{value:"csharp",label:"C#",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed;\n"})})}),(0,i.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-vbnet",children:"dataGridControl.Background = DataGridControlBackgroundBrushes.AuroraRed\n"})})})]})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>o});n(6540);var i=n(4164);const t={tabItem:"tabItem_Ymn6"};var a=n(4848);function o(e){let{children:r,hidden:n,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(t.tabItem,o),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>G});var i=n(6540),t=n(4164),a=n(3104),o=n(6347),l=n(205),d=n(7485),s=n(1682),c=n(679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:r,children:n}=e;return(0,i.useMemo)((()=>{const e=r??function(e){return u(e).map((e=>{let{props:{value:r,label:n,attributes:i,default:t}}=e;return{value:r,label:n,attributes:i,default:t}}))}(n);return function(e){const r=(0,s.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function x(e){let{queryString:r=!1,groupId:n}=e;const t=(0,o.W6)(),a=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,d.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(t.location.search);r.set(a,e),t.replace({...t.location,search:r.toString()})}),[a,t])]}function p(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,a=h(e),[o,d]=(0,i.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:r,tabValues:a}))),[s,u]=x({queryString:n,groupId:t}),[p,m]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,a]=(0,c.Dv)(n);return[t,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:t}),w=(()=>{const e=s??p;return g({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{w&&d(w)}),[w]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),m(e)}),[u,m,a]),tabValues:a}}var m=n(2303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var C=n(4848);function f(e){let{className:r,block:n,selectedValue:i,selectValue:o,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:s}=(0,a.a_)(),c=e=>{const r=e.currentTarget,n=d.indexOf(r),t=l[n].value;t!==i&&(s(r),o(t))},u=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;r=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;r=d[n]??d[d.length-1];break}}r?.focus()};return(0,C.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:a}=e;return(0,C.jsx)("li",{role:"tab",tabIndex:i===r?0:-1,"aria-selected":i===r,ref:e=>d.push(e),onKeyDown:u,onClick:c,...a,className:(0,t.A)("tabs__item",w.tabItem,a?.className,{"tabs__item--active":i===r}),children:n??r},r)}))})}function v(e){let{lazy:r,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=o.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,C.jsx)("div",{className:"margin-top--md",children:o.map(((e,r)=>(0,i.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function b(e){const r=p(e);return(0,C.jsxs)("div",{className:(0,t.A)("tabs-container",w.tabList),children:[(0,C.jsx)(f,{...r,...e}),(0,C.jsx)(v,{...r,...e})]})}function G(e){const r=(0,m.A)();return(0,C.jsx)(b,{...e,children:u(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var i=n(6540);const t={},a=i.createContext(t);function o(e){const r=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);