"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[4785],{8811:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var t=r(4848),a=r(8453),o=r(1470),i=r(9365);const l={},s="Validating Data",d={id:"code-snippets/37",title:"Validating Data",description:"The following page provides a list of examples that demonstrate how to validate data.",source:"@site/datagrid/code-snippets/37.md",sourceDirName:"code-snippets",slug:"/code-snippets/37",permalink:"/xceed-doc-ui/datagrid/code-snippets/37",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Using Statistical Functions",permalink:"/xceed-doc-ui/datagrid/code-snippets/36"},next:{title:"Creating a Custom Theme",permalink:"/xceed-doc-ui/datagrid/creating-custom-theme/overview"}},c={},u=[{value:"Providing a cell error style",id:"providing-a-cell-error-style",level:3},{value:"Providing binding-level validation",id:"providing-binding-level-validation",level:3},{value:"Providing UI-level validation",id:"providing-ui-level-validation",level:3}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"validating-data",children:"Validating Data"})}),"\n",(0,t.jsx)(n.p,{children:"The following page provides a list of examples that demonstrate how to validate data."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."})}),"\n",(0,t.jsx)(n.h3,{id:"providing-a-cell-error-style",children:"Providing a cell error style"}),"\n",(0,t.jsx)(n.p,{children:"The following example demonstrates how to provide a new style that will change the foreground color of a cell when its value fails the validation process."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n     xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n     <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                        Source="{Binding Source={x:Static Application.Current}, \r\n                                                         Path=Composers}"/>\r\n     <Style x:Key="cell_error" TargetType="{x:Type xcdg:DataCell}">\r\n          <Setter Property="Foreground" Value="Red"/>\r\n       </Style>\r\n  </Grid.Resources> \r\n  <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                                            CellErrorStyle="{StaticResource cell_error}">\r\n     <xcdg:DataGridControl.Columns>\r\n       <xcdg:Column FieldName="Period"\r\n                    CellEditor="{StaticResource periodEditor}">                                   \r\n          <xcdg:Column.CellValidationRules>\r\n             <local:PeriodVSCompositionCountCellValidationRule/>\r\n          </xcdg:Column.CellValidationRules>\r\n       </xcdg:Column>\r\n       <xcdg:Column FieldName="CompositionCount">\r\n          <xcdg:Column.CellValidationRules>\r\n             <local:PeriodVSCompositionCountCellValidationRule />\r\n          </xcdg:Column.CellValidationRules>\r\n       </xcdg:Column>\r\n     </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"providing-binding-level-validation",children:"Providing binding-level validation"}),"\n",(0,t.jsx)(n.p,{children:"The following example demonstrates how to create a custom ValidationRule and apply it to a column's binding to provide binding-level validation."}),"\n",(0,t.jsxs)(n.p,{children:["The implementation for the ",(0,t.jsx)(n.code,{children:"YearValidationRule"})," is provided below."]}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                          Source="{Binding Source={x:Static Application.Current}, \r\n                                                          Path=Composers}"/>\r\n    </Grid.Resources>\r\n  \r\n    <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                          UpdateSourceTrigger="RowEndingEdit">\r\n      <xcdg:DataGridControl.Columns> \r\n        <xcdg:Column FieldName="BirthYear">\r\n            <xcdg:Column.DisplayMemberBindingInfo>\r\n              <xcdg:DataGridBindingInfo Path="BirthYear">\r\n                  <xcdg:DataGridBindingInfo.ValidationRules>\r\n                    <local:YearValidationRule />\r\n                  </xcdg:DataGridBindingInfo.ValidationRules>\r\n              </xcdg:DataGridBindingInfo>\r\n            </xcdg:Column.DisplayMemberBindingInfo>\r\n        </xcdg:Column>\r\n        <xcdg:Column FieldName="DeathYear">\r\n            <xcdg:Column.DisplayMemberBindingInfo>\r\n              <xcdg:DataGridBindingInfo Path="DeathYear">\r\n                  <xcdg:DataGridBindingInfo.ValidationRules>\r\n                    <local:YearValidationRule />\r\n                  </xcdg:DataGridBindingInfo.ValidationRules>\r\n              </xcdg:DataGridBindingInfo>\r\n            </xcdg:Column.DisplayMemberBindingInfo>\r\n        </xcdg:Column>      \r\n      </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})}),(0,t.jsx)(i.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing System.Windows.Controls;\r\nusing System.Globalization;\r\nnamespace Xceed.Wpf.Documentation\r\n{\r\n  public class YearValidationRule : ValidationRule\r\n  {\r\n    public override ValidationResult Validate( object value, CultureInfo cultureInfo )\r\n    {\r\n      int year = ( int )value;\r\n      if( year > DateTime.Now.Year )\r\n        return new ValidationResult( false, "Chosen year cannot be greater than this year." );\r\n      return ValidationResult.ValidResult;\r\n    }\r\n  }\r\n}\n'})})}),(0,t.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'  Imports System\r\n  Imports System.Windows.Controls\r\n  Imports System.Globalization\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class YearValidationRule\r\n                Inherits ValidationRule\r\n      Public Overrides Function Validate( ByVal value As Object, _\r\n                                          ByVal cultureInfo As CultureInfo ) As ValidationResult\r\n        Dim year As Integer = CInt( value )\r\n        If year > DateTime.Now.Year Then\r\n          Return New ValidationResult( False, "Chosen year cannot be greater than this year." )\r\n        End If\r\n        Return ValidationResult.ValidResult\r\n      End Function\r\n    End Class\r\n  End Namespace\n'})})})]}),"\n",(0,t.jsx)(n.h3,{id:"providing-ui-level-validation",children:"Providing UI-level validation"}),"\n",(0,t.jsxs)(n.p,{children:["The following example demonstrates how to create a custom CellValidationRule and add it to a column's ",(0,t.jsx)(n.code,{children:"CellValidationRules"})," collection to provide UI-level validation."]}),"\n",(0,t.jsxs)(n.p,{children:["The implementation for the ",(0,t.jsx)(n.code,{children:"PeriodVSCompositionCountCellValidationRule"})," and Person class are provided below."]}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(i.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n    xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Composers}"/>\r\n    \x3c!--A data provider to bind to the Period enum--\x3e\r\n    <ObjectDataProvider x:Key="periods"\r\n                        MethodName="GetValues"\r\n                        ObjectType="{x:Type local:Period}">\r\n        <ObjectDataProvider.MethodParameters>\r\n          <x:Type TypeName="local:Period"/>\r\n        </ObjectDataProvider.MethodParameters>\r\n    </ObjectDataProvider>\r\n    \x3c!--A cell editor that will be used to edit a Period column with a combo box--\x3e\r\n    <xcdg:CellEditor x:Key="periodEditor">\r\n        <xcdg:CellEditor.EditTemplate>\r\n          <DataTemplate>\r\n              <ComboBox BorderThickness="0"\r\n                        MinHeight="22"\r\n                        VerticalContentAlignment="Top"\r\n                        SelectedValuePath="."\r\n                        ItemsSource="{Binding Source={StaticResource periods}}"\r\n                        SelectedValue="{xcdg:CellEditorBinding}">\r\n                <ComboBox.Resources>\r\n                    <Style TargetType="Popup">\r\n                      <Setter Property="TextElement.Foreground"\r\n                              Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />\r\n                    </Style>\r\n                </ComboBox.Resources>\r\n              </ComboBox>\r\n          </DataTemplate>\r\n        </xcdg:CellEditor.EditTemplate>\r\n    </xcdg:CellEditor>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                        UpdateSourceTrigger="RowEndingEdit">\r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="Period"\r\n                    CellEditor="{StaticResource periodEditor}">                                   \r\n          <xcdg:Column.CellValidationRules>\r\n            <local:PeriodVSCompositionCountCellValidationRule/>\r\n          </xcdg:Column.CellValidationRules>\r\n      </xcdg:Column>\r\n      <xcdg:Column FieldName="CompositionCount">\r\n          <xcdg:Column.CellValidationRules>\r\n            <local:PeriodVSCompositionCountCellValidationRule />\r\n          </xcdg:Column.CellValidationRules>\r\n      </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,t.jsx)(i.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  using System;\r\n  using Xceed.Wpf.DataGrid.ValidationRules;\r\n  using Xceed.Wpf.DataGrid;\r\n  using System.Globalization;\r\n  using System.Windows.Controls;\r\n  namespace Xceed.Wpf.Documentation\r\n  { \r\n  public class PeriodVSCompositionCountCellValidationRule : CellValidationRule\r\n  {\r\n    public override ValidationResult Validate( object value, CultureInfo culture,\r\n                                                CellValidationContext context )\r\n    {\r\n      Row parentRow = context.Cell.ParentRow;\r\n      int compositionCount;\r\n      Period period;\r\n      if( context.Cell.FieldName == "Period" )\r\n      {\r\n        period = ( Period )value;       \r\n        compositionCount = ( int )parentRow.Cells[ "CompositionCount" ].Content;\r\n      }\r\n      else\r\n      {\r\n        period = ( Period )parentRow.Cells[ "Period" ].Content;\r\n        compositionCount = ( int )value;\r\n      }\r\n      if( ( period == Period.Modern ) && compositionCount > 40 )\r\n        return new ValidationResult( false, "Composition count must be less than 50 when the period is set to Modern." );\r\n      return ValidationResult.ValidResult;\r\n    }\r\n  }\r\n  }\n'})})}),(0,t.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'  Imports System\r\n  Imports Xceed.Wpf.DataGrid.ValidationRules\r\n  Imports Xceed.Wpf.DataGrid\r\n  Imports System.Globalization\r\n  Imports System.Windows.Controls\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class PeriodVSCompositionCountCellValidationRule\r\n                Inherits CellValidationRule\r\n      Public Overrides Function Validate( ByVal value As Object, ByVal culture As CultureInfo, _\r\n                                          ByVal context As CellValidationContext ) As ValidationResult\r\n        Dim parentRow As Row = context.Cell.ParentRow\r\n        Dim compositionCount As Integer\r\n        Dim period As Period\r\n        If context.Cell.FieldName = "Period" Then\r\n          period = CType( value, Period )\r\n          compositionCount = CInt( parentRow.Cells( "CompositionCount" ).Content )\r\n        Else\r\n          period = CType( parentRow.Cells( "Period" ).Content, Period )\r\n          compositionCount = CInt( value )\r\n        End If\r\n        If( ( period = Period.Modern ) And ( compositionCount > 40 ) ) Then\r\n          Return New ValidationResult( False, "Composition count must be less than 50 when the period is set to Modern." );\r\n        End If\r\n        Return ValidationResult.ValidResult\r\n      End Function\r\n    End Class\r\n  End Namespace\n'})})})]}),"\n",(0,t.jsx)(n.p,{children:"Implementation of the Person class"}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(i.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'  using System.ComponentModel;\r\n  using System.Windows.Media;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    public class Person: INotifyPropertyChanged, IDataErrorInfo\r\n    {\r\n      public Person( int personID, string firstName, string lastName, int age )\r\n      {\r\n        m_personID = personID;\r\n        m_firstName = firstName;\r\n        m_lastName = lastName;\r\n        m_age = age;\r\n      }\r\n      public Person()\r\n      {\r\n      }\r\n      public int PersonID\r\n      {\r\n        get\r\n        {\r\n          return m_personID;\r\n        }\r\n      }\r\n      public string FirstName\r\n      {\r\n        get\r\n        {\r\n          return m_firstName;\r\n        }\r\n        set\r\n        {\r\n          if( m_firstName != value )\r\n          {\r\n            m_firstName = value;\r\n            this.OnPropertyChanged( "FirstName" );\r\n          }\r\n        }\r\n      }\r\n      public string LastName\r\n      {\r\n        get\r\n        {\r\n          return m_lastName;\r\n        }\r\n        set\r\n        {\r\n          if( m_lastName != value )\r\n          {\r\n            m_lastName = value;\r\n            this.OnPropertyChanged( "LastName" );\r\n          }\r\n        }\r\n      }\r\n      public int Age\r\n      {\r\n        get\r\n        {\r\n          return m_age;\r\n        }\r\n        set\r\n        {\r\n          if( m_age == value )\r\n            return;\r\n          m_age = value;\r\n          this.OnPropertyChanged( "Age" );\r\n        }\r\n      }\r\n      // INotifyPropertyChanged implementation\r\n      public event PropertyChangedEventHandler PropertyChanged;\r\n      private void OnPropertyChanged( string propertyName )\r\n      {\r\n        if( this.PropertyChanged != null )\r\n          this.PropertyChanged( this, new PropertyChangedEventArgs( propertyName ) );\r\n      }\r\n      // IDataErrorInfo implementation\r\n      [EditorBrowsable( EditorBrowsableState.Never ) ]\r\n      [Browsable( false )]\r\n      public string Error\r\n      {\r\n        get\r\n        {\r\n          return "IDataErrorInfo Error Message";\r\n        }\r\n      }\r\n      [EditorBrowsable( EditorBrowsableState.Never )]\r\n      [Browsable( false )]\r\n      public string this[ string propertyName ]\r\n      {\r\n        get\r\n        {\r\n          if( propertyName == "Age" )\r\n          {\r\n            if( m_age < 18 )\r\n              return "An employee must be 18 years or older.";\r\n          }\r\n          return string.Empty;\r\n        }\r\n      }   \r\n      private string m_firstName = string.Empty;\r\n      private string m_lastName = string.Empty;\r\n      private int m_personID;\r\n      private int m_age = 18;\r\n    }\r\n  }\n'})})}),(0,t.jsx)(i.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'  Imports System.ComponentModel\r\n  Imports System.Windows.Media\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class Person\r\n                Implements INotifyPropertyChanged\r\n      Public Sub New( personID As Integer, firstName As String, lastName As String, age As Integer )\r\n        m_personID = personID\r\n        m_firstName = firstName\r\n        m_lastName = lastName\r\n        m_age = age\r\n      End Sub\r\n      public Sub New()\r\n      End sub   \r\n      Public ReadOnly Property PersonID As Integer\r\n        Get\r\n          Return m_personID\r\n        End Get\r\n      End Property\r\n      Public Property FirstName As String\r\n        Get\r\n          Return m_firstName\r\n        End Get\r\n        Set( ByVal value As String )\r\n          If m_firstName <> value Then\r\n            m_firstName = value\r\n            Me.OnPropertyChanged( "FirstName" )\r\n          End If\r\n        End Set\r\n      End Property\r\n      Public Property LastName As String\r\n        Get\r\n          Return m_lastName\r\n        End Get\r\n        Set( ByVal value As String )\r\n          If m_lastName <> value Then\r\n            m_lastName = value\r\n            Me.OnPropertyChanged( "LastName" )\r\n          End If\r\n        End Set\r\n      End Property\r\n      Public Property Age As Integer\r\n        Get\r\n          Return m_age\r\n        End Get\r\n        Set( ByVal value As Integer )\r\n          If m_age = value Then\r\n            Return\r\n          End If\r\n          m_age = value\r\n          Me.OnPropertyChanged( "Age" )\r\n        End Set\r\n      End Property\r\n      \' INotifyPropertyChanged implementation\r\n      Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\r\n      Private Sub OnPropertyChanged( ByVal propertyName As String )\r\n        If Not Me.PropertyChanged Is Nothing Then\r\n          Me.PropertyChanged( Me, New PropertyChangedEventArgs( propertyName ) )\r\n        End If\r\n      End Sub\r\n      private string m_firstName = string.Empty;\r\n      private string m_lastName = string.Empty;\r\n      private m_personID As Integer\r\n      Private m_age As Integer = 18\r\n    End Class\r\n  End Namespace\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var t=r(4164);const a={tabItem:"tabItem_Ymn6"};var o=r(4848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,i),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>I});var t=r(6540),a=r(4164),o=r(3104),i=r(6347),l=r(205),s=r(7485),d=r(1682),c=r(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:r}=e;const a=(0,i.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,s.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,o=m(e),[i,s]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[d,u]=g({queryString:r,groupId:a}),[h,C]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Dv)(r);return[a,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),x=(()=>{const e=d??h;return p({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{x&&s(x)}),[x]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),C(e)}),[u,C,o]),tabValues:o}}var C=r(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(4848);function f(e){let{className:n,block:r,selectedValue:t,selectValue:i,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),c=e=>{const n=e.currentTarget,r=s.indexOf(n),a=l[r].value;a!==t&&(d(n),i(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>s.push(e),onKeyDown:u,onClick:c,...o,className:(0,a.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:o}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=h(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,v.jsx)(f,{...n,...e}),(0,v.jsx)(b,{...n,...e})]})}function I(e){const n=(0,C.A)();return(0,v.jsx)(y,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const a={},o=t.createContext(a);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);