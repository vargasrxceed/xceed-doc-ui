"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[3843],{1796:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var t=r(4848),i=r(8453),o=r(1470),a=r(9365);const l={},s="Foreign Key Detection",c={id:"fundamentals/editing-validating/foreign-key-detection",title:"Foreign Key Detection",description:"Through the DataGridCollectionView[Source] (as well as other collection views that derive from DataGridCollectionView[Source]Base), foreign key constraints defined by a DataTable or DataView used as a data source, as well as enums, can be automatically detected and displayed and edited, through a ComboBox, as the corresponding value rather than its key. In order to automatically detect foreign key constraints, the collection view's AutoCreateForeignKeyDescriptions property must be set to true, which will result in a DataGridForeignKeyDescription being created for each constraint in the ConstraintCollection of the DataTable or DataView used as a source as well as for each enum.",source:"@site/datagrid/fundamentals/editing-validating/foreign-key-detection.md",sourceDirName:"fundamentals/editing-validating",slug:"/fundamentals/editing-validating/foreign-key-detection",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/foreign-key-detection",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Cell Error Styles",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/cell-error-styles"},next:{title:"Filtering Data",permalink:"/xceed-doc-ui/datagrid/fundamentals/filtering/overview"}},d={},u=[{value:"Foreign Key Configurations",id:"foreign-key-configurations",level:2},{value:"Custom Key/Value Mappings",id:"custom-keyvalue-mappings",level:2},{value:"Not Binding Through a <code>DataGridCollectionView[Source]</code>?",id:"not-binding-through-a-datagridcollectionviewsource",level:2},{value:"Cell Editors",id:"cell-editors",level:2},{value:"Grouping",id:"grouping",level:2},{value:"Examples",id:"examples",level:2}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"foreign-key-detection",children:"Foreign Key Detection"})}),"\n",(0,t.jsxs)(n.p,{children:["Through the ",(0,t.jsx)(n.code,{children:"DataGridCollectionView[Source]"})," (as well as other collection views that derive from ",(0,t.jsx)(n.code,{children:"DataGridCollectionView[Source]Base"}),"), foreign key constraints defined by a DataTable or DataView used as a data source, as well as enums, can be automatically detected and displayed and edited, through a ComboBox, as the corresponding value rather than its key. In order to automatically detect foreign key constraints, the collection view's AutoCreateForeignKeyDescriptions property must be set to true, which will result in a ",(0,t.jsx)(n.code,{children:"DataGridForeignKeyDescription"})," being created for each constraint in the ",(0,t.jsx)(n.code,{children:"ConstraintCollection"})," of the ",(0,t.jsx)(n.strong,{children:"DataTable"})," or ",(0,t.jsx)(n.strong,{children:"DataView"})," used as a source as well as for each enum."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Foreign key constraints and enums can also be automatically detected for details by setting a detail description's ",(0,t.jsx)(n.code,{children:"AutoCreateForeignKeyDescriptions"})," property to true."]})}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"AutoCreateForeignKeyDescriptions"})," is set to false or the underlying data source is not a ",(0,t.jsx)(n.strong,{children:"DataTable"})," or ",(0,t.jsx)(n.strong,{children:"DataView"}),", the foreign key descriptions can be manually specified for each constraint or enum through the ",(0,t.jsx)(n.code,{children:"ForeignKeyDescription"})," property of the item property that represents the constraint or enum. When manually defining foreign key descriptions because the ",(0,t.jsx)(n.code,{children:"AutoCreateForeignKeyDescriptions"})," property is set to false, the ",(0,t.jsx)(n.strong,{children:"ItemsSource"})," property and the ValuePath properties must be set in order to specify the source from which the values will be retrieved as well as their path, which represents the primary key of the foreign item in the ",(0,t.jsx)(n.strong,{children:"ItemsSource"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Foreign key descriptions can also be specified when the constraints are automatically detected in the case where modifications need to be made to the descriptions. In that case, if the ",(0,t.jsx)(n.strong,{children:"ItemsSource"})," property has not been set, it will be updated to match the value that was automatically detected."]}),"\n",(0,t.jsxs)(n.p,{children:["For sorting to be executed on the value instead of the key, it is required to manually add foreign-key descriptions and set the ",(0,t.jsx)(n.code,{children:"DisplayMemberPath"})," property or the ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," property."]}),"\n",(0,t.jsx)(n.h2,{id:"foreign-key-configurations",children:"Foreign Key Configurations"}),"\n",(0,t.jsxs)(n.p,{children:["By default, when a foreign key constraint is detected in a ",(0,t.jsx)(n.strong,{children:"DataTable"})," or ",(0,t.jsx)(n.strong,{children:"DataView"})," and a foreign key description is automatically created, the key will be replaced by the appropriate value (i.e., object). Each column defines a foreign key configuration, which is represented by the ",(0,t.jsx)(n.code,{children:"ForeignKeyConfiguration"})," class, and through which the visual representation of a foreign key description can be configured. When the grid's ",(0,t.jsx)(n.code,{children:"AutoCreateForeignKeyConfigurations"})," property is set to true, any and all foreign key descriptions will be parsed and configurations will be created for each one. If a configuration has been manually created, it will be used rather than the one generated from its corresponding foreign key description. As of version 5.0, the displayed value in a DataCell can now be used when exporting or copying a column defining a ",(0,t.jsx)(n.code,{children:"ForeignKeyConfiguration"})," or a ",(0,t.jsx)(n.code,{children:"DisplayedValueConverter"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, if a ",(0,t.jsx)(n.code,{children:"CellContentTemplate"})," is specified, the same template will be applied to the foreign key configuration (see ",(0,t.jsx)(n.em,{children:"EmployeeID"})," column in Example 1). For simpler configurations, or when a cell-content template is not required, a configuration's ",(0,t.jsx)(n.code,{children:"ValuePath"})," and ",(0,t.jsx)(n.code,{children:"DisplayMemberPath"}),' can be used to indicate the path to the value on the source object that corresponds to the "key" and the path to its its visual representation, respectively (see ',(0,t.jsx)(n.em,{children:"ShipVia"})," and ",(0,t.jsx)(n.em,{children:"CustomerID"})," columns in Example 1)."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Whenever a ",(0,t.jsx)(n.code,{children:"ForeignKeyDescription"})," is set using a ",(0,t.jsx)(n.code,{children:"DisplayMemberPath"})," for a simple configuration (e.g., does not require a ",(0,t.jsx)(n.code,{children:"CellContentTemplate"}),", does not require exporting values rather than keys, uses the default ",(0,t.jsx)(n.code,{children:"FilterCell"})," editor. See example 2) it is not necessary to add a ",(0,t.jsx)(n.code,{children:"ForeignKeyConfiguration"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"custom-keyvalue-mappings",children:"Custom Key/Value Mappings"}),"\n",(0,t.jsxs)(n.p,{children:["By default, foreign key constraints defined by a ",(0,t.jsx)(n.strong,{children:"DataTable"})," or ",(0,t.jsx)(n.strong,{children:"DataView"})," as well as enums can be automatically detected; however, through a ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"}),", custom key/value mappings can also be defined. When providing custom key/value mappings, a foreign key converter must be created by deriving from the ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," class and overriding its GetKeyFromValue and GetValueFromKey methods in which the value for a specified key and the key for a specified value should be returned (see implementation of PersonForeignKeyConverter class in Example 3). This converter can then be provided to the ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," property of either a foreign key description or configuration."]}),"\n",(0,t.jsxs)(n.p,{children:["If a ForeignKeyConverter has not been explicitly provided for a ",(0,t.jsx)(n.code,{children:"ForeignKeyConfiguration"}),", the converter from its corresponding ",(0,t.jsx)(n.code,{children:"DataGridForeignKeyDescription"})," will be used."]}),"\n",(0,t.jsx)(n.p,{children:"If sorting is based on a combination of values, or if it is based on a value different than what is displayed in the DatatGrid\u2019s cells (e.g., cells show a picture), a ForeignKeyConverter must be used (see example 4)"}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["When sorting on value rather than key and the DataGrid is bound to a source different than a ",(0,t.jsx)(n.strong,{children:"DataTable"})," or a ",(0,t.jsx)(n.strong,{children:"DataView"}),", ",(0,t.jsx)(n.strong,{children:"AND"})," performance is important (e.g.,, both the DataGrid\u2019s ",(0,t.jsx)(n.strong,{children:"ItemsSource"}),"  and the foreign key ItemsSource have a lot of items), a custom ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," must be provided, and use an efficient way to find the right item that matches the foreign key.  The default ",(0,t.jsx)(n.code,{children:"DataGridForeignKeyConverter"})," uses reflection (since the item\u2019s type is not known), which is not efficient when sorting a lot of items."]})}),"\n",(0,t.jsxs)(n.h2,{id:"not-binding-through-a-datagridcollectionviewsource",children:["Not Binding Through a ",(0,t.jsx)(n.code,{children:"DataGridCollectionView[Source]"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["Although it is recommended to always bind the grid to its data by-proxy of a ",(0,t.jsx)(n.code,{children:"DataGridCollectionView[Source]"})," or any other data-grid collection view, it is not obligatory. When binding a grid directly to a source that contains foreign key constraints or enums and data-grid collection view is not used, it is still possible to display the value rather than the key of the constraints and enums; however, they must be defined manually by providing the appropriate foreign key configurations (see Example 3), and a ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," must be used in order to convert keys to values and back (see ReportsTo column in Example 3)."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"AutoCreateForeignKeyConfigurations"})," property is ignored when the grid is not bound to its data by-proxy of a data-grid collection view."]})}),"\n",(0,t.jsx)(n.h2,{id:"cell-editors",children:"Cell Editors"}),"\n",(0,t.jsxs)(n.p,{children:["Whether a foreign key constraint or enum is automatically detected or manually provided, the end result is that a ComboBox is used to edit the content of the corresponding cell unless a cell editor has been explicitly provided, in which case, the provided cell editor will be used. Cell editors that are created to edit foreign key constraints can access information about their parent column, such as the ",(0,t.jsx)(n.code,{children:"CellContentTemplate"})," to use, through the ",(0,t.jsx)(n.code,{children:"CellEditorContext"})," attached property. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<xcdg:Column.CellEditor>\r\n  \x3c!-- ForeignKey CellEditor --\x3e\r\n  <xcdg:CellEditor >\r\n     <xcdg:CellEditor.EditTemplate>\r\n        <DataTemplate>\r\n           <DataTemplate.Resources>\r\n              <xcdg:NullToBooleanConverter x:Key="nullToBooleanConverter" />\r\n           </DataTemplate.Resources>\r\n           \r\n           <ListBox x:Name="fkListBox"\r\n                     xcdg:Cell.IsCellFocusScope="True"\r\n                     ItemTemplate="{Binding RelativeSource={RelativeSource Self},\r\n                                            Path=(xcdg:Cell.CellEditorContext).ParentColumn.CellContentTemplate, Mode=OneWay}"\r\n                     ItemContainerStyle="{Binding RelativeSource={RelativeSource Self},\r\n                                                  Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.ItemContainerStyle,Mode=OneWay}"\r\n                     ItemsSource="{Binding RelativeSource={RelativeSource Self},\r\n                                           Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.ItemsSource, Mode=OneWay}"\r\n                     SelectedValuePath="{Binding RelativeSource={RelativeSource Self},\r\n                                                 Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.ValuePath,Mode=OneWay}"\r\n                     DisplayMemberPath="{Binding RelativeSource={RelativeSource Self},\r\n                                                 Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.DisplayMemberPath,Mode=OneWay}"\r\n                     SelectedValue="{xcdg:CellEditorBinding}" />\r\n           \x3c!-- Only affect Selector if Template or Style is null --\x3e\r\n           <DataTemplate.Triggers>\r\n              <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                             Path=(xcdg:Cell.CellEditorContext).ParentColumn.CellContentTemplate,\r\n                                             Converter={StaticResource nullToBooleanConverter},\r\n                                             Mode=OneWay}"\r\n                           Value="True">\r\n                 <Setter TargetName="fkListBox"\r\n                         Property="ItemTemplateSelector"\r\n                         Value="{Binding RelativeSource={RelativeSource Self},\r\n                                         Path=(xcdg:Cell.CellEditorContext).ParentColumn.CellContentTemplateSelector,\r\n                                         Mode=OneWay}" />\r\n              </DataTrigger>\r\n              <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},\r\n                                             Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.ItemContainerStyle,\r\n                                             Converter={StaticResource nullToBooleanConverter},\r\n                                             Mode=OneWay}"\r\n                           Value="True">\r\n                 <Setter TargetName="fkListBox"\r\n                         Property="ItemContainerStyleSelector"\r\n                         Value="{Binding RelativeSource={RelativeSource Self},\r\n                                         Path=(xcdg:Cell.CellEditorContext).ForeignKeyConfiguration.ItemContainerStyleSelector,\r\n                                         Mode=OneWay}" />\r\n              </DataTrigger>\r\n           </DataTemplate.Triggers>\r\n        </DataTemplate>\r\n     </xcdg:CellEditor.EditTemplate>\r\n  </xcdg:CellEditor>\r\n</xcdg:Column.CellEditor>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the default editor is used, its ItemTemplate property will be updated to match the value displayed in the cell. For example, if a ",(0,t.jsx)(n.code,{children:"CellContentTemplate"})," that displays ",(0,t.jsx)(n.em,{children:"FirstName"})," and ",(0,t.jsx)(n.em,{children:"LastName"})," rather than ",(0,t.jsx)(n.em,{children:"EmployeeID"})," is used, then the ItemTemplate will also display the value in the same format."]}),"\n",(0,t.jsx)(n.p,{children:"In the case where a required foreign key configuration is not provided (e.g., forego the use of a data-grid collection view or custom key/value mapping), the default text or numeric editor will be used."}),"\n",(0,t.jsxs)(n.p,{children:["By default, a ",(0,t.jsx)(n.code,{children:"ComboBox"})," is used as a ",(0,t.jsx)(n.code,{children:"FilterCell"})," editor, which displays possible values to filter by.  However, a TextBox similar to non-ForeignKey string columns can be used as an editor to filter on more than one value. In order to activate this functionality, a ForeignKeyConfiguration must be defined on the corresponding column, and the UseDefaultFilterCriterion property must be set to false."]}),"\n",(0,t.jsx)(n.h2,{id:"grouping",children:"Grouping"}),"\n",(0,t.jsxs)(n.p,{children:["When the values of a column that has a foreign-key configuration are grouped, they will be grouped according to the value displayed in the cell rather than its corresponding key.\r\nUsing Foreign Keys with ",(0,t.jsx)(n.code,{children:"TableflowView"}),"\r\nWhen using a ",(0,t.jsx)(n.code,{children:"TableflowView"}),", because more than one group level is displayed in the GroupHeaderControl, a reference point is needed to automatically create a DataTemplate that will bind to the group's value and convert it correctly with a ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"})," to allow the use of the CellContentTemplate directly, as with a column. That reference point is the GroupNavigationButton. Therefore, if you intend to modify how the ",(0,t.jsx)(n.code,{children:"GroupNavigation"})," buttons or values are displayed in the ",(0,t.jsx)(n.code,{children:"GroupHeaderControl"}),", by changing the implicit DataTemplate for their corresponding Group, and you wish to display several levels, as in our themes, you must use a ",(0,t.jsx)(n.code,{children:"GroupNavigationButton"})," as a root visual for the Group and its ParentGroups in order to take advantage of the ForeignKey feature."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database or a collection of Person objects, unless stated otherwise."}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 1: Defining foreign key configurations"}),(0,t.jsxs)(n.p,{children:["The following example demonstrates how to define foreign key configurations for foreign key descriptions that were automatically created from the constraints extracted from the underlying ",(0,t.jsx)(n.strong,{children:"DataTable"}),"."]}),(0,t.jsx)(o.A,{children:(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                        Source="{Binding Source={x:Static Application.Current}, Path=Orders}"\r\n                                        AutoCreateForeignKeyDescriptions="True"/>\r\n  </Grid.Resources>      \r\n  \r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                        AutoCreateForeignKeyConfigurations="True">\r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="EmployeeID"\r\n                      Title="Employee">\r\n            <xcdg:Column.CellContentTemplate>\r\n              <DataTemplate>\r\n                  <StackPanel Orientation="Horizontal">\r\n                    <TextBlock Text="{Binding FirstName}" />\r\n                    <TextBlock Text=" " />\r\n                    <TextBlock Text="{Binding LastName}" />\r\n                  </StackPanel>\r\n              </DataTemplate>\r\n            </xcdg:Column.CellContentTemplate>\r\n        </xcdg:Column>\r\n        <xcdg:Column FieldName="CustomerID"\r\n                      Title="Customer">\r\n            <xcdg:Column.ForeignKeyConfiguration>\r\n              <xcdg:ForeignKeyConfiguration DisplayMemberPath="CompanyName"\r\n                                            ValuePath="CustomerID" />\r\n            </xcdg:Column.ForeignKeyConfiguration>\r\n        </xcdg:Column>\r\n        \r\n        <xcdg:Column FieldName="ShipVia"\r\n                      Title="Shipping Company">\r\n            <xcdg:Column.ForeignKeyConfiguration>\r\n              <xcdg:ForeignKeyConfiguration DisplayMemberPath="CompanyName"\r\n                                            ValuePath="ShipperID" />\r\n            </xcdg:Column.ForeignKeyConfiguration>\r\n        </xcdg:Column>\r\n      </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 2 : Defining foreign key descriptions"}),(0,t.jsx)(n.p,{children:"The following example demonstrates how to define foreign key descriptions, which will correctly sort and display values rather than keys."}),(0,t.jsx)(o.A,{children:(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                          Source="{Binding Source={x:Static Application.Current}, Path=Products}" >\r\n\r\n            <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n                <xcdg:DataGridItemProperty Name="CategoryID"\r\n                                          Title="Category">\r\n                  <xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                      <xcdg:DataTableForeignKeyDescription ItemsSource="{Binding Source={x:Static Application.Current}, Path=Categories}"\r\n                                                          ValuePath="CategoryID"\r\n                                                          DisplayMemberPath="CategoryName" />\r\n                  </xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                </xcdg:DataGridItemProperty>\r\n\r\n                <xcdg:DataGridItemProperty Name="SupplierID"\r\n                                          Title="Supplier">\r\n                  <xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                      <xcdg:DataTableForeignKeyDescription ItemsSource="{Binding Source={x:Static Application.Current}, Path=Suppliers}"\r\n                                                          ValuePath="SupplierID"\r\n                                                          DisplayMemberPath="CompanyName" />\r\n                  </xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                </xcdg:DataGridItemProperty>\r\n            </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n\r\n          </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>      \r\n\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                          AutoCreateForeignKeyConfigurations="True"/>\r\n</Grid> \n'})})})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 3: Custom key/value mappings"}),(0,t.jsxs)(n.p,{children:["The following example demonstrates how to bind the grid directly to a ",(0,t.jsx)(n.code,{children:"BindingList<Person>"})," objects and provide a custom key/value mapping through a ",(0,t.jsx)(n.strong,{children:"ForeignKeyConverter"}),", which will return the appropriate employee first and last names for the provided employee ",(0,t.jsx)(n.strong,{children:"ID"}),"."]}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <local:OccupationToStringConverter x:Key="occupationToStringConverter" />\r\n    <local:PersonForeignKeyConverter x:Key="personForeignKeyConverter" />\r\n    <ObjectDataProvider x:Key="occupationValues"\r\n                        MethodName="GetValues"\r\n                        ObjectType="{x:Type sys:Enum}">\r\n        <ObjectDataProvider.MethodParameters>\r\n          <x:Type TypeName="local:Occupation" />\r\n        </ObjectDataProvider.MethodParameters>\r\n    </ObjectDataProvider>\r\n  </Grid.Resources>    \r\n\r\n  <xcdg:DataGridControl x:Name="PersonsGrid"\r\n                        ItemsSource="{Binding Source={x:Static Application.Current}, Path=Persons}">\r\n    <xcdg:DataGridControl.Columns>\r\n      <xcdg:Column FieldName="Occupation">\r\n          <xcdg:Column.CellContentTemplate>\r\n            <DataTemplate>\r\n                <TextBlock Text="{Binding Converter={StaticResource occupationToStringConverter}}" />\r\n            </DataTemplate>\r\n          </xcdg:Column.CellContentTemplate>\r\n          <xcdg:Column.ForeignKeyConfiguration>\r\n            <xcdg:ForeignKeyConfiguration ItemsSource="{Binding Source={StaticResource occupationValues}}" />\r\n          </xcdg:Column.ForeignKeyConfiguration>\r\n      </xcdg:Column>\r\n      <xcdg:Column FieldName="ReportsTo">\r\n          <xcdg:Column.CellContentTemplate>\r\n            <DataTemplate>\r\n                <StackPanel Orientation="Horizontal">\r\n                  <TextBlock Text="{Binding FirstName}" />\r\n                  <TextBlock Text=" " />\r\n                  <TextBlock Text="{Binding LastName}" />\r\n                </StackPanel>\r\n            </DataTemplate>\r\n          </xcdg:Column.CellContentTemplate>\r\n          <xcdg:Column.ForeignKeyConfiguration>\r\n            <xcdg:ForeignKeyConfiguration ItemsSource="{Binding Source={x:Static Application.Current}, Path=Persons}"\r\n                                          ForeignKeyConverter="{StaticResource personForeignKeyConverter}"\r\n                                          ValuePath="PersonID"/>\r\n          </xcdg:Column.ForeignKeyConfiguration>\r\n      </xcdg:Column>\r\n    </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"  public class PersonForeignKeyConverter : ForeignKeyConverter\r\n  {\r\n    public override object GetKeyFromValue( object value, ForeignKeyConfiguration configuration )\r\n    {\r\n      PersonBindingList bindingList = configuration.ItemsSource as PersonBindingList;\r\n      if( bindingList != null )\r\n      {\r\n        Person person = value as Person;\r\n        if( person != null )\r\n        {\r\n          return person.PersonID;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n    public override object GetValueFromKey( object key, ForeignKeyConfiguration configuration )\r\n    {\r\n      PersonBindingList bindingList = configuration.ItemsSource as PersonBindingList;\r\n      if( bindingList != null )\r\n      {\r\n        try\r\n        {\r\n          int personID = ( int )key;\r\n          foreach( Person person in bindingList )\r\n          {\r\n            if( person.PersonID == personID )\r\n            {\r\n              return person;\r\n            }\r\n          }\r\n        }\r\n        catch( Exception )\r\n        {\r\n          // key can be null\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\n"})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:"  Public Class PersonForeignKeyConverter\r\n              Inherits ForeignKeyConverter\r\n    Public Overrides Function GetKeyFromValue( value As Object, configuration As ForeignKeyConfiguration ) As Object\r\n      Dim bindingList As PersonBindingList = TryCast( configuration.ItemsSource, PersonBindingList )\r\n      If Not bindingList Is Nothing Then\r\n        Dim person As Person = TryCast( value, Person )\r\n        If Not person Is Nothing Then\r\n          Return person.PersonID\r\n        End If\r\n      End If\r\n      Return -1\r\n    End Function\r\n    Public Overrides Function GetValueFromKey( key As Object, configuration As ForeignKeyConfiguration ) As Object\r\n    Dim bindingList As PersonBindingList = TryCast( configuration.ItemsSource, PersonBindingList )\r\n      If Not bindingList Is Nothing Then\r\n        Try\r\n          Dim personID As Integer = CInt( key )\r\n          Dim person As Person\r\n          For Each person In bindingList\r\n            If person.PersonID = personID Then\r\n              Return person\r\n            End If\r\n          Next person\r\n        Catch e As Exception\r\n          ' key can be nothing\r\n        End Try\r\n      Return Nothing\r\n    End Function\r\n  End Class\n"})})})]}),(0,t.jsx)(n.p,{children:"The following code provides the implementation of the OccupationToStringConverter class."}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class OccupationToStringConverter: IValueConverter\r\n{\r\n  public object Convert( object value, Type targetType, object parameter, System.Globalization.CultureInfo culture )\r\n  {\r\n    if( value != null && value is Occupation)\r\n    {\r\n      string enumString = value.ToString();\r\n      // Start at 1 to ignore the first capitalizes letter.\r\n      for( int i = 1; i < enumString.Length - 1; i++ )\r\n      {\r\n        if( char.IsUpper( enumString[ i ] ) )\r\n        {\r\n          enumString = enumString.Insert( i, " " );\r\n          i++;\r\n        }\r\n      }\r\n      return enumString;\r\n    }\r\n    return null;\r\n  }\r\n  public object ConvertBack( object value, Type targetType, object parameter, System.Globalization.CultureInfo culture )\r\n  {\r\n    return Binding.DoNothing;\r\n  }\r\n}\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'Public Class OccupationToStringConverter\r\n      Inherits IValueConverter\r\n  Public Function Convert( value As Object, targetType As Type, parameter As Object,\r\n                          culture As System.Globalization.CultureInfo ) As Object Implements IValueConverter.Convert\r\n    If( Not value Is Nothing ) AndAlso ( TypeOf value Is Occupation ) Then\r\n      Dim enumString As String = value.ToString()\r\n      \' Start at 1 to ignore the first capitalizes letter.\r\n      Dim i as Integer = 1\r\n      For i To i < enumString.Length - 1\r\n        If char.IsUpper( enumString( i ) ) Then\r\n          enumString = enumString.Insert( i, " " )\r\n          i++\r\n        End If\r\n      Next i\r\n      Return enumString\r\n    End If\r\n    Return Nothing\r\n  End Function\r\n  Public Function ConvertBack( value As Value, targetType As Type, parameter As Object,\r\n                              culture As System.Globalization.CultureInfo ) As Object Implements IValueConverter.ConvertBack\r\n    Return Binding.DoNothing\r\n  End Function\r\nEnd Class\n'})})})]})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Example 4 : Sorting and displaying on different values."}),(0,t.jsxs)(n.p,{children:["The following example demonstrates how to define foreign-key descriptions that sort on certain values but display these values differently, via a ",(0,t.jsx)(n.code,{children:"ForeignKeyConverter"}),".  For instance, ",(0,t.jsx)(n.em,{children:"Employees"})," will sort on last name then first name, but cells will display a photo, first name, and then last name."]}),(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{value:"xaml",label:"XAML",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n        <local:EmployeeForeignKeyConverter x:Key="employeeForeignKeyConverter" />\r\n    \r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                          Source="{Binding Source={x:Static Application.Current}, Path=Orders}">\r\n                <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n                  <xcdg:DataGridItemProperty Name="EmployeeID">\r\n                      <xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                        <xcdg:DataTableForeignKeyDescription ItemsSource="{Binding Source={x:Static Application.Current}, Path=Employees}"\r\n                                                              ValuePath="EmployeeID"\r\n                                                              ForeignKeyConverter="{StaticResource employeeForeignKeyConverter}" />\r\n                      </xcdg:DataGridItemProperty.ForeignKeyDescription>\r\n                  </xcdg:DataGridItemProperty>\r\n                </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n            </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>      \r\n    \r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                          AutoCreateForeignKeyConfigurations="True">\r\n        <xcdg:DataGridControl.Columns>\r\n                <xcdg:Column FieldName="EmployeeID"\r\n                            Title="Employee"\r\n                            Width="160">\r\n                  <xcdg:Column.CellContentTemplate>\r\n                      <DataTemplate>\r\n                        <DockPanel>\r\n                            <Image Source="{Binding SmallPhoto}"\r\n                                  Height="20"\r\n                                  VerticalAlignment="Top"\r\n                                  Margin="1"\r\n                                  DockPanel.Dock="Left" />\r\n                            <StackPanel Orientation="Horizontal">\r\n                              <TextBlock Text="{Binding FirstName}" />\r\n                              <TextBlock Text=" " />\r\n                              <TextBlock Text="{Binding LastName}" />\r\n                            </StackPanel>\r\n                        </DockPanel>\r\n                      </DataTemplate>\r\n                  </xcdg:Column.CellContentTemplate>\r\n                </xcdg:Column>\r\n        </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid> \n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class EmployeeForeignKeyConverter : DataTableForeignKeyConverter\r\n  {\r\n    //Only the GetValueFormKey method overload with the DataGridForeignKeyDescription parameter needs to be overridden,\r\n    //for the base class DataTableForeignKeyConverter already provides an implementation of the other two overridable methods.\r\n    public override object GetValueFromKey( object key, DataGridForeignKeyDescription description )\r\n    {\r\n      if( key == null )\r\n        return null;\r\n\r\n      var dataView = description.ItemsSource as DataView;\r\n      if( dataView != null )\r\n      {\r\n        dataView.Sort = description.ValuePath;\r\n\r\n        var index = dataView.Find( key );\r\n        var dataRow = dataView[ index ];\r\n\r\n        //Return a value built in this order, so sorting is done on last name, then first name.\r\n        return dataRow[ "LastName" ] + ", " + dataRow[ "FirstName" ];\r\n      }\r\n\r\n      return key;\r\n    }\r\n  } \n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-vbnet",children:'Public Class EmployeeForeignKeyConverter\r\n  Inherits DataTableForeignKeyConverter\r\n  \'Only the GetValueFormKey method overload with the DataGridForeignKeyDescription parameter needs to be overridden,\r\n  \'for the base class DataTableForeignKeyConverter already provides an implementation of the other two overridable methods.\r\n  Public Overrides Function GetValueFromKey(ByVal key As Object, ByVal description As DataGridForeignKeyDescription) As Object\r\n    If key Is Nothing Then\r\n      Return Nothing\r\n    End If\r\n\r\n    Dim dataView As DataView = TryCast(description.ItemsSource, DataView)\r\n    If dataView IsNot Nothing Then\r\n      dataView.Sort = description.ValuePath\r\n\r\n      Dim index As Integer = dataView.Find(key)\r\n      Dim dataRow As DataRowView = dataView(index)\r\n\r\n      \'Return a value built in this order, so sorting is done on last name, then first name.\r\n      Return dataRow("LastName") & ", " & dataRow("FirstName")\r\n    End If\r\n\r\n    Return key\r\n  End Function\r\nEnd Class\n'})})})]})]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(4164);const i={tabItem:"tabItem_Ymn6"};var o=r(4848);function a(e){let{children:n,hidden:r,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,a),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>j});var t=r(6540),i=r(4164),o=r(3104),a=r(6347),l=r(205),s=r(7485),c=r(1682),d=r(679);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function g(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.W6)(),o=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,s.aZ)(o),(0,t.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,o=h(e),[a,s]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,u]=p({queryString:r,groupId:i}),[m,y]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,d.Dv)(r);return[i,(0,t.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:i}),x=(()=>{const e=c??m;return g({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{x&&s(x)}),[x]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),y(e)}),[u,y,o]),tabValues:o}}var y=r(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function C(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:l}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,r=s.indexOf(n),i=l[r].value;i!==t&&(c(n),a(i))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>s.push(e),onKeyDown:u,onClick:d,...o,className:(0,i.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:o}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function b(e){const n=m(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,f.jsx)(C,{...n,...e}),(0,f.jsx)(v,{...n,...e})]})}function j(e){const n=(0,y.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);