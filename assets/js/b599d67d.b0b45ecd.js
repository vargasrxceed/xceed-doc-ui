"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[9721],{9219:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>u,metadata:()=>s,toc:()=>d});var t=n(4848),o=n(8453),i=n(1470),a=n(9365);const u={},l="Custom Group-configuration Selectors",s={id:"datagrid/manipulating-data/grouping-data/03",title:"Custom Group-configuration Selectors",description:"In addition to the built-in LevelGroupConfigurationSelector and FieldNameGroupConfigurationSelector group-configuration selectors, which can be used to select the appropriate configuration for a group based on its level or field name, custom group-configuration selectors can also be created and used.",source:"@site/docs/datagrid/manipulating-data/grouping-data/03.md",sourceDirName:"datagrid/manipulating-data/grouping-data",slug:"/datagrid/manipulating-data/grouping-data/03",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/03",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Group Configurations",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/grouping-data/02"},next:{title:"Sorting Data",permalink:"/xceed-doc-ui/docs/datagrid/manipulating-data/sorting"}},c={},d=[{value:"Examples",id:"examples",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"custom-group-configuration-selectors",children:"Custom Group-configuration Selectors"})}),"\n",(0,t.jsxs)(r.p,{children:["In addition to the built-in ",(0,t.jsx)(r.code,{children:"LevelGroupConfigurationSelector"})," and ",(0,t.jsx)(r.code,{children:"FieldNameGroupConfigurationSelector"})," group-configuration selectors, which can be used to select the appropriate configuration for a group based on its level or field name, custom group-configuration selectors can also be created and used."]}),"\n",(0,t.jsxs)(r.p,{children:["Custom group-configuration selectors (with or without corresponding selector items) can be created by deriving from the ",(0,t.jsx)(r.code,{children:"GroupConfigurationSelector"})," class and overriding the ",(0,t.jsx)(r.code,{children:"SelectGroupConfiguration"})," method to return the appropriate group configuration based on the desired criteria (see Example 1). If a selector does not have a group configuration that corresponds to the specified information it should either call the base implementation or return ",(0,t.jsx)(r.strong,{children:"null"})," (",(0,t.jsx)(r.strong,{children:"Nothing"})," in VisualBasic)."]}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,t.jsx)(r.p,{children:"Example 1: Creating a group-configuration selector"}),"\n",(0,t.jsx)(r.p,{children:"The following example demonstrates how to create a custom group-configuration selector that will return the appropriate group configuration depending on the number of items in a group. The implementation of the ItemCountGroupConfigurationSelector is provided below."}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(a.A,{value:"xml",label:"XAML",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n      <xcdg:DataGridCollectionViewSource.GroupDescriptions>             \r\n        <xcdg:DataGridGroupDescription PropertyName="ShipCity" />\r\n      </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}">\r\n    <xcdg:DataGridControl.GroupConfigurationSelector>\r\n      <local:ItemCountGroupConfigurationSelector MinItemCount="10" />\r\n    </xcdg:DataGridControl.GroupConfigurationSelector>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})}),(0,t.jsx)(a.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'DataGridCollectionView collectionView = new DataGridCollectionView( Orders );     \r\ncollectionView.GroupDescriptions.Add( new DataGridGroupDescription( "ShipCity" ) );\r\ndataGridControl.GroupConfigurationSelector = new ItemCountGroupConfigurationSelector( 10 );\r\ndataGridControl.ItemsSource = collectionView;\n'})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:'Dim collectionView As New DataGridCollectionView( Orders )\r\ncollectionView.GroupDescriptions.Add( New DataGridGroupDescription( "ShipCity" ) )\r\ndataGridControl.GroupConfigurationSelector = New ItemCountGroupConfigurationSelector( 10 )\r\ndataGridControl.ItemsSource = collectionView\n'})})})]}),"\n",(0,t.jsx)(r.p,{children:"The following code provides the implementation of the ItemCountGroupConfigurationSelector."}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(a.A,{value:"csharp",label:"C#",default:!0,children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:" public class ItemCountGroupConfigurationSelector : GroupConfigurationSelector\r\n{\r\n  public ItemCountGroupConfigurationSelector()\r\n  {\r\n  }\r\n  public ItemCountGroupConfigurationSelector( int minItemCount )\r\n  :base()\r\n  {\r\n    this.MinItemCount = minItemCount;\r\n  }\r\npublic override GroupConfiguration SelectGroupConfiguration( int groupLevel,\r\n                System.Windows.Data.CollectionViewGroup collectionViewGroup,\r\n                System.ComponentModel.GroupDescription groupDescription )\r\n{\r\n  if( collectionViewGroup == null )\r\n    return base.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription );\r\n  GroupConfiguration groupConfiguration = new GroupConfiguration();\r\n  Style style = new Style( typeof( Xceed.Wpf.DataGrid.DataRow ) );\r\n  if( collectionViewGroup.ItemCount <= m_minItemCount ) // red\r\n  {\r\n    style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) );      \r\n  }\r\n  else // green\r\n  {\r\n    style.Setters.Add( new Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) );      \r\n  }\r\n  groupConfiguration.ItemContainerStyle = style;\r\n  return groupConfiguration;\r\n}\r\n  private int m_minItemCount = 0;\r\n  public int MinItemCount\r\n  {\r\n    get\r\n    {\r\n      return m_minItemCount;\r\n    }\r\n    set\r\n    {\r\n      if( value != m_minItemCount )\r\n        m_minItemCount = value;\r\n    }\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.A,{value:"vbnet",label:"VB.NET",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-vbnet",children:"  Public Class ItemCountGroupConfigurationSelector\r\n         Inherits GroupConfigurationSelector\r\n    Public Sub New\r\n    End Sub\r\n    Public Sub New( minItemCount As Integer )\r\n      Me.MinItemCount = minItemCount\r\n    End Sub\r\n    Public Overrides Function SelectGroupConfiguration( ByVal groupLevel As Integer, _\r\n                    ByVal collectionViewGroup As System.Windows.Data.CollectionViewGroup, _\r\n                    ByVal groupDescription As System.ComponentModel.GroupDescription ) As GroupConfiguration\r\n      If collectionViewGroup Is Nothing Then\r\n        Return MyBase.SelectGroupConfiguration( groupLevel, collectionViewGroup, groupDescription )\r\n      End If\r\n      Dim groupConfiguration As New GroupConfiguration()\r\n      Dim style As New Style( GetType( Xceed.Wpf.DataGrid.DataRow ) )\r\n      If collectionViewGroup.ItemCount <= m_minItemCount Then ' red\r\n        style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.Red ) )\r\n      Else ' green\r\n        style.Setters.Add( New Setter( Xceed.Wpf.DataGrid.DataRow.BackgroundProperty, Brushes.LightGreen ) )\r\n      End If\r\n      groupConfiguration.ItemContainerStyle = style\r\n      Return groupConfiguration\r\n    End Function\r\n    Private m_minItemCount As Integer = 0\r\n    Public Property MinItemCount As Integer\r\n      Get\r\n        Return m_minItemCount\r\n      End Get\r\n      Set\r\n        m_minItemCount = value\r\n    End Property\r\n  End Class\n"})})})]})]})}function g(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>a});n(6540);var t=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:r,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,a),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>v});var t=n(6540),o=n(4164),i=n(3104),a=n(6347),u=n(205),l=n(7485),s=n(1682),c=n(679);function d(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return d(e).map((e=>{let{props:{value:r,label:n,attributes:t,default:o}}=e;return{value:r,label:n,attributes:t,default:o}}))}(n);return function(e){const r=(0,s.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function g(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:n}=e;const o=(0,a.W6)(),i=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(o.location.search);r.set(i,e),o.replace({...o.location,search:r.toString()})}),[i,o])]}function h(e){const{defaultValue:r,queryString:n=!1,groupId:o}=e,i=p(e),[a,l]=(0,t.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:i}))),[s,d]=m({queryString:n,groupId:o}),[h,f]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,i]=(0,c.Dv)(n);return[o,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),C=(()=>{const e=s??h;return g({value:e,tabValues:i})?e:null})();(0,u.A)((()=>{C&&l(C)}),[C]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var f=n(2303);const C={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function G(e){let{className:r,block:n,selectedValue:t,selectValue:a,tabValues:u}=e;const l=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const r=e.currentTarget,n=l.indexOf(r),o=u[n].value;o!==t&&(s(r),a(o))},d=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},r),children:u.map((e=>{let{value:r,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:e=>l.push(e),onKeyDown:d,onClick:c,...i,className:(0,o.A)("tabs__item",C.tabItem,i?.className,{"tabs__item--active":t===r}),children:n??r},r)}))})}function x(e){let{lazy:r,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function w(e){const r=h(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",C.tabList),children:[(0,b.jsx)(G,{...r,...e}),(0,b.jsx)(x,{...r,...e})]})}function v(e){const r=(0,f.A)();return(0,b.jsx)(w,{...e,children:d(e.children)},String(r))}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>u});var t=n(6540);const o={},i=t.createContext(o);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);