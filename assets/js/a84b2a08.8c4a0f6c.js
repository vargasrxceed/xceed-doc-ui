"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[9517],{4566:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>a,toc:()=>c});var o=t(4848),l=t(8453);const n={},i="Cell Error Styles",a={id:"datagrid/styles/01",title:"Cell Error Styles",description:"By default, when the value of a cell fails the validation process, its appearance will change to provide a visual cue that an error has occurred (see Figure 1). To redefine the appearance of a cell when its value is in error, the CellErrorStyle property can be set to a new style, which will be used when a validation error occurs. The error style can be provided at the grid, row, column, or cell levels by setting their respective CellErrorStyle properties (see Example 1).",source:"@site/docs/datagrid/styles/01.md",sourceDirName:"datagrid/styles",slug:"/datagrid/styles/01",permalink:"/xceed-doc-ui/docs/datagrid/styles/01",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Styles",permalink:"/xceed-doc-ui/docs/datagrid/styles/intro"},next:{title:"Templates",permalink:"/xceed-doc-ui/docs/datagrid/templates"}},s={},c=[{value:"Examples",id:"examples",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"cell-error-styles",children:"Cell Error Styles"})}),"\n",(0,o.jsxs)(r.p,{children:["By default, when the value of a cell fails the validation process, its appearance will change to provide a visual cue that an error has occurred (see Figure 1). To redefine the appearance of a cell when its value is in error, the ",(0,o.jsx)(r.code,{children:"CellErrorStyle"})," property can be set to a new style, which will be used when a validation error occurs. The error style can be provided at the grid, row, column, or cell levels by setting their respective ",(0,o.jsx)(r.code,{children:"CellErrorStyle"})," properties (see Example 1)."]}),"\n",(0,o.jsx)(r.p,{children:"When defining a style to use when a cell is in error, a key must be provided otherwise the style will be applied to all objects of the style's specified target type."}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"IsValidationErrorRestrictive"})," property indicates whether the validation error that failed prevents the focus from moving to another row until the error is fixed. Usually, all errors are restrictive; however validation errors reported through IDataErrorInfo are considered non-restrictive. By default, when a non-restrictive error occurs an orange-toned error style will be used."]}),"\n",(0,o.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(r.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Example 1: Providing a cell error style"})}),"\n",(0,o.jsx)(r.p,{children:"The following example demonstrates how to provide a new style that will change the foreground color of a cell when its value fails the validation process."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n      xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n  <Grid.Resources>\r\n     <xcdg:DataGridCollectionViewSource x:Key="cvs_composers"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                         Path=Composers}"/>\r\n     <Style x:Key="cell_error" TargetType="{x:Type xcdg:DataCell}">\r\n          <Setter Property="Foreground" Value="Red"/>\r\n       </Style>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl ItemsSource="{Binding Source={StaticResource cvs_composers}}"\r\n                                            CellErrorStyle="{StaticResource cell_error}">\r\n     <xcdg:DataGridControl.Columns>\r\n       <xcdg:Column FieldName="Period"\r\n                    CellEditor="{StaticResource periodEditor}">                                  \r\n          <xcdg:Column.CellValidationRules>\r\n             <local:PeriodVSCompositionCountCellValidationRule/>\r\n          </xcdg:Column.CellValidationRules>\r\n       </xcdg:Column>\r\n       <xcdg:Column FieldName="CompositionCount">\r\n          <xcdg:Column.CellValidationRules>\r\n             <local:PeriodVSCompositionCountCellValidationRule />\r\n          </xcdg:Column.CellValidationRules>\r\n       </xcdg:Column>\r\n     </xcdg:DataGridControl.Columns>\r\n  </xcdg:DataGridControl>\r\n</Grid>\n'})})]})}function u(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var o=t(6540);const l={},n=o.createContext(l);function i(e){const r=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),o.createElement(n.Provider,{value:r},e.children)}}}]);