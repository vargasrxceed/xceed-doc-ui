"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[5086],{9217:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var n=o(4848),a=o(8453);const i={},s="Object Model Overview",r={id:"object-model-view/overview",title:"Object Model Overview",description:"If you are new to Windows Presentation Foundation (WPF), it is necessary to understand a few basic concepts before using Xceed DataGrid for WPF, notably, the ItemsControl, ContentControl, and ContentPresenter classes.",source:"@site/datagrid/object-model-view/overview.md",sourceDirName:"object-model-view",slug:"/object-model-view/overview",permalink:"/xceed-doc-ui/datagrid/object-model-view/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Deploying",permalink:"/xceed-doc-ui/datagrid/getting-started/deploying"},next:{title:"DataGridControl Class",permalink:"/xceed-doc-ui/datagrid/object-model-view/datagrid-control-class/"}},d={},l=[{value:"Anatomy of the DataGridControl Class",id:"anatomy-of-the-datagridcontrol-class",level:2},{value:"A Closer Look at the Major Components",id:"a-closer-look-at-the-major-components",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"object-model-overview",children:"Object Model Overview"})}),"\n",(0,n.jsxs)(t.p,{children:["If you are new to Windows Presentation Foundation (WPF), it is necessary to understand a few basic concepts before using Xceed DataGrid for WPF, notably, the ",(0,n.jsx)(t.code,{children:"ItemsControl"}),", ",(0,n.jsx)(t.code,{children:"ContentControl"}),", and ",(0,n.jsx)(t.code,{children:"ContentPresenter"})," classes."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"ItemsControl"})," class (e.g., ",(0,n.jsx)(t.code,{children:"DataGridControl"}),") represents a control that is used to display a collection of items. The ",(0,n.jsx)(t.code,{children:"ItemsPanel"}),", which is a template that can be replaced or modified to rearrange the disposition of the items within the ",(0,n.jsx)(t.code,{children:"ItemsControl"}),", defines the layout of the items contained in an ",(0,n.jsx)(t.code,{children:"ItemsControl"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"ContentControl"})," class (e.g., Cell) represents a control which contains a single piece of content that is accessible through the Content property. The ContentPresenter determines how and where the content of the ",(0,n.jsx)(t.code,{children:"ContentControl"})," is displayed in the visual tree."]}),"\n",(0,n.jsx)(t.h2,{id:"anatomy-of-the-datagridcontrol-class",children:"Anatomy of the DataGridControl Class"}),"\n",(0,n.jsxs)(t.p,{children:["At the root of Xceed DataGrid for WPF lies the ",(0,n.jsx)(t.code,{children:"DataGridControl"})," class, which derives from ItemsControl and is used to display a collection of data items. A ",(0,n.jsx)(t.code,{children:"DataRow"})," is the UI representation of a data item and will contain a DataCell for each property in the data item. ",(0,n.jsx)(t.code,{children:"DataRow"})," and ",(0,n.jsx)(t.code,{children:"DataCell"})," objects have a limited lifespan and will only exist while the data item is visible in a grid's viewport (virtualization)."]}),"\n",(0,n.jsxs)(t.p,{children:["DataCells, which display the value of the corresponding property in the data item, are ",(0,n.jsx)(t.code,{children:"ContentControls"}),". How and where the cell's content is displayed is determined by the ContentPresenter that is defined by the cell's ",(0,n.jsx)(t.code,{children:"ControlTemplate"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"a-closer-look-at-the-major-components",children:"A Closer Look at the Major Components"}),"\n",(0,n.jsxs)(t.p,{children:["A grid is nothing without its components; these include rows, cells, columns, and their derivatives. ",(0,n.jsx)(t.code,{children:"DataRow"})," objects provide the UI representation of the data items displayed in a grid's viewport and contain a cell for each property in the data item that is currently visible in the DataGrid's viewport. As previously mentioned, ",(0,n.jsx)(t.code,{children:"DataRow"})," and ",(0,n.jsx)(t.code,{children:"DataCell"})," objects  have a limited lifespan and exist only while they are visible in a grid's viewport; this is called virtualization and is the reason that the ",(0,n.jsx)(t.code,{children:"Items"}),", ",(0,n.jsx)(t.code,{children:"SelectedItem"}),", ",(0,n.jsx)(t.code,{children:"SelectedItems"}),", and ",(0,n.jsx)(t.code,{children:"CurrentItem"})," properties of the DataGridControl class access data items and not data rows."]}),"\n",(0,n.jsxs)(t.p,{children:["The appearance of the data items is determined by the style or template that is applied to the resulting DataRow objects. DataRow styles can be provided implicitly or they can be assigned to the ItemContainerStyle property of the ",(0,n.jsx)(t.code,{children:"DataGridControl"}),", ",(0,n.jsx)(t.code,{children:"DetailConfiguration"}),", or ",(0,n.jsx)(t.code,{children:"GroupConfiguration"})," classes. DataRow templates can be provided by creating an implicit ControlTemplate or by assigning the template to the ItemTemplate property defined on the ",(0,n.jsx)(t.code,{children:"DataGridControl"})," class (see ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/templates",children:"Templates"})," and ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/styles",children:"Styles"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:["Each DataRow that is created will contain a cell for each property in the data item that is currently visible in the DataGrid's viewport. Each cell is a separate ContentControl in which the value of the corresponding property in the data item is displayed. The cells contained in a ",(0,n.jsx)(t.code,{children:"DataRow"})," can be accessed through the row's Cells collection."]}),"\n",(0,n.jsxs)(t.p,{children:["Like DataRows, the appearance and behavior of cells can be modified by creating a style for the ",(0,n.jsx)(t.code,{children:"DataCell"})," class, or by providing a new ControlTemplate or Style for a specific Cell type (see ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/templates",children:"Templates"})," and ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/styles",children:"Styles"}),"). Remember that a style must target a specific type, for example, ",(0,n.jsx)(t.code,{children:"DataCell"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"Columns"})," define information on how the cells they contain are displayed and their content edited. In addition to the properties provided by each cell, a column's ",(0,n.jsx)(t.code,{children:"CellContentTemplate"})," property can be used to provide a new template that will be used by all the cells it contains to display their data. The list of all columns contained in a grid can be accessed through the ",(0,n.jsx)(t.code,{children:"Columns"})," collection of the ",(0,n.jsx)(t.code,{children:"DataGridControl"})," class."]}),"\n",(0,n.jsxs)(t.p,{children:["Each column has a title which is is displayed in its corresponding cell in any ",(0,n.jsx)(t.code,{children:"ColumnManagerRow"})," objects found in a grid. By default, this title corresponds to the FieldName property; however, any value can be provided by setting the Title property."]}),"\n",(0,n.jsxs)(t.p,{children:['Merged column headers allow you to organize columns vertically under headers that span multiple columns; for example, company name, company address, and company ID columns could be placed together under a "',(0,n.jsx)(t.em,{children:"Company"}),'" title, helping to better present the data in the datagrid.']})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>r});var n=o(6540);const a={},i=n.createContext(a);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);