"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7773],{4913:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>l});var n=i(4848),a=i(8453);const d={title:"Editing and Validating Data"},r="Editing and Validating Data Overview",o={id:"fundamentals/editing-validating/overview",title:"Editing and Validating Data",description:"The content of each cell in a grid\u2014assuming that they are not read-only\u2014can be edited programmatically or at runtime by the end user.",source:"@site/datagrid/fundamentals/editing-validating/overview.md",sourceDirName:"fundamentals/editing-validating",slug:"/fundamentals/editing-validating/overview",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Editing and Validating Data"},sidebar:"sidebardatagrid",previous:{title:"Custom Detail Descriptions",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/custom-detail-description"},next:{title:"DataGridCollectionView Edit Events",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/datagridcollection-edit-event"}},s={},l=[{value:"Validation",id:"validation",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"editing-and-validating-data-overview",children:"Editing and Validating Data Overview"})}),"\n",(0,n.jsx)(t.p,{children:"The content of each cell in a grid\u2014assuming that they are not read-only\u2014can be edited programmatically or at runtime by the end user."}),"\n",(0,n.jsxs)(t.p,{children:["How a grid enters edit mode at runtime, is determined by the ",(0,n.jsx)(t.code,{children:"EditTriggers"})," property. By default, the ",(0,n.jsx)(t.code,{children:"EditTriggers"})," property is set to ",(0,n.jsx)(t.code,{children:"EditCommand"}),", ",(0,n.jsx)(t.code,{children:"ClickOnCurrentCell"}),", and ",(0,n.jsx)(t.code,{children:"ActivationGesture"})," meaning that a grid will enter edit mode when the edit command is sent (by default, F2), when the current cell is clicked, or when a key or text input matches one of the activation gestures for current cell's editor (see Example 1). Programmatically, the content of a cell can be edited when the parent row's BeginEdit method is called."]}),"\n",(0,n.jsxs)(t.p,{children:["At runtime, modifications made to the content of a cell can be committed when the focus leaves the row, or discarded when the ",(0,n.jsx)(t.strong,{children:"Escape"})," key is pressed. Programmatically, modifications are committed when the parent row's EndEdit method is called, and discarded when the CancelEdit method is called. In either case, in order for the modifications to be committed, they must pass the validation process (see ",(0,n.jsx)(t.a,{href:"/datagrid/fundamentals/editing-validating/validation",children:"Validating Data"}),")."]}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["If a grid is bound to a DataSet, only the in-memory data will be updated when modifications are committed. For information on how to update a DataSet's underlying data source, refer to the ",(0,n.jsx)(t.a,{href:"http://msdn2.microsoft.com/en-us/library/system.data.dataset(VS.80).aspx",children:"DataSet Class"})," topic in the Microsoft Windows SDK."]})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Cell"})," and ",(0,n.jsx)(t.code,{children:"Row"})," classes expose routed events (see Table 1 in Routed Edit Events) that are triggered during various stages of the edit process and that can be handled by any parent element in the visual tree (bubbling). These events are raised when the ",(0,n.jsx)(t.code,{children:"BeginEdit"}),", ",(0,n.jsx)(t.code,{children:"EndEdit"}),", or ",(0,n.jsx)(t.code,{children:"CancelEdit"})," methods are called, both programmatically and through UI interactions (e.g., pressing ESC key), to provide notifications when a process is about to begin and when it has ended."]}),"\n",(0,n.jsxs)(t.p,{children:["Editing through the DataGridCollectionView\r\nUnlike the previously mentioned ",(0,n.jsx)(t.code,{children:"BeginEdit"}),", ",(0,n.jsx)(t.code,{children:"EndEdit"}),", and ",(0,n.jsx)(t.code,{children:"CancelEdit"})," methods, which allow items to be edited the grid, the ",(0,n.jsx)(t.code,{children:"EditItem"}),", ",(0,n.jsx)(t.code,{children:"CommitEdit"}),", and ",(0,n.jsx)(t.code,{children:"CancelEdit"})," methods exposed by the DataGridCollectionView class allow items in the underlying data source to be edited directly."]}),"\n",(0,n.jsx)(t.p,{children:"These methods also raise events that allow the edit process to be handled manually."}),"\n",(0,n.jsx)(t.h2,{id:"validation",children:"Validation"}),"\n",(0,n.jsx)(t.p,{children:"Xceed DataGrid for WPF offers data validation support at various levels, including cells, row, and business-objects. How and when data is validated is determined by binding- and UI-level validation rules, which are queried when a cell or row is about to end its edit process, when a cell's content is changed, or when data is loaded into a grid."}),"\n",(0,n.jsxs)(t.p,{children:["When the value of a cell fails the validation process, its ",(0,n.jsx)(t.code,{children:"HasValidationError"})," property will return true and its ",(0,n.jsx)(t.code,{children:"ValidationError"})," property will contain a ",(0,n.jsx)(t.code,{children:"CellValidationError"}),", which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed.  If the validation rule that failed is a binding-level ",(0,n.jsx)(t.code,{children:"ValidationRule"}),", it will be wrapped in a ",(0,n.jsx)(t.code,{children:"PassthroughCellValidationRule.Validation"})," errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its ",(0,n.jsx)(t.code,{children:"HasValidationError"})," property will return true and its ValidationError property will contain a ",(0,n.jsx)(t.code,{children:"RowValidationError"}),", which provides information on the row in error, the error content, the exception, and the validation rule that failed."]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsx)(t.p,{children:"Example 1: Entering edit when a cell is current"}),"\n",(0,n.jsx)(t.p,{children:"The following example demonstrates how to enter edit mode only when a cell becomes current by setting the EditTriggers property to CellIsCurrent."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                    Source="{Binding Source={x:Static Application.Current},\r\n                                     Path=Orders}"/>\r\n  </Grid.Resources>\r\n  <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                        ItemsSource="{Binding Source={StaticResource cvs_orders}}"\r\n                        EditTriggers="CellIsCurrent"/>      \r\n</Grid>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(6540);const a={},d=n.createContext(a);function r(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);