"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[8406],{5709:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=r(4848),a=r(8453);const o={},l="Templates",i={id:"datagrid/templates",title:"Templates",description:"Windows Presentation Foundation (WPF) introduced a new way to think of controls and data items the ControlTemplate, which defines the default appearance and behavior of a control; the DataTemplate, which defines how content in a ContentControl and/or data items in an ItemsControl are displayed; and the ItemsPanelTemplate, which identifies the type of panel used to display items in an ItemsControl.",source:"@site/docs/datagrid/templates.md",sourceDirName:"datagrid",slug:"/datagrid/templates",permalink:"/xceed-doc-ui/docs/datagrid/templates",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cell Error Styles",permalink:"/xceed-doc-ui/docs/datagrid/styles/01"},next:{title:"Commands",permalink:"/xceed-doc-ui/docs/datagrid/commands"}},s={},d=[{value:"Using Templates",id:"using-templates",level:2},{value:"Template Parts",id:"template-parts",level:2},{value:"Fixed Columns vs. Templates",id:"fixed-columns-vs-templates",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"templates",children:"Templates"})}),"\n",(0,n.jsxs)(t.p,{children:["Windows Presentation Foundation (WPF) introduced a new way to think of controls and data items: they no longer have a predefined layout, behavior, or appearance; instead, these characteristics are determined by a template (see also ",(0,n.jsx)(t.a,{href:"/docs/datagrid/styles/intro",children:"Styles"}),"). WPF defines 3 major types of templates: the ",(0,n.jsx)(t.strong,{children:"ControlTemplate"}),", which defines the default appearance and behavior of a control; the DataTemplate, which defines how content in a ",(0,n.jsx)(t.strong,{children:"ContentControl"})," and/or data items in an ",(0,n.jsx)(t.strong,{children:"ItemsControl"})," are displayed; and the ",(0,n.jsx)(t.strong,{children:"ItemsPanelTemplate"}),", which identifies the type of panel used to display items in an ",(0,n.jsx)(t.strong,{children:"ItemsControl"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"using-templates",children:"Using Templates"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"ControlTemplates"})," define the default appearance of controls, including any triggers that may change their appearance or behavior and are provided through a control's Template property, either through a style or by explicitly setting the ",(0,n.jsx)(t.code,{children:"Template"})," property (see examples). For example, a button looks like a button because that is the appearance its default template defines; however, it is possible to change the appearance of the control by providing a new template. The type of control for which a ",(0,n.jsx)(t.strong,{children:"ControlTemplate"})," is designed is determined by the template's TargetType property. In the case where the ControlTemplate is created for a ",(0,n.jsx)(t.strong,{children:"ContentControl"}),", a ",(0,n.jsx)(t.strong,{children:"ContentPresenter"})," must be provided to represent the location within the layout of the ",(0,n.jsx)(t.strong,{children:"ControlTemplate"})," where the control's data is displayed (see Examples 2 and 3)."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"DataTemplates"})," are the most commonly used form of template and define the appearance of the data items displayed in an ItemsControl or the content of a ",(0,n.jsx)(t.strong,{children:"ContentControl"}),". ",(0,n.jsx)(t.strong,{children:"DataTemplates"})," can be specified through the ",(0,n.jsx)(t.code,{children:"ItemsControl.ItemTemplate"}),", ",(0,n.jsx)(t.code,{children:"ContentPresenter.ContentTemplate"}),", or ",(0,n.jsx)(t.code,{children:"ContentControl.ContentTemplate"})," properties, or as a resource (see Example 1). The ",(0,n.jsx)(t.strong,{children:"DataTemplate"}),"'s ",(0,n.jsx)(t.code,{children:"DataType"})," property is used to locate resources that match the data type of a Content property."]}),"\n",(0,n.jsx)(t.h2,{id:"template-parts",children:"Template Parts"}),"\n",(0,n.jsxs)(t.p,{children:["As explained in the previous section, the default appearance of a control, including any triggers that may change its appearance or behavior, is defined by a ",(0,n.jsx)(t.strong,{children:"ControlTemplate"}),", which is composed of various elements that represent different parts of a control, some of which are required in order to handle specific control behavior. The absence of these template parts will result in controls not behaving as expected."]}),"\n",(0,n.jsxs)(t.p,{children:["Required template parts are defined per class. To identify an element as a template part, its name must be set to the name of the template part (see Table 2) that it represents through the x",":Name"," attribute."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Table 2:"})," Template part names"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Template part name"}),(0,n.jsx)(t.th,{children:"Class"}),(0,n.jsx)(t.th,{children:"Utilization"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_AdornerDecoratorForDragAndDrop"}),(0,n.jsx)(t.td,{children:"DataGridControl class"}),(0,n.jsx)(t.td,{children:"When providing a new DataGridControl template, a AdornerDecorator named PART_AdornerDecoratorForDragAndDrop must be contained in the ControlTemplate as the ItemsPresenter and/or ScrollViewer's parent. This adorner will take into consideration any RenderTransform applied to a grid."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_ScrollViewer"}),(0,n.jsx)(t.td,{children:"DataGridControl class"}),(0,n.jsx)(t.td,{children:"When providing a new DataGridControl template, a ScrollViewer named PART_ScrollViewer should be contained in the ControlTemplate. The rows contained in a grid are contained in the ItemsPanel, which is contained in the viewer."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_CellsHost"}),(0,n.jsx)(t.td,{children:"Row class"}),(0,n.jsx)(t.td,{children:"When providing a new Row template (or a template for any class derived from Row), a Panel named PART_CellsHost should be contained in the ControlTemplate. The cells contained in the row that have not been explicitly positioned, will be contained in this panel."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_RowFocusRoot"}),(0,n.jsx)(t.td,{children:"Row class"}),(0,n.jsx)(t.td,{children:"When providing a new Row template (or a template for any class derived from Row), a FrameworkElement named PART_RowFocusRoot should be contained in the ControlTemplate to indicate the focus root of the row."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_ColumnResizerThumb"}),(0,n.jsx)(t.td,{children:"ColumnManagerCell class"}),(0,n.jsx)(t.td,{children:"When providing a new ColumnManagerCell template, a Thumb named PART_ColumnResizerThumb should be contained in the ControlTemplate to allow columns to be resized."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_RowResizerThumb"}),(0,n.jsx)(t.td,{children:"RowSelector class"}),(0,n.jsx)(t.td,{children:"When providing a new RowSelector template, a Thumb named PART_RowResizerThumb should be contained in the ControlTemplate to allow rows to be resized."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_GroupLevelIndicatorsHost"}),(0,n.jsx)(t.td,{children:"GroupLevelIndicatorPane class"}),(0,n.jsx)(t.td,{children:"When providing a new GroupLevelIndicatorPane template, a Panel named PART_GroupLevelIndicatorsHost, which will contain the GroupLevelIndicator objects, should be contained in the ControlTemplate."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PART_HierarchicalGroupByControlTreeView"}),(0,n.jsx)(t.td,{children:"HierarchicalGroupByControl Class"}),(0,n.jsx)(t.td,{children:"When providing a new HierarchicalGroupByControl template, a TreeView named PART_HierarchicalGroupByControlTreeView should be contained in the ControlTemplate."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"fixed-columns-vs-templates",children:"Fixed Columns vs. Templates"}),"\n",(0,n.jsx)(t.p,{children:"In order to support fixed columns when creating a new row template for a table-view layout, the following criteria must be met:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"The PART_CellsHost template part must be a FixedCellPanel."}),"\n",(0,n.jsx)(t.li,{children:"The FixedCellCount property of the FixedCellPanel must be bound to the table view's FixedColumnCount property using a TwoWay ViewBinding."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The fixed-cell-panel properties listed below are also usually bound when provided a new row template for a table-view layout:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["FixedColumnDropMarkPen (xcdg",":ViewBinding"," FixedColumnDropMarkPen)"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["If a new template is provided for a ",(0,n.jsx)(t.strong,{children:"DataGridControl"})," and fixed columns are to be supported, it is essential that a ",(0,n.jsx)(t.code,{children:"TableViewScrollViewer"})," be used. This scroll viewer is responsible for preserving the ",(0,n.jsx)(t.code,{children:"TranslateTransforms"})," that fix and scroll elements, as well as executing the PageLeft and PageRight actions according to the reduced viewport.  It is also recommended that an ",(0,n.jsx)(t.code,{children:"AdornerDecorator"})," be located above the ",(0,n.jsx)(t.code,{children:"TableViewScrollViewer"})," of the templated ",(0,n.jsx)(t.strong,{children:"DataGridControl"})," to support drag and dropping of the fixed-column splitter correctly."]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Orders table of the Northwind database, unless stated otherwise."}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 1: Providing a cell-content template"}),(0,n.jsx)(t.p,{children:'The following example demonstrates how to provide a new CellContentTemplate, using property element syntax, for a boolean column that displays a check mark when the cell\'s value is true, and an "x" when it is false.'}),(0,n.jsx)(t.p,{children:"This example assumes that the grid is bound to the Products table of the Northwind database."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_products"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Products}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="ProductsGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_products}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="Discontinued">\r\n            <xcdg:Column.CellContentTemplate>\r\n                <DataTemplate>\r\n                  <Image x:Name="img" Source="D:\\true.png" Stretch="None" />\r\n                      <DataTemplate.Triggers>\r\n                        <DataTrigger Binding="{Binding}" Value="False">\r\n                          <Setter TargetName="img" Property="Source" Value="D:\\false.png" />\r\n                        </DataTrigger>\r\n                      </DataTemplate.Triggers>\r\n                </DataTemplate>\r\n            </xcdg:Column.CellContentTemplate>\r\n          </xcdg:Column>\r\n        </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 2: Providing a group header-control template"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to provide, through a style, a new GroupHeaderControl template."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <Style TargetType="{x:Type xcdg:GroupHeaderControl}">\r\n        <Setter Property="Template">\r\n          <Setter.Value>\r\n            <ControlTemplate TargetType="{x:Type xcdg:GroupHeaderControl}">\r\n              <Border Background="Orange" BorderThickness="2">\r\n                <StackPanel Orientation="Horizontal">\r\n                  <CheckBox IsChecked="{Binding RelativeSource={RelativeSource\r\n                                        TemplatedParent}, Path=Group.IsExpanded}"/>\r\n                  <ContentPresenter/>\r\n                </StackPanel>\r\n              </Border>\r\n            </ControlTemplate>\r\n          </Setter.Value>\r\n        </Setter>\r\n      </Style>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}">\r\n        <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n          <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n        </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n      </xcdg:DataGridCollectionViewSource>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 3: Providing a data-cell template"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to provide, through a style, a new ControlTemplate for the DataCells that will display the cells as buttons."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">\r\n    <Grid.Resources>\r\n      <Style TargetType="{x:Type xcdg:DataCell}">\r\n        <Setter Property="Template">\r\n          <Setter.Value>\r\n            <ControlTemplate TargetType="{x:Type xcdg:DataCell}">\r\n              <Button>\r\n                <Button.Content>\r\n                  <ContentPresenter/>\r\n                </Button.Content>\r\n              </Button>\r\n            </ControlTemplate>\r\n          </Setter.Value>\r\n        </Setter>\r\n      </Style>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=Orders}"/>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n  </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 4: Providing a data-row template"}),(0,n.jsx)(t.p,{children:"The following example demonstrates how to provide, through a style, a new ControlTemplate for DataRow objects. The columns that are contained in the grid will be limited to those specified in the ItemProperties of the DataGridCollectionViewSource."}),(0,n.jsx)(t.p,{children:"This example assumes that the grid is bound to the Employees table of the Northwind database."}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'  <Grid>\r\n    <Grid.Resources>\r\n      <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=Employees}"\r\n                                          AutoCreateItemProperties="False">\r\n        <xcdg:DataGridCollectionViewSource.ItemProperties>\r\n          <xcdg:DataGridItemProperty Name="LastName"/>\r\n          <xcdg:DataGridItemProperty Name="FirstName"/>\r\n          <xcdg:DataGridItemProperty Name="Photo"/>\r\n          <xcdg:DataGridItemProperty Name="Title"/>\r\n          <xcdg:DataGridItemProperty Name="Notes"/>\r\n          <xcdg:DataGridItemProperty Name="EmployeeID"/>\r\n          <xcdg:DataGridItemProperty Name="TitleOfCourtesy"/>\r\n          <xcdg:DataGridItemProperty Name="HireDate"/>\r\n          <xcdg:DataGridItemProperty Name="Extension"/>\r\n        </xcdg:DataGridCollectionViewSource.ItemProperties>\r\n      </xcdg:DataGridCollectionViewSource>\r\n      <ControlTemplate x:Key="titleLessCell"\r\n                        TargetType="xcdg:DataCell">\r\n        <ContentPresenter Content="{xcdg:CellContentBinding}"\r\n                          ContentTemplate="{TemplateBinding ContentTemplate}"\r\n                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>\r\n      </ControlTemplate>\r\n      <Style x:Key="customCardViewDataRow"\r\n              TargetType="{x:Type xcdg:DataRow}">\r\n        <Setter Property="Background"\r\n                Value="Transparent"/>\r\n        <Setter Property="Template">\r\n          <Setter.Value>\r\n            <ControlTemplate TargetType="{x:Type xcdg:DataRow}">\r\n              <Border x:Name="PART_RowFocusRoot"\r\n                      Background="{TemplateBinding Background}"\r\n                      BorderBrush="{TemplateBinding BorderBrush}"\r\n                      BorderThickness="{TemplateBinding BorderThickness}"\r\n                      Padding="{TemplateBinding Padding}">\r\n                <Grid>\r\n                  <StackPanel>\r\n                    <DockPanel>\r\n                      \x3c!-- The photo is at the left. --\x3e\r\n                      <Grid DockPanel.Dock="Left"\r\n                            Margin="3,4,2,2"\r\n                            MaxWidth="85"\r\n                            MaxHeight="85">\r\n                        <xcdg:DataCell FieldName="Photo"\r\n                                        Template="{StaticResource titleLessCell}"/>\r\n                      </Grid>\r\n                      <StackPanel Margin="8,0,0,0">\r\n                        <StackPanel Orientation="Horizontal">\r\n                          <xcdg:DataCell FieldName="TitleOfCourtesy"\r\n                                          FontSize="16"\r\n                                          Template="{StaticResource titleLessCell}"/>\r\n                          <TextBlock Text=" "/>\r\n                          <xcdg:DataCell FieldName="FirstName"\r\n                                          FontSize="16"\r\n                                          Template="{StaticResource titleLessCell}"/>\r\n                          <TextBlock Text=" "/>\r\n                          <xcdg:DataCell FieldName="LastName"\r\n                                          FontSize="16"\r\n                                          Template="{StaticResource titleLessCell}"/>\r\n                        </StackPanel>\r\n                          <xcdg:DataCell FieldName="Title"\r\n                                        FontSize="14"\r\n                                        Template="{StaticResource titleLessCell}"/>\r\n                          <Border BorderThickness="1"\r\n                                  BorderBrush="#999999"\r\n                                  Margin="0,2,0,2"/>\r\n                            <StackPanel x:Name="PART_CellsHost"\r\n                                        Orientation="Vertical"\r\n                                        Grid.IsSharedSizeScope="True"/>\r\n                      </StackPanel>\r\n                    </DockPanel>\r\n                    <Expander Header="Notes"\r\n                              Padding="5"\r\n                              TextElement.Foreground="{TemplateBinding Foreground}">\r\n                      <xcdg:DataCell FieldName="Notes"\r\n                                      Template="{StaticResource titleLessCell}"/>\r\n                    </Expander>\r\n                  </StackPanel>\r\n                </Grid>\r\n              </Border>\r\n            </ControlTemplate>\r\n          </Setter.Value>\r\n        </Setter>\r\n        <Setter Property="FocusVisualStyle"\r\n                Value="{x:Null}"/>\r\n      </Style>\r\n    </Grid.Resources>\r\n    <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                          ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                          ItemContainerStyle="{StaticResource customCardViewDataRow}"\r\n                          View="CardView">\r\n      <xcdg:DataGridControl.Columns>\r\n        <xcdg:Column FieldName="Notes"\r\n                      TextWrapping="Wrap"/>\r\n      </xcdg:DataGridControl.Columns>\r\n    </xcdg:DataGridControl>\r\n  </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 5: Formatting a cell's content"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to format a cell's content to display a numeric value as a currency value. Although it might be tempting to apply the converter to a column's ",(0,n.jsx)(t.code,{children:"DisplayMemberBindingInfo"}),", this is not the recommended location as not only will the cells' content be formatted but the data type of the cells' content will be changed to the converter's."]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'    <Grid xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"\r\n          xmlns:local="clr-namespace:Xceed.Wpf.Documentation">\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orderdetails"\r\n                                        Source="{Binding Source={x:Static Application.Current},\r\n                                                          Path=OrderDetails}"/>          \r\n              \r\n        <xcdg:CurrencyConverter x:Key="currencyConverter"/>\r\n        <DataTemplate x:Key="currency_celltemplate">\r\n          <TextBlock Text="{Binding Converter={StaticResource currencyConverter}}"/>\r\n        </DataTemplate>\r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="OrderDetailGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orderdetails}}">\r\n        <xcdg:DataGridControl.Columns>\r\n          <xcdg:Column FieldName="UnitPrice"\r\n                      CellContentTemplate="{StaticResource currency_celltemplate}"/>\r\n        </xcdg:DataGridControl.Columns>\r\n      </xcdg:DataGridControl>\r\n    </Grid>\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Example 6: Changing the group-header text"}),(0,n.jsxs)(t.p,{children:["The following example demonstrates how to change the information displayed in each ",(0,n.jsx)(t.code,{children:"GroupHeaderControl"})," by creating an implicit ",(0,n.jsx)(t.strong,{children:"DataTemplate"})," targeting the Group data type."]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'    <Grid>\r\n      <Grid.Resources>\r\n        <xcdg:DataGridCollectionViewSource x:Key="cvs_orders"\r\n                                          Source="{Binding Source={x:Static Application.Current},\r\n                                                            Path=Orders}">\r\n          <xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n            <xcdg:DataGridGroupDescription PropertyName="ShipCountry"/>\r\n          </xcdg:DataGridCollectionViewSource.GroupDescriptions>\r\n        </xcdg:DataGridCollectionViewSource>\r\n        <DataTemplate DataType="{x:Type xcdg:Group}">\r\n          <StackPanel Orientation="Horizontal">\r\n            <TextBlock Text="The "/>\r\n            <TextBlock Text="{Binding Value}"/>\r\n            <TextBlock Text=" group contains "/>\r\n            <TextBlock Text="{Binding Items.Count}"/>\r\n            <TextBlock Text=" items."/>\r\n          </StackPanel>\r\n        </DataTemplate>\r\n      </Grid.Resources>\r\n      <xcdg:DataGridControl x:Name="OrdersGrid"\r\n                            ItemsSource="{Binding Source={StaticResource cvs_orders}}"/>\r\n    </Grid>\n'})})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>i});var n=r(6540);const a={},o=n.createContext(a);function l(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);