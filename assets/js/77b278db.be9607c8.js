"use strict";(self.webpackChunkxceed_doc_ui=self.webpackChunkxceed_doc_ui||[]).push([[7738],{2150:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=r(4848),i=r(8453),a=r(1470),o=r(9365);const s={},l="Custom Detail Descriptions",c={id:"fundamentals/providing-inserting-remove/master-detail/custom-detail-description",title:"Custom Detail Descriptions",description:"The DataGridDetailDescription class provides information about a detail relation whose content will be displayed as the details of the data items in a grid or another detail. By default, detail descriptions are automatically created for:",source:"@site/datagrid/fundamentals/providing-inserting-remove/master-detail/custom-detail-description.md",sourceDirName:"fundamentals/providing-inserting-remove/master-detail",slug:"/fundamentals/providing-inserting-remove/master-detail/custom-detail-description",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/custom-detail-description",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebardatagrid",previous:{title:"Detail Descriptions",permalink:"/xceed-doc-ui/datagrid/fundamentals/providing-inserting-remove/master-detail/detail-description"},next:{title:"Editing and Validating Data",permalink:"/xceed-doc-ui/datagrid/fundamentals/editing-validating/overview"}},d={},u=[{value:"Creating a Detail Description",id:"creating-a-detail-description",level:2},{value:"Examples",id:"examples",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"custom-detail-descriptions",children:"Custom Detail Descriptions"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"DataGridDetailDescription"})," class provides information about a detail relation whose content will be displayed as the details of the data items in a grid or another detail. By default, detail descriptions are automatically created for:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["every ",(0,n.jsx)(t.code,{children:"DataRelation"})," in a ",(0,n.jsx)(t.code,{children:"DataTable"})," (",(0,n.jsx)(t.code,{children:"DataRelationDetailDescription"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["data items that implement the ",(0,n.jsx)(t.code,{children:"IEnumerable"})," interface (",(0,n.jsx)(t.code,{children:"EnumerableDetailDescription"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["data items that implement the ",(0,n.jsx)(t.code,{children:"IListSource"})," interface (",(0,n.jsx)(t.code,{children:"ListSourceDetailDescription"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["every ",(0,n.jsx)(t.code,{children:"EntityCollection<TEntity>"})," exposed by a data item (",(0,n.jsx)(t.code,{children:"EntityDetailDescription"}),")"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Detail descriptions can also be explicitly defined by adding them to DetailDescriptions collection of their parent ",(0,n.jsx)(t.code,{children:"DataGridCollectionView"}),",  ",(0,n.jsx)(t.code,{children:"DataGridCollectionViewSource"}),", or detail description."]}),"\n",(0,n.jsx)(t.p,{children:"Although the most common types of detail relations are automatically detected, it is also possible to create and use custom detail descriptions that will return detail items for a parent item, whatever the definition of the detail relation is."}),"\n",(0,n.jsx)(t.h2,{id:"creating-a-detail-description",children:"Creating a Detail Description"}),"\n",(0,n.jsxs)(t.p,{children:["Custom detail descriptions can be created by deriving from the DataGridDetailDescription class and overriding the ",(0,n.jsx)(t.code,{children:"GetDetailsForParentItem"})," method to return the appropriate detail items, as an IEnumerable, for the received parent item (see Example 1). In the case where there are no detail items for a parent item, an empty IEnumerable or ",(0,n.jsx)(t.strong,{children:"null"})," (",(0,n.jsx)(t.strong,{children:"Nothing"})," in Visual Basic) must be returned."]}),"\n",(0,n.jsxs)(t.p,{children:["If a detail description requires information that cannot be provided through XAML, such as a ",(0,n.jsx)(t.code,{children:"PropertyDescriptor"}),", the Initialize method can be overridden and the information provided."]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.p,{children:"All examples in this topic assume that the grid is bound to the Employees table of a LINQ  data context, unless stated otherwise."}),"\n",(0,n.jsx)(t.p,{children:"Example 1: Creating a custom detail description"}),"\n",(0,n.jsxs)(t.p,{children:["The following example demonstrates how to create and use a custom detail description that handles LINQ detail relations, which are provided by properties to which the ",(0,n.jsx)(t.strong,{children:"AssociationAttribute"})," is applied."]}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsx)(o.A,{value:"xaml",label:"XAML",default:!0,children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Grid>\r\n  <Grid.Resources>\r\n    <xcdg:DataGridCollectionViewSource x:Key="cvs_employees"\r\n                                      Source="{Binding Source={x:Static Application.Current},\r\n                                                        Path=LinqDataContext.Employees}">\r\n      <xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n          <local:LinqToSqlDetailDescription RelationName="Employee_Employees"\r\n                                            Title="Employees" />\r\n          <local:LinqToSqlDetailDescription RelationName="Employee_Customer"\r\n                                            Title="Customers">\r\n            <local:LinqToSqlDetailDescription.DetailDescriptions>\r\n                <local:LinqToSqlDetailDescription RelationName="Customer_Order"\r\n                                                  Title="Orders">\r\n                  <local:LinqToSqlDetailDescription.DetailDescriptions>\r\n                      <local:LinqToSqlDetailDescription RelationName="Order_Order_Detail"\r\n                                                        Title="Order Details" />\r\n                  </local:LinqToSqlDetailDescription.DetailDescriptions>\r\n                </local:LinqToSqlDetailDescription>\r\n            </local:LinqToSqlDetailDescription.DetailDescriptions>\r\n          </local:LinqToSqlDetailDescription>\r\n      </xcdg:DataGridCollectionViewSource.DetailDescriptions>\r\n    </xcdg:DataGridCollectionViewSource>\r\n  </Grid.Resources>\r\n\r\n  <xcdg:DataGridControl x:Name="EmployeesGrid"\r\n                      ItemsSource="{Binding Source={StaticResource cvs_employees}}"\r\n                      ItemsSourceName="Employee Information"\r\n                      AutoCreateDetailConfigurations="True" />\r\n</Grid>\n'})})}),(0,n.jsx)(o.A,{value:"csharp",label:"C#",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'  using System;\r\n  using System.Collections.Generic;\r\n  using System.Linq;\r\n  using System.Text;\r\n  using Xceed.Wpf.DataGrid;\r\n  using System.Reflection;\r\n  using System.Data.Linq.Mapping;\r\n  using System.Diagnostics;\r\n  using System.Collections;\r\n  namespace Xceed.Wpf.Documentation\r\n  {\r\n    public class LinqToSqlDetailDescription: DataGridDetailDescription\r\n    {\r\n      protected override IEnumerable GetDetailsForParentItem( DataGridCollectionView parentCollectionView,\r\n                                                              object parentItem )\r\n      {\r\n        Type parentItemType = parentItem.GetType();\r\n        PropertyInfo foundProperty = null;\r\n        \r\n        PropertyInfo[] properties = parentItemType.GetProperties();\r\n        foreach( PropertyInfo propertyInfo in properties )\r\n        {\r\n          object[] attributes = propertyInfo.GetCustomAttributes( typeof( AssociationAttribute ), false );\r\n          if( attributes.GetLength( 0 ) == 0 )\r\n            continue;\r\n          AssociationAttribute associationAttribute = ( AssociationAttribute )attributes[ 0 ];\r\n          if( associationAttribute.Name == this.RelationName )\r\n          {\r\n            foundProperty = propertyInfo;\r\n            break;\r\n          }\r\n        }\r\n        if( foundProperty == null )\r\n        {\r\n          return new object[] { };\r\n        }\r\n        else\r\n        {\r\n          object details = foundProperty.GetValue( parentItem, null );\r\n          Type detailsType = details.GetType();\r\n          MethodInfo getNewBindingList = detailsType.GetMethod( "GetNewBindingList" );\r\n          return ( IEnumerable )getNewBindingList.Invoke( details, null );\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /*...*/\r\n  NorthwindDataContext context = new NorthwindDataContext();      \r\n  DataGridCollectionView collectionView = new DataGridCollectionView( context.Employees, typeof( Employee ), true, false );      \r\n  collectionView.DetailDescriptions.Add( new LinqToSqlDetailDescription( "Employee_Employees", "Employees" ) );\r\n  LinqToSqlDetailDescription employeeCustomerDetail = new LinqToSqlDetailDescription( "Employee_Customer", "Customers" );\r\n  LinqToSqlDetailDescription customerOrderDetail = new LinqToSqlDetailDescription( "Customer_Order", "Orders" );\r\n  customerOrderDetail.DetailDescriptions.Add( new LinqToSqlDetailDescription( "Order_Order_Detail", "Order Details" ) );\r\n  employeeCustomerDetail.DetailDescriptions.Add( customerOrderDetail );\r\n  collectionView.DetailDescriptions.Add( employeeCustomerDetail );\r\n  dataGridControl.AutoCreateDetailConfigurations = true;\r\n  dataGridControl.ItemsSourceName = "Employee Information";\r\n  dataGridControl.ItemsSource = collectionView;\n'})})}),(0,n.jsx)(o.A,{value:"vbnet",label:"VB.NET",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-vbnet",children:'  Imports System\r\n  Imports System.Collections.Generic\r\n  Imports System.Linq\r\n  Imports System.Text\r\n  Imports Xceed.Wpf.DataGrid\r\n  Imports System.Reflection\r\n  Imports System.Data.Linq.Mapping\r\n  Imports System.Diagnostics\r\n  Imports System.Collections\r\n  Namespace Xceed.Wpf.Documentation\r\n    Public Class LinqToSqlDetailDescription\r\n                Inherits DataGridDetailDescription\r\n      Protected Overrides Function GetDetailsForParentItem( ByVal parentCollectionView As DataGridCollectionView, _\r\n                                                            ByVal parentItem As Object ) As IEnumerable\r\n        Dim parentItemType As Type = parentItem.GetType()\r\n        Dim foundProperty As PropertyInfo = Nothing\r\n        Dim properties() As PropertyInfo = parentItemType.GetProperties()\r\n        Dim propertyInfo As PropertyInfo\r\n        For Each propertyInfo In properties\r\n          Dim attributes() As Object = propertyInfo.GetCustomAttributes( Type.GetType( AssociationAttribute ), _\r\n                                                                          False)\r\n          If attributes.GetLength( 0 ) = 0 Then\r\n            continue\r\n          End If\r\n          Dim associationAttribute As AssociationAttribute = CType( attributes( 0 ), AssociationAttribute )\r\n          If associationAttribute.Name = Me.RelationName Then\r\n            foundProperty = propertyInfo\r\n            Exit Property\r\n          End If\r\n        Next\r\n        If foundProperty Is Nothing Then\r\n          Return New Object()\r\n        Else\r\n          Dim details As Object = foundProperty.GetValue( parentItem, Nothing )\r\n          Dim detailsType As Type = details.GetType()\r\n          Dim getNewBindingList As MethodInfo = detailsType.GetMethod( "GetNewBindingList" )\r\n          Return CType( getNewBindingList.Invoke( details, Nothing), IEnumerable )\r\n        End If\r\n      End Function\r\n    End Class\r\n  End Namespace\r\n  `...\r\n  Dim context As New NorthwindDataContext()\r\n  Dim collectionView As New DataGridCollectionView( context.Employees, GetType( Employee ), True, False )\r\n  collectionView.DetailDescriptions.Add( New LinqToSqlDetailDescription( "Employee_Employees", "Employees" ) )\r\n  Dim employeeCustomerDetail As New LinqToSqlDetailDescription( "Employee_Customer", "Customers" )\r\n  Dim customerOrderDetail As New LinqToSqlDetailDescription( "Customer_Order", "Orders" )\r\n  customerOrderDetail.DetailDescriptions.Add( New LinqToSqlDetailDescription( "Order_Order_Detail", "Order Details" ) )\r\n  employeeCustomerDetail.DetailDescriptions.Add( customerOrderDetail )\r\n  collectionView.DetailDescriptions.Add( employeeCustomerDetail )\r\n  dataGridControl.AutoCreateDetailConfigurations = True\r\n  dataGridControl.ItemsSourceName = "Employee Information"\r\n  dataGridControl.ItemsSource = collectionView\n'})})})]})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>o});r(6540);var n=r(4164);const i={tabItem:"tabItem_Ymn6"};var a=r(4848);function o(e){let{children:t,hidden:r,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,n.A)(i.tabItem,o),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>I});var n=r(6540),i=r(4164),a=r(3104),o=r(6347),s=r(205),l=r(7485),c=r(1682),d=r(679);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:i}}=e;return{value:t,label:r,attributes:n,default:i}}))}(r);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const i=(0,o.W6)(),a=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l.aZ)(a),(0,n.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function D(e){const{defaultValue:t,queryString:r=!1,groupId:i}=e,a=p(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a}))),[c,u]=h({queryString:r,groupId:i}),[D,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,d.Dv)(r);return[i,(0,n.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:i}),y=(()=>{const e=c??D;return m({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{y&&l(y)}),[y]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var f=r(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(4848);function g(e){let{className:t,block:r,selectedValue:n,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const t=e.currentTarget,r=l.indexOf(t),i=s[r].value;i!==n&&(c(t),o(i))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},t),children:s.map((e=>{let{value:t,label:r,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...a,className:(0,i.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function x(e){let{lazy:t,children:r,selectedValue:a}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function v(e){const t=D(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",y.tabList),children:[(0,b.jsx)(g,{...t,...e}),(0,b.jsx)(x,{...t,...e})]})}function I(e){const t=(0,f.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(t))}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>s});var n=r(6540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);